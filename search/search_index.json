{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UI5 Tooling \u00b6 An open and modular toolchain to develop state-of-the-art applications based on the UI5 framework. Get Started Main Features \u00b6 \ud83d\udcbb UI5 CLI \u00b6 Also see the UI5 CLI Documentation # Global npm install --global @ui5/cli # In your project npm install --save-dev @ui5/cli \u2699\ufe0f Project Setup \u00b6 Configure your project for use with UI5 Tooling. Also see the Configuration Documentation \u276f ui5 init Wrote ui5.yaml: specVersion: '2.6' metadata: name: my-app type: application \ud83d\ude9a Dependency Management \u00b6 UI5 framework dependencies are managed by the tooling. All other dependencies are managed by your favorite node package manager. \u276f ui5 use SAPUI5@1.76.0 Updated configuration written to ui5.yaml This project is now using SAPUI5 version 1.76.0 \u276f ui5 add sap.ui.core sap.m themelib_sap_fiori_3 Updated configuration written to ui5.yaml Added framework libraries sap.ui.core sap.m themelib_sap_fiori_3 as dependencies \ud83c\udfc4 Development Server \u00b6 Start a local development server to work on your project. Also see the Server Documentation \u276f ui5 serve Server started URL: http://localhost:8080 \ud83d\udee0 Build for Production \u00b6 Build an optimized version of your project. Also see the Builder Documentation \u276f ui5 build Building my-app... \ud83d\udd28 (1/8) Running task escapeNonAsciiCharacters... \ud83d\udd28 (2/8) Running task replaceCopyright... \ud83d\udd28 (3/8) Running task replaceVersion... \ud83d\udd28 (4/8) Running task generateFlexChangesBundle... \ud83d\udd28 (5/8) Running task generateComponentPreload... \ud83d\udd28 (6/8) Running task createDebugFiles... \ud83d\udd28 (7/8) Running task uglify... \ud83d\udd28 (8/8) Running task generateVersionInfo... Build succeeded in 363 ms \ud83e\uddea Node.js API \u00b6 Most UI5 Tooling modules provide JavaScript APIs for direct consumption in other Node.js projects. This allows you to rely on UI5 Tooling for UI5-specific build functionality and project handling, while creating your own tools to perfectly match the needs of your project. All available APIs are documented in the UI5 Tooling API Reference . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const { normalizer } = require ( \"@ui5/project\" ); const { builder } = require ( \"@ui5/builder\" ); async function buildApp ( projectPath , destinationPath ) { const tree = await normalizer . generateProjectTree ({ cwd : projectPath }); await builder . build ({ tree , destPath : destinationPath , selfContained : true , excludedTasks : [ \"transformBootstrapHtml\" ], buildDependencies : true }); } [...]","title":"Home"},{"location":"#ui5-tooling","text":"An open and modular toolchain to develop state-of-the-art applications based on the UI5 framework. Get Started","title":"UI5 Tooling"},{"location":"#main-features","text":"","title":"Main Features"},{"location":"#ui5-cli","text":"Also see the UI5 CLI Documentation # Global npm install --global @ui5/cli # In your project npm install --save-dev @ui5/cli","title":"\ud83d\udcbb UI5 CLI"},{"location":"#project-setup","text":"Configure your project for use with UI5 Tooling. Also see the Configuration Documentation \u276f ui5 init Wrote ui5.yaml: specVersion: '2.6' metadata: name: my-app type: application","title":"\u2699\ufe0f Project Setup"},{"location":"#dependency-management","text":"UI5 framework dependencies are managed by the tooling. All other dependencies are managed by your favorite node package manager. \u276f ui5 use SAPUI5@1.76.0 Updated configuration written to ui5.yaml This project is now using SAPUI5 version 1.76.0 \u276f ui5 add sap.ui.core sap.m themelib_sap_fiori_3 Updated configuration written to ui5.yaml Added framework libraries sap.ui.core sap.m themelib_sap_fiori_3 as dependencies","title":"\ud83d\ude9a Dependency Management"},{"location":"#development-server","text":"Start a local development server to work on your project. Also see the Server Documentation \u276f ui5 serve Server started URL: http://localhost:8080","title":"\ud83c\udfc4 Development Server"},{"location":"#build-for-production","text":"Build an optimized version of your project. Also see the Builder Documentation \u276f ui5 build Building my-app... \ud83d\udd28 (1/8) Running task escapeNonAsciiCharacters... \ud83d\udd28 (2/8) Running task replaceCopyright... \ud83d\udd28 (3/8) Running task replaceVersion... \ud83d\udd28 (4/8) Running task generateFlexChangesBundle... \ud83d\udd28 (5/8) Running task generateComponentPreload... \ud83d\udd28 (6/8) Running task createDebugFiles... \ud83d\udd28 (7/8) Running task uglify... \ud83d\udd28 (8/8) Running task generateVersionInfo... Build succeeded in 363 ms","title":"\ud83d\udee0 Build for Production"},{"location":"#nodejs-api","text":"Most UI5 Tooling modules provide JavaScript APIs for direct consumption in other Node.js projects. This allows you to rely on UI5 Tooling for UI5-specific build functionality and project handling, while creating your own tools to perfectly match the needs of your project. All available APIs are documented in the UI5 Tooling API Reference . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const { normalizer } = require ( \"@ui5/project\" ); const { builder } = require ( \"@ui5/builder\" ); async function buildApp ( projectPath , destinationPath ) { const tree = await normalizer . generateProjectTree ({ cwd : projectPath }); await builder . build ({ tree , destPath : destinationPath , selfContained : true , excludedTasks : [ \"transformBootstrapHtml\" ], buildDependencies : true }); } [...]","title":"\ud83e\uddea Node.js API"},{"location":"Guidelines/","text":"Development Conventions and Guidelines \u00b6 The UI5 Tooling Version 2 code line won't get any further features. Therefore, please checkout the latest Guidelines .","title":"Development Conventions and Guidelines"},{"location":"Guidelines/#development-conventions-and-guidelines","text":"The UI5 Tooling Version 2 code line won't get any further features. Therefore, please checkout the latest Guidelines .","title":"Development Conventions and Guidelines"},{"location":"indexJsdoc/","text":"UI5 Tooling API Reference \u00b6 Support \u00b6 Please follow our Contribution Guidelines on how to report an issue. Or chat with us in the #tooling channel of the OpenUI5 Community Slack License \u00b6 This project is licensed under the Apache Software License, Version 2.0 except as noted otherwise in the LICENSE file.","title":"UI5 Tooling API Reference"},{"location":"indexJsdoc/#ui5-tooling-api-reference","text":"","title":"UI5 Tooling API Reference"},{"location":"indexJsdoc/#support","text":"Please follow our Contribution Guidelines on how to report an issue. Or chat with us in the #tooling channel of the OpenUI5 Community Slack","title":"Support"},{"location":"indexJsdoc/#license","text":"This project is licensed under the Apache Software License, Version 2.0 except as noted otherwise in the LICENSE file.","title":"License"},{"location":"pages/Builder/","text":"UI5 Builder \u00b6 The UI5 Builder module takes care of building your project. Based on a project's type, the UI5 Builder defines a series of build steps to execute; these are also called \"tasks\". For every type there is a set of default tasks. You can disable single tasks using the --exclude-task CLI parameter , and you can include tasks using the --include-task parameter. API Reference Types \u00b6 Types define how a project can be configured and how it is built. A type orchestrates a set of tasks and defines the order in which they get applied during build phase. Furthermore, it takes care of formatting and validating the project-specific configuration. Also see UI5 Project: Configuration application \u00b6 Projects of type application are typically the main or root project. In a projects dependency tree, there should only be one project of type application . If multiple are found, those further away from the root are ignored. The source directory of an application (typically named webapp ) is mapped to the virtual root path / . An applications source directory may or may not contain a Component.js file. If it does, it must also contain a manifest.json file. If there is a Component.js file, an optimized Component-preload.js file will be generated during the build. library \u00b6 UI5 libraries are often referred to as reuse-, custom- or control libraries . They are a key component in sharing code across multiple projects in UI5. A project of type library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. These directories should contain a directory structure representing the namespace of the library (e.g. src/my/first/library ) to prevent name clashes between the resources of different libraries. theme-library \u00b6 Available since Specification Version 1.1 UI5 theme libraries provide theming resources for the controls of one or multiple libraries. A project of type theme-library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. The source directory must contain a directory structure representing the namespaces of the libraries it provides theme resources for. For example, a theme library named my_custom_theme , providing resources for a library named my.library should have these resources in a directory path my/library/themes/my_custom_theme/ . module \u00b6 The module type is meant for usage with non-UI5 resources like third party libraries. Their path mapping can be configured freely. During a build, their resources are copied without modifications. Tasks \u00b6 Tasks are specific build steps to be executed during build phase. They are responsible for collecting resources which can be modified by a processor. A task configures one or more processors and supplies them with the collected resources. After the respective processor processed the resources, the task is able to continue with its workflow. A project can add custom tasks to the build by using the Custom Tasks Extensibility . Standard Tasks \u00b6 All available standard tasks are documented in the API reference and are listed below in the order of their execution: Task Type application Type library Type theme-library escapeNonAsciiCharacters enabled enabled replaceCopyright enabled enabled enabled replaceVersion enabled enabled enabled replaceBuildtime enabled generateJsdoc disabled 1 executeJsdocSdkTransformation disabled 1 generateFlexChangesBundle enabled generateManifestBundle disabled disabled generateLibraryManifest enabled generateComponentPreload enabled disabled 2 generateLibraryPreload enabled generateStandaloneAppBundle disabled 3 transformBootstrapHtml disabled 3 generateBundle disabled 4 disabled 4 buildThemes enabled enabled generateThemeDesignerResources disabled disabled createDebugFiles enabled enabled uglify enabled enabled generateVersionInfo enabled generateCachebusterInfo disabled generateApiIndex disabled 1 generateResourcesJson disabled disabled disabled Disabled tasks can be activated by certain build modes, the project configuration, or by using the --include-task CLI parameter . See footnotes where given 1 Enabled in jsdoc build, which disables most of the other tasks 2 Enabled for projects defining a component preload configuration 3 Enabled in self-contained build, which disables generateComponentPreload and generateLibraryPreload 4 Enabled for projects defining a bundle configuration Processors \u00b6 Processors work with provided resources. They contain the actual build step logic to apply specific modifications to supplied resources, or to make use of the resources' content to create new resources out of that. Processors can be implemented generically. The string replacer is an example for that. Since string replacement is a common build step, it can be useful in different contexts, e.g. code, version, date, and copyright replacement. A concrete replacement operation could be achieved by passing a custom configuration to the processor. This way, multiple tasks can make use of the same processor to achieve their build step. Available processors are listed in the API reference . Source Map support \u00b6 Source Maps will be supported by the upcoming v3.0.0 version which is currently in development. Files will be generated automatically for all bundles. See Migrate to v3 and SAP/ui5-builder#695 for further details. Legacy Bundle Tooling (lbt) \u00b6 JavaScript port of the \"legacy\" Maven/Java based bundle tooling.","title":"Builder"},{"location":"pages/Builder/#ui5-builder","text":"The UI5 Builder module takes care of building your project. Based on a project's type, the UI5 Builder defines a series of build steps to execute; these are also called \"tasks\". For every type there is a set of default tasks. You can disable single tasks using the --exclude-task CLI parameter , and you can include tasks using the --include-task parameter. API Reference","title":"UI5 Builder"},{"location":"pages/Builder/#types","text":"Types define how a project can be configured and how it is built. A type orchestrates a set of tasks and defines the order in which they get applied during build phase. Furthermore, it takes care of formatting and validating the project-specific configuration. Also see UI5 Project: Configuration","title":"Types"},{"location":"pages/Builder/#application","text":"Projects of type application are typically the main or root project. In a projects dependency tree, there should only be one project of type application . If multiple are found, those further away from the root are ignored. The source directory of an application (typically named webapp ) is mapped to the virtual root path / . An applications source directory may or may not contain a Component.js file. If it does, it must also contain a manifest.json file. If there is a Component.js file, an optimized Component-preload.js file will be generated during the build.","title":"application"},{"location":"pages/Builder/#library","text":"UI5 libraries are often referred to as reuse-, custom- or control libraries . They are a key component in sharing code across multiple projects in UI5. A project of type library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. These directories should contain a directory structure representing the namespace of the library (e.g. src/my/first/library ) to prevent name clashes between the resources of different libraries.","title":"library"},{"location":"pages/Builder/#theme-library","text":"Available since Specification Version 1.1 UI5 theme libraries provide theming resources for the controls of one or multiple libraries. A project of type theme-library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. The source directory must contain a directory structure representing the namespaces of the libraries it provides theme resources for. For example, a theme library named my_custom_theme , providing resources for a library named my.library should have these resources in a directory path my/library/themes/my_custom_theme/ .","title":"theme-library"},{"location":"pages/Builder/#module","text":"The module type is meant for usage with non-UI5 resources like third party libraries. Their path mapping can be configured freely. During a build, their resources are copied without modifications.","title":"module"},{"location":"pages/Builder/#tasks","text":"Tasks are specific build steps to be executed during build phase. They are responsible for collecting resources which can be modified by a processor. A task configures one or more processors and supplies them with the collected resources. After the respective processor processed the resources, the task is able to continue with its workflow. A project can add custom tasks to the build by using the Custom Tasks Extensibility .","title":"Tasks"},{"location":"pages/Builder/#standard-tasks","text":"All available standard tasks are documented in the API reference and are listed below in the order of their execution: Task Type application Type library Type theme-library escapeNonAsciiCharacters enabled enabled replaceCopyright enabled enabled enabled replaceVersion enabled enabled enabled replaceBuildtime enabled generateJsdoc disabled 1 executeJsdocSdkTransformation disabled 1 generateFlexChangesBundle enabled generateManifestBundle disabled disabled generateLibraryManifest enabled generateComponentPreload enabled disabled 2 generateLibraryPreload enabled generateStandaloneAppBundle disabled 3 transformBootstrapHtml disabled 3 generateBundle disabled 4 disabled 4 buildThemes enabled enabled generateThemeDesignerResources disabled disabled createDebugFiles enabled enabled uglify enabled enabled generateVersionInfo enabled generateCachebusterInfo disabled generateApiIndex disabled 1 generateResourcesJson disabled disabled disabled Disabled tasks can be activated by certain build modes, the project configuration, or by using the --include-task CLI parameter . See footnotes where given 1 Enabled in jsdoc build, which disables most of the other tasks 2 Enabled for projects defining a component preload configuration 3 Enabled in self-contained build, which disables generateComponentPreload and generateLibraryPreload 4 Enabled for projects defining a bundle configuration","title":"Standard Tasks"},{"location":"pages/Builder/#processors","text":"Processors work with provided resources. They contain the actual build step logic to apply specific modifications to supplied resources, or to make use of the resources' content to create new resources out of that. Processors can be implemented generically. The string replacer is an example for that. Since string replacement is a common build step, it can be useful in different contexts, e.g. code, version, date, and copyright replacement. A concrete replacement operation could be achieved by passing a custom configuration to the processor. This way, multiple tasks can make use of the same processor to achieve their build step. Available processors are listed in the API reference .","title":"Processors"},{"location":"pages/Builder/#source-map-support","text":"Source Maps will be supported by the upcoming v3.0.0 version which is currently in development. Files will be generated automatically for all bundles. See Migrate to v3 and SAP/ui5-builder#695 for further details.","title":"Source Map support"},{"location":"pages/Builder/#legacy-bundle-tooling-lbt","text":"JavaScript port of the \"legacy\" Maven/Java based bundle tooling.","title":"Legacy Bundle Tooling (lbt)"},{"location":"pages/CLI/","text":"UI5 CLI \u00b6 Requirements \u00b6 Node.js Version 10 or later Installation \u00b6 Install the CLI using the npm package manager: npm install --global @ui5/cli # Verify installation ui5 --help Usage/Syntax \u00b6 ui5 <command> [options] The CLI automatically checks for updates using update-notifier . While this is skipped in CI environments, you might also opt-out manually by following the steps described here . Common options \u00b6 These options you can use with each command. Option Description Details -h, --help Show help [boolean] -v, --version Show version number [boolean] --config Path to configuration file [string] --translator, --t8r Translator to use. Including optional colon separated translator parameters. [string] [default: \"npm\"] --verbose Enable verbose logging. [boolean] --loglevel, --log-level Set the logging level (error|warn|info|verbose|silly). [string] [default: \"info\"] Examples \u00b6 Execute command using a \"static\" translator with translator parameters ui5 <command> --translator static:/path/to/projectDependencies.yaml Execute command using a project configuration from custom path ui5 <command> --config /path/to/ui5.yaml Commands \u00b6 ui5 add \u00b6 Description Add SAPUI5/OpenUI5 framework libraries to the project configuration. Usage ui5 add [--development] [--optional] <framework-libraries..> Options Option Description Details -D, --development, --dev Add as development dependency [boolean] [default: false] -O, --optional Add as optional dependency [boolean] [default: false] Positionals Positional Description Details framework-libraries Framework library names [array] [required] [default: []] Examples Add the framework libraries sap.ui.core and sap.m as dependencies ui5 add sap.ui.core sap.m Add the framework library sap.ui.support as development dependency ui5 add -D sap.ui.support Add the framework library themelib_sap_fiori_3 as optional dependency ui5 add --optional themelib_sap_fiori_3 ui5 build \u00b6 Description Build project in current directory Usage ui5 build Child Commands Command Description ui5 build dev Dev build: Skips non-essential and time-intensive tasks during build ui5 build jsdoc Build JSDoc resources ui5 build preload (default) Build project and create preload bundles ui5 build self-contained Build project and create self-contained bundle. Recommended to be used in conjunction with --all Options Option Description Details -a, --all Include all project dependencies into build process [boolean] [default: false] --include-dependency A list of dependencies to be included into the build process. You can use the asterisk '*' as an alias for including all dependencies into the build process. The listed dependencies cannot be overruled by dependencies defined in 'exclude-dependency'. [array] --include-dependency-regexp A list of regular expressions defining dependencies to be included into the build process. This list is prioritized like 'include-dependency'. [array] --include-dependency-tree A list of dependencies to be included into the build process. Transitive dependencies are implicitly included and do not need to be part of this list. These dependencies overrule the selection of 'exclude-dependency-tree' but can be overruled by 'exclude-dependency'. [array] --exclude-dependency A list of dependencies to be excluded from the build process. The listed dependencies can be overruled by dependencies defined in 'include-dependency'. [array] --exclude-dependency-regexp A list of regular expressions defining dependencies to be excluded from the build process. This list is prioritized like 'exclude-dependency'. [array] --exclude-dependency-tree A list of dependencies to be excluded from the build process. Transitive dependencies are implicitly included and do not need to be part of this list. [array] --dest Path of build destination [string] [default: \"./dist\"] --clean-dest If present, clean the destination directory before building [boolean] [default: false] --dev-exclude-project A list of specific projects to be excluded from dev mode (dev mode must be active for this to be effective) [array] --include-task A list of specific tasks to be included to the default/dev set [array] --exclude-task A list of specific tasks to be excluded from default/dev set [array] --framework-version Overrides the framework version defined by the project [string] Examples Preload build for project without dependencies ui5 build Self-contained build for project including dependencies ui5 build self-contained --all Build project and dependencies but only apply the createDebugFiles- and generateAppPreload tasks ui5 build --all --exclude-task=* --include-task=createDebugFiles generateAppPreload Build project and dependencies by applying all default tasks including the createDebugFiles task and excluding the generateAppPreload task ui5 build --all --include-task=createDebugFiles --exclude-task=generateAppPreload Build project and dependencies in dev mode, except \"sap.ui.core\" and \"sap.m\" (useful in combination with --include-task) ui5 build dev --all --dev-exclude-project=sap.ui.core sap.m Build project and dependencies in dev mode. Only a set of essential tasks is executed. ui5 build dev ui5 init \u00b6 Description Initialize the UI5 Tooling configuration for an application or library project. Usage ui5 init ui5 remove \u00b6 Description Remove SAPUI5/OpenUI5 framework libraries from the project configuration. Usage ui5 remove <framework-libraries..> Positionals Positional Description Details framework-libraries Framework library names [array] [required] [default: []] Examples Remove the framework libraries sap.ui.core and sap.m as dependencies ui5 remove sap.ui.core sap.m ui5 serve \u00b6 Description Start a web server for the current project Usage ui5 serve Options Option Description Details -p, --port Port to bind on (default for HTTP: 8080, HTTP/2: 8443) [number] -o, --open Open web server root directory in default browser. Optionally, supplied relative path will be appended to the root URL [string] --h2 Shortcut for enabling the HTTP/2 protocol for the web server [boolean] [default: false] --simple-index Use a simplified view for the server directory listing [boolean] [default: false] --accept-remote-connections Accept remote connections. By default the server only accepts connections from localhost [boolean] [default: false] --key Path to the private key [string] [default: \"/home/runner/.ui5/server/server.key\"] --cert Path to the certificate [string] [default: \"/home/runner/.ui5/server/server.crt\"] --sap-csp-policies Always send content security policies 'sap-target-level-1' and 'sap-target-level-2' in report-only mode [boolean] [default: false] --serve-csp-reports Collects and serves CSP reports upon request to '/.ui5/csp/csp-reports.json' [boolean] [default: false] --framework-version Overrides the framework version defined by the project [string] Examples Start a web server for the current project ui5 serve Enable the HTTP/2 protocol for the web server (requires SSL certificate) ui5 serve --h2 Use the project configuration from a custom path ui5 serve --config /path/to/ui5.yaml Use a \"static\" translator with translator parameters. ui5 serve --translator static:/path/to/projectDependencies.yaml Listen to port 1337 and launch default browser with http://localhost:1337/test/QUnit.html ui5 serve --port 1337 --open tests/QUnit.html ui5 tree \u00b6 Description Outputs the dependency tree of the current project to stdout. It takes all relevant parameters of ui5 build into account. Usage ui5 tree Options Option Description Details --full Include more information (currently the project configuration) [boolean] [default: false] --json Output tree as formatted JSON string [boolean] [default: false] --dedupe Remove duplicate projects from project tree [boolean] [default: false] --framework-version Overrides the framework version defined by the project. Only supported in combination with --full [string] Examples Pipes the dependency tree into a new file \"tree.txt\" ui5 tree > tree.txt Pipes the dependency tree into a new file \"tree.json\" ui5 tree --json > tree.json ui5 use \u00b6 Description Initialize or update the project's framework configuration. Usage ui5 use <framework-info> Positionals Positional Description Details framework-info Framework name, version or both (name@version). Name can be \"SAPUI5\" or \"OpenUI5\" (case-insensitive). Version can be \"latest\" (default), \"1.xx\" or \"1.xx.x\". [string] [required] Examples Use SAPUI5 in the latest available version ui5 use sapui5@latest Use OpenUI5 in the latest available 1.76 patch version ui5 use openui5@1.76 Use the latest available version of the configured framework ui5 use latest Use OpenUI5 in the latest available version ui5 use openui5 ui5 versions \u00b6 Description Shows the versions of all UI5 Tooling modules Usage ui5 versions Local vs. Global Installation \u00b6 In general, we recommend a global installation of the UI5 CLI ( npm install --global @ui5/cli ). However, it makes sense to add the UI5 CLI as a devDependency ( npm install --save-dev @ui5/cli ) to a project's package.json . This ensures that every developer working on the project uses the same version of the UI5 CLI and your continuous integration environments also uses this version. In case you have both, a local installation in one of your projects as well as a global installation, the UI5 CLI will always try to invoke the local installation. This is in part because npm scripts defined in your package.json will also always invoke the local installation. This behavior can be disabled by setting the environment variable UI5_CLI_NO_LOCAL . Example You have a project located in the directory /my-application . You have installed the UI5 CLI globally. In addition, the project's package.json defines a devDependency to @ui5/cli and a start script \"ui5 serve\" . This means there are at least two installations of @ui5/cli on your system. Their versions might not match. This table illustrates which of the two installations is used in different scenarios. Note how the UI5 CLI always tries to prefer the version installed in the project. Current Working Directory Command Global UI5 CLI Local UI5 CLI / ui5 --version enabled /my-application ui5 --version enabled /my-application ui5 serve enabled /my-application UI5_CLI_NO_LOCAL=X ui5 serve enabled /my-application npm start enabled /my-application UI5_CLI_NO_LOCAL=X npm start enabled","title":"UI5 CLI"},{"location":"pages/CLI/#ui5-cli","text":"","title":"UI5 CLI"},{"location":"pages/CLI/#requirements","text":"Node.js Version 10 or later","title":"Requirements"},{"location":"pages/CLI/#installation","text":"Install the CLI using the npm package manager: npm install --global @ui5/cli # Verify installation ui5 --help","title":"Installation"},{"location":"pages/CLI/#usagesyntax","text":"ui5 <command> [options] The CLI automatically checks for updates using update-notifier . While this is skipped in CI environments, you might also opt-out manually by following the steps described here .","title":"Usage/Syntax"},{"location":"pages/CLI/#common-options","text":"These options you can use with each command. Option Description Details -h, --help Show help [boolean] -v, --version Show version number [boolean] --config Path to configuration file [string] --translator, --t8r Translator to use. Including optional colon separated translator parameters. [string] [default: \"npm\"] --verbose Enable verbose logging. [boolean] --loglevel, --log-level Set the logging level (error|warn|info|verbose|silly). [string] [default: \"info\"]","title":"Common options"},{"location":"pages/CLI/#examples","text":"Execute command using a \"static\" translator with translator parameters ui5 <command> --translator static:/path/to/projectDependencies.yaml Execute command using a project configuration from custom path ui5 <command> --config /path/to/ui5.yaml","title":"Examples"},{"location":"pages/CLI/#commands","text":"","title":"Commands"},{"location":"pages/CLI/#ui5-add","text":"Description Add SAPUI5/OpenUI5 framework libraries to the project configuration. Usage ui5 add [--development] [--optional] <framework-libraries..> Options Option Description Details -D, --development, --dev Add as development dependency [boolean] [default: false] -O, --optional Add as optional dependency [boolean] [default: false] Positionals Positional Description Details framework-libraries Framework library names [array] [required] [default: []] Examples Add the framework libraries sap.ui.core and sap.m as dependencies ui5 add sap.ui.core sap.m Add the framework library sap.ui.support as development dependency ui5 add -D sap.ui.support Add the framework library themelib_sap_fiori_3 as optional dependency ui5 add --optional themelib_sap_fiori_3","title":"ui5 add"},{"location":"pages/CLI/#ui5-build","text":"Description Build project in current directory Usage ui5 build Child Commands Command Description ui5 build dev Dev build: Skips non-essential and time-intensive tasks during build ui5 build jsdoc Build JSDoc resources ui5 build preload (default) Build project and create preload bundles ui5 build self-contained Build project and create self-contained bundle. Recommended to be used in conjunction with --all Options Option Description Details -a, --all Include all project dependencies into build process [boolean] [default: false] --include-dependency A list of dependencies to be included into the build process. You can use the asterisk '*' as an alias for including all dependencies into the build process. The listed dependencies cannot be overruled by dependencies defined in 'exclude-dependency'. [array] --include-dependency-regexp A list of regular expressions defining dependencies to be included into the build process. This list is prioritized like 'include-dependency'. [array] --include-dependency-tree A list of dependencies to be included into the build process. Transitive dependencies are implicitly included and do not need to be part of this list. These dependencies overrule the selection of 'exclude-dependency-tree' but can be overruled by 'exclude-dependency'. [array] --exclude-dependency A list of dependencies to be excluded from the build process. The listed dependencies can be overruled by dependencies defined in 'include-dependency'. [array] --exclude-dependency-regexp A list of regular expressions defining dependencies to be excluded from the build process. This list is prioritized like 'exclude-dependency'. [array] --exclude-dependency-tree A list of dependencies to be excluded from the build process. Transitive dependencies are implicitly included and do not need to be part of this list. [array] --dest Path of build destination [string] [default: \"./dist\"] --clean-dest If present, clean the destination directory before building [boolean] [default: false] --dev-exclude-project A list of specific projects to be excluded from dev mode (dev mode must be active for this to be effective) [array] --include-task A list of specific tasks to be included to the default/dev set [array] --exclude-task A list of specific tasks to be excluded from default/dev set [array] --framework-version Overrides the framework version defined by the project [string] Examples Preload build for project without dependencies ui5 build Self-contained build for project including dependencies ui5 build self-contained --all Build project and dependencies but only apply the createDebugFiles- and generateAppPreload tasks ui5 build --all --exclude-task=* --include-task=createDebugFiles generateAppPreload Build project and dependencies by applying all default tasks including the createDebugFiles task and excluding the generateAppPreload task ui5 build --all --include-task=createDebugFiles --exclude-task=generateAppPreload Build project and dependencies in dev mode, except \"sap.ui.core\" and \"sap.m\" (useful in combination with --include-task) ui5 build dev --all --dev-exclude-project=sap.ui.core sap.m Build project and dependencies in dev mode. Only a set of essential tasks is executed. ui5 build dev","title":"ui5 build"},{"location":"pages/CLI/#ui5-init","text":"Description Initialize the UI5 Tooling configuration for an application or library project. Usage ui5 init","title":"ui5 init"},{"location":"pages/CLI/#ui5-remove","text":"Description Remove SAPUI5/OpenUI5 framework libraries from the project configuration. Usage ui5 remove <framework-libraries..> Positionals Positional Description Details framework-libraries Framework library names [array] [required] [default: []] Examples Remove the framework libraries sap.ui.core and sap.m as dependencies ui5 remove sap.ui.core sap.m","title":"ui5 remove"},{"location":"pages/CLI/#ui5-serve","text":"Description Start a web server for the current project Usage ui5 serve Options Option Description Details -p, --port Port to bind on (default for HTTP: 8080, HTTP/2: 8443) [number] -o, --open Open web server root directory in default browser. Optionally, supplied relative path will be appended to the root URL [string] --h2 Shortcut for enabling the HTTP/2 protocol for the web server [boolean] [default: false] --simple-index Use a simplified view for the server directory listing [boolean] [default: false] --accept-remote-connections Accept remote connections. By default the server only accepts connections from localhost [boolean] [default: false] --key Path to the private key [string] [default: \"/home/runner/.ui5/server/server.key\"] --cert Path to the certificate [string] [default: \"/home/runner/.ui5/server/server.crt\"] --sap-csp-policies Always send content security policies 'sap-target-level-1' and 'sap-target-level-2' in report-only mode [boolean] [default: false] --serve-csp-reports Collects and serves CSP reports upon request to '/.ui5/csp/csp-reports.json' [boolean] [default: false] --framework-version Overrides the framework version defined by the project [string] Examples Start a web server for the current project ui5 serve Enable the HTTP/2 protocol for the web server (requires SSL certificate) ui5 serve --h2 Use the project configuration from a custom path ui5 serve --config /path/to/ui5.yaml Use a \"static\" translator with translator parameters. ui5 serve --translator static:/path/to/projectDependencies.yaml Listen to port 1337 and launch default browser with http://localhost:1337/test/QUnit.html ui5 serve --port 1337 --open tests/QUnit.html","title":"ui5 serve"},{"location":"pages/CLI/#ui5-tree","text":"Description Outputs the dependency tree of the current project to stdout. It takes all relevant parameters of ui5 build into account. Usage ui5 tree Options Option Description Details --full Include more information (currently the project configuration) [boolean] [default: false] --json Output tree as formatted JSON string [boolean] [default: false] --dedupe Remove duplicate projects from project tree [boolean] [default: false] --framework-version Overrides the framework version defined by the project. Only supported in combination with --full [string] Examples Pipes the dependency tree into a new file \"tree.txt\" ui5 tree > tree.txt Pipes the dependency tree into a new file \"tree.json\" ui5 tree --json > tree.json","title":"ui5 tree"},{"location":"pages/CLI/#ui5-use","text":"Description Initialize or update the project's framework configuration. Usage ui5 use <framework-info> Positionals Positional Description Details framework-info Framework name, version or both (name@version). Name can be \"SAPUI5\" or \"OpenUI5\" (case-insensitive). Version can be \"latest\" (default), \"1.xx\" or \"1.xx.x\". [string] [required] Examples Use SAPUI5 in the latest available version ui5 use sapui5@latest Use OpenUI5 in the latest available 1.76 patch version ui5 use openui5@1.76 Use the latest available version of the configured framework ui5 use latest Use OpenUI5 in the latest available version ui5 use openui5","title":"ui5 use"},{"location":"pages/CLI/#ui5-versions","text":"Description Shows the versions of all UI5 Tooling modules Usage ui5 versions","title":"ui5 versions"},{"location":"pages/CLI/#local-vs-global-installation","text":"In general, we recommend a global installation of the UI5 CLI ( npm install --global @ui5/cli ). However, it makes sense to add the UI5 CLI as a devDependency ( npm install --save-dev @ui5/cli ) to a project's package.json . This ensures that every developer working on the project uses the same version of the UI5 CLI and your continuous integration environments also uses this version. In case you have both, a local installation in one of your projects as well as a global installation, the UI5 CLI will always try to invoke the local installation. This is in part because npm scripts defined in your package.json will also always invoke the local installation. This behavior can be disabled by setting the environment variable UI5_CLI_NO_LOCAL . Example You have a project located in the directory /my-application . You have installed the UI5 CLI globally. In addition, the project's package.json defines a devDependency to @ui5/cli and a start script \"ui5 serve\" . This means there are at least two installations of @ui5/cli on your system. Their versions might not match. This table illustrates which of the two installations is used in different scenarios. Note how the UI5 CLI always tries to prefer the version installed in the project. Current Working Directory Command Global UI5 CLI Local UI5 CLI / ui5 --version enabled /my-application ui5 --version enabled /my-application ui5 serve enabled /my-application UI5_CLI_NO_LOCAL=X ui5 serve enabled /my-application npm start enabled /my-application UI5_CLI_NO_LOCAL=X npm start enabled","title":"Local vs. Global Installation"},{"location":"pages/Configuration/","text":"Configuration \u00b6 A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Info This document describes the configuration of UI5 Tooling-based projects and extensions. It represents Specification Version 2.6 . Validation / IDE support \u00b6 Starting with Specification Version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store Catalog which is used by the YAML Language Server . See the list of clients to find extensions for various IDEs and editors. Example \u00b6 specVersion : \"2.6\" type : application|library|theme-library|module metadata : name : some.project.name General Configuration \u00b6 A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1) or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. Example application library theme-library module specVersion : \"2.6\" type : application specVersion : \"2.6\" type : library specVersion : \"2.6\" type : theme-library specVersion : \"2.6\" type : module Metadata \u00b6 Example metadata : name : my.company.project copyright : |- My Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the XYZ License, Version n - see LICENSE.txt. name \u00b6 A project must have a name and might define a copyright string. In UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like company.businessarea.project . copyright \u00b6 A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a project's source code. |- is a way to define a multi line string in YAML. Check the YAML Specification for details. Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year. deprecated \u00b6 In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, UI5 Tooling will then display a deprecation warning. Resources \u00b6 Path Mapping \u00b6 Depending on the project type, UI5 Tooling expects your projects source files to be located in certain directories. If your project's sources are located in different directories, you need to configure the path mapping accordingly. Depending on the type of project, there are several different path mappings available. Note that all configured paths must be written in POSIX (i.e. using only forward slashes / ) and relative to the project's root directory. Available Path Mappings \u00b6 Applications Libraries Modules webapp : Mapped to runtime path / (root) Default configuration: resources : configuration : paths : webapp : webapp src : Mapped to runtime path /resources test : Mapped to runtime path /test-resources Default configuration: resources : configuration : paths : src : src test : test Any virtual paths can be mapped to any physical path. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ). Example configuration: resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Example For an application project with the following directory structure, you need the path mapping configuration given below: Directory Structure my-app/ \\_ ui5.yaml \\_ lib/ \\_ js/ \\_ app/ Path Mapping Configuration resources : configuration : paths : webapp : lib/js/app Encoding of *.properties files \u00b6 Info This configuration is available since UI5 CLI v1.7.0 Example UTF-8 ISO-8859-1 resources : configuration : propertiesFileSourceEncoding : UTF-8 resources : configuration : propertiesFileSourceEncoding : ISO-8859-1 By default UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details. Custom Configuration \u00b6 Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Example customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Custom configuration that is ignored by UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure. Framework Configuration \u00b6 Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies. Framework and Version \u00b6 In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework and which version: OpenUI5 SAPUI5 framework : name : OpenUI5 version : 1.82.0 framework : name : SAPUI5 version : 1.82.0 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . You can find an overview of the available versions for each framework here: OpenUI5 Version Overview The lowest version supported by UI5 Tooling is 1.52.5 SAPUI5 Version Overview The lowest version supported by UI5 Tooling is 1.76.0 Info Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. Dependencies \u00b6 Example application library specVersion : \"2.6\" type : application metadata : name : my.company.app framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 specVersion : \"2.6\" type : library metadata : name : my.company.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true When building an application depending on this library as well as one of the theme libraries, only that theme is built for this library. Runtime Dependencies \u00b6 All libraries required by your project must be listed in the libraries section of the framework configuration: OpenUI5 SAPUI5 framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp Development Dependencies \u00b6 Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa. Optional Dependencies \u00b6 Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true Build Configuration \u00b6 Exclude Resources \u00b6 Example builder : resources : excludes : - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual path of resources (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes. Cachebuster \u00b6 Example time (default) hash builder : cachebuster : signatureType : time builder : cachebuster : signatureType : hash By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. Also see PR #241 for more details. Component Preload Generation \u00b6 For projects of type application a Component-preload.js bundle is generated by default. This bundle will contain most UI5 runtime-relevant resources of the component. You can override this default behavior by defining a componentPreload configuration. For projects of type library , no Component Preload is created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways to define the set of components for which preload bundles should be generated. You can either provide paths (allowing patterns) or namespaces . You can also combine both configuration options. Defining any of them overrides the default preload bundle generation for the root component of application projects. paths \u00b6 Example builder : componentPreload : paths : - \"my/awesome/app/**/Component.js\" The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ . namespaces \u00b6 Example builder : componentPreload : namespaces : - \"my/awesome/app\" - \"my/awesome/app/componentOne\" - \"my/awesome/app/componentTwo\" The namespaces option takes one or multiple component namespaces, which correspond to the directory structures. excludes \u00b6 Info This configuration is available since UI5 CLI v2.10.0 and applies only to projects defining Specification Version 2.3 or higher. Example Single Component Multiple Components builder : componentPreload : excludes : - \"my/awesome/app/localService/**\" builder : componentPreload : namespaces : - \"my/awesome/app\" - \"my/awesome/app/componentOne\" - \"my/awesome/app/componentTwo\" excludes : - \"my/awesome/app/**/thirdparty/\" - \"!my/awesome/app/componentTwo/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from the component preload bundles. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Re-includes must start with the namespace of the component they apply to. Library Preload Generation \u00b6 For projects of type library a library-preload.js bundle is generated by default. This bundle will contain most UI5 runtime-relevant resources of the library. excludes \u00b6 Info This configuration is available since UI5 CLI v2.10.0 and applies only to projects defining Specification Version 2.3 or higher. Example builder : libraryPreload : excludes : - \"my/lib/thirdparty/\" - \"!my/lib/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from library-preload.js bundle. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Re-includes must start with the library's namespace. Custom Tasks \u00b6 Example builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task. JSDoc \u00b6 Example builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes . Include Dependencies \u00b6 Info This configuration is available since UI5 CLI v2.12.0 and applies only to projects defining Specification Version 2.5 or higher. Example builder : settings : includeDependency : - shimmed.thirdparty.library includeDependencyRegExp : - ^com\\.namespace includeDependencyTree : - sap.m You can include certain dependencies into the build process using the includeDependency builder setting. By using includeDependencyRegExp , a regular expression can be used, for example to specify a namespace to dynamically select a group of dependencies that have to be included into the build result. By using includeDependencyTree , a selected dependency including all of its sub-dependencies is used. This configuration can be overwritten more precisely with the CLI parameters --include-dependency , --include-dependency-regexp , --include-dependency-tree , --exclude-dependency , --exclude-dependency-regexp and --exclude-dependency-tree . Minification \u00b6 For projects of type application and library the minification is done for all JavaScript files. This minification includes by default the standard build tasks uglify and createDebugFiles . excludes \u00b6 Info This configuration is available since UI5 CLI v2.14.0 and applies only to projects defining Specification Version 2.6 or higher. Example builder : minification : excludes : - \"my/lib/thirdparty/\" - \"!my/lib/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from resource minification. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Server Configuration \u00b6 Example server : settings : httpPort : 1337 httpsPort : 1443 By default, UI5 Tooling will serve applications using Port 8080 . When running in HTTP/2 or HTTPS mode, Port 8443 will be used. If the default port is already in use, the next highest free port will be used. A project can also configure alternative default ports. If the configured port is already in use, an error will be thrown. The default and configured server ports can always be overwritten with the CLI parameter --port . Extension Configuration \u00b6 Example specVersion : \"2.6\" type : application metadata : name : my.application --- specVersion : \"2.6\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"2.6\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed. Available Extensions \u00b6 Custom Tasks Custom Server Middleware Project Shims Custom Bundling \u00b6 Example builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described. Properties \u00b6 bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle. Defaults to: .js , .control.xml , .fragment.html , .fragment.json , .fragment.xml , .view.html , .view.json and .view.xml sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of modules declared as glob patterns (resource name patterns) that are in- or excluded. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Excludes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : By default set to false . If set to true , the module bundle gets minified decorateBootstrapModule : By default set to false . If set to true , bootable bundles will be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable bundles will be wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted Specification Versions \u00b6 A project must define a Specification Version by setting the specVersion property. UI5 Tooling uses this information to detect whether the currently installed version is compatible to a projects configuration. specVersion : \"2.6\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below. Compatibility Matrix \u00b6 Unless otherwise noted in the table below, UI5 Tooling modules are backward compatible. Version UI5 CLI Release 2.6 v2.14.0+ 2.5 v2.12.0+ 2.4 v2.11.0+ 2.3 v2.10.0+ 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+ Specification Version 2.6 \u00b6 Features: Adds support for excludes configuration for the application and library minification Specification Version 2.6 projects are supported by UI5 CLI v2.14.0 and above. Specification Version 2.5 \u00b6 Features: Adds support for the build configuration includeDependency Allows server configuration in projects of type module Specification Version 2.5 projects are supported by UI5 CLI v2.12.0 and above. Specification Version 2.4 \u00b6 Features: Adds support for bundleInfo mode in bundle definitions. Specification Version 2.4 projects are supported by UI5 CLI v2.11.0 and above. Specification Version 2.3 \u00b6 Features: Adds support for excludes configuration of component - and library preload bundles Specification Version 2.3 projects are supported by UI5 CLI v2.10.0 and above. Specification Version 2.2 \u00b6 Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above. Specification Version 2.1 \u00b6 Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above. Specification Version 2.0 \u00b6 Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above. Specification Version 1.1 \u00b6 Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above. Specification Version 1.0 \u00b6 First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above. Specification Version 0.1 \u00b6 Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"Configuration"},{"location":"pages/Configuration/#configuration","text":"A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Info This document describes the configuration of UI5 Tooling-based projects and extensions. It represents Specification Version 2.6 .","title":"Configuration"},{"location":"pages/Configuration/#validation-ide-support","text":"Starting with Specification Version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store Catalog which is used by the YAML Language Server . See the list of clients to find extensions for various IDEs and editors.","title":"Validation / IDE support"},{"location":"pages/Configuration/#example","text":"specVersion : \"2.6\" type : application|library|theme-library|module metadata : name : some.project.name","title":"Example"},{"location":"pages/Configuration/#general-configuration","text":"A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1) or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. Example application library theme-library module specVersion : \"2.6\" type : application specVersion : \"2.6\" type : library specVersion : \"2.6\" type : theme-library specVersion : \"2.6\" type : module","title":"General Configuration"},{"location":"pages/Configuration/#metadata","text":"Example metadata : name : my.company.project copyright : |- My Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the XYZ License, Version n - see LICENSE.txt.","title":"Metadata"},{"location":"pages/Configuration/#name","text":"A project must have a name and might define a copyright string. In UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like company.businessarea.project .","title":"name"},{"location":"pages/Configuration/#copyright","text":"A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a project's source code. |- is a way to define a multi line string in YAML. Check the YAML Specification for details. Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year.","title":"copyright"},{"location":"pages/Configuration/#deprecated","text":"In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, UI5 Tooling will then display a deprecation warning.","title":"deprecated"},{"location":"pages/Configuration/#resources","text":"","title":"Resources"},{"location":"pages/Configuration/#path-mapping","text":"Depending on the project type, UI5 Tooling expects your projects source files to be located in certain directories. If your project's sources are located in different directories, you need to configure the path mapping accordingly. Depending on the type of project, there are several different path mappings available. Note that all configured paths must be written in POSIX (i.e. using only forward slashes / ) and relative to the project's root directory.","title":"Path Mapping"},{"location":"pages/Configuration/#available-path-mappings","text":"Applications Libraries Modules webapp : Mapped to runtime path / (root) Default configuration: resources : configuration : paths : webapp : webapp src : Mapped to runtime path /resources test : Mapped to runtime path /test-resources Default configuration: resources : configuration : paths : src : src test : test Any virtual paths can be mapped to any physical path. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ). Example configuration: resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Example For an application project with the following directory structure, you need the path mapping configuration given below: Directory Structure my-app/ \\_ ui5.yaml \\_ lib/ \\_ js/ \\_ app/ Path Mapping Configuration resources : configuration : paths : webapp : lib/js/app","title":"Available Path Mappings"},{"location":"pages/Configuration/#encoding-of-properties-files","text":"Info This configuration is available since UI5 CLI v1.7.0 Example UTF-8 ISO-8859-1 resources : configuration : propertiesFileSourceEncoding : UTF-8 resources : configuration : propertiesFileSourceEncoding : ISO-8859-1 By default UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details.","title":"Encoding of *.properties files"},{"location":"pages/Configuration/#custom-configuration","text":"Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Example customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Custom configuration that is ignored by UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure.","title":"Custom Configuration"},{"location":"pages/Configuration/#framework-configuration","text":"Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies.","title":"Framework Configuration"},{"location":"pages/Configuration/#framework-and-version","text":"In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework and which version: OpenUI5 SAPUI5 framework : name : OpenUI5 version : 1.82.0 framework : name : SAPUI5 version : 1.82.0 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . You can find an overview of the available versions for each framework here: OpenUI5 Version Overview The lowest version supported by UI5 Tooling is 1.52.5 SAPUI5 Version Overview The lowest version supported by UI5 Tooling is 1.76.0 Info Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework.","title":"Framework and Version"},{"location":"pages/Configuration/#dependencies","text":"Example application library specVersion : \"2.6\" type : application metadata : name : my.company.app framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 specVersion : \"2.6\" type : library metadata : name : my.company.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true When building an application depending on this library as well as one of the theme libraries, only that theme is built for this library.","title":"Dependencies"},{"location":"pages/Configuration/#runtime-dependencies","text":"All libraries required by your project must be listed in the libraries section of the framework configuration: OpenUI5 SAPUI5 framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp","title":"Runtime Dependencies"},{"location":"pages/Configuration/#development-dependencies","text":"Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa.","title":"Development Dependencies"},{"location":"pages/Configuration/#optional-dependencies","text":"Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true","title":"Optional Dependencies"},{"location":"pages/Configuration/#build-configuration","text":"","title":"Build Configuration"},{"location":"pages/Configuration/#exclude-resources","text":"Example builder : resources : excludes : - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual path of resources (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes.","title":"Exclude Resources"},{"location":"pages/Configuration/#cachebuster","text":"Example time (default) hash builder : cachebuster : signatureType : time builder : cachebuster : signatureType : hash By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. Also see PR #241 for more details.","title":"Cachebuster"},{"location":"pages/Configuration/#component-preload-generation","text":"For projects of type application a Component-preload.js bundle is generated by default. This bundle will contain most UI5 runtime-relevant resources of the component. You can override this default behavior by defining a componentPreload configuration. For projects of type library , no Component Preload is created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways to define the set of components for which preload bundles should be generated. You can either provide paths (allowing patterns) or namespaces . You can also combine both configuration options. Defining any of them overrides the default preload bundle generation for the root component of application projects.","title":"Component Preload Generation"},{"location":"pages/Configuration/#paths","text":"Example builder : componentPreload : paths : - \"my/awesome/app/**/Component.js\" The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ .","title":"paths"},{"location":"pages/Configuration/#namespaces","text":"Example builder : componentPreload : namespaces : - \"my/awesome/app\" - \"my/awesome/app/componentOne\" - \"my/awesome/app/componentTwo\" The namespaces option takes one or multiple component namespaces, which correspond to the directory structures.","title":"namespaces"},{"location":"pages/Configuration/#excludes","text":"Info This configuration is available since UI5 CLI v2.10.0 and applies only to projects defining Specification Version 2.3 or higher. Example Single Component Multiple Components builder : componentPreload : excludes : - \"my/awesome/app/localService/**\" builder : componentPreload : namespaces : - \"my/awesome/app\" - \"my/awesome/app/componentOne\" - \"my/awesome/app/componentTwo\" excludes : - \"my/awesome/app/**/thirdparty/\" - \"!my/awesome/app/componentTwo/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from the component preload bundles. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Re-includes must start with the namespace of the component they apply to.","title":"excludes"},{"location":"pages/Configuration/#library-preload-generation","text":"For projects of type library a library-preload.js bundle is generated by default. This bundle will contain most UI5 runtime-relevant resources of the library.","title":"Library Preload Generation"},{"location":"pages/Configuration/#excludes_1","text":"Info This configuration is available since UI5 CLI v2.10.0 and applies only to projects defining Specification Version 2.3 or higher. Example builder : libraryPreload : excludes : - \"my/lib/thirdparty/\" - \"!my/lib/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from library-preload.js bundle. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Re-includes must start with the library's namespace.","title":"excludes"},{"location":"pages/Configuration/#custom-tasks","text":"Example builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task.","title":"Custom Tasks"},{"location":"pages/Configuration/#jsdoc","text":"Example builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes .","title":"JSDoc"},{"location":"pages/Configuration/#include-dependencies","text":"Info This configuration is available since UI5 CLI v2.12.0 and applies only to projects defining Specification Version 2.5 or higher. Example builder : settings : includeDependency : - shimmed.thirdparty.library includeDependencyRegExp : - ^com\\.namespace includeDependencyTree : - sap.m You can include certain dependencies into the build process using the includeDependency builder setting. By using includeDependencyRegExp , a regular expression can be used, for example to specify a namespace to dynamically select a group of dependencies that have to be included into the build result. By using includeDependencyTree , a selected dependency including all of its sub-dependencies is used. This configuration can be overwritten more precisely with the CLI parameters --include-dependency , --include-dependency-regexp , --include-dependency-tree , --exclude-dependency , --exclude-dependency-regexp and --exclude-dependency-tree .","title":"Include Dependencies"},{"location":"pages/Configuration/#minification","text":"For projects of type application and library the minification is done for all JavaScript files. This minification includes by default the standard build tasks uglify and createDebugFiles .","title":"Minification"},{"location":"pages/Configuration/#excludes_2","text":"Info This configuration is available since UI5 CLI v2.14.0 and applies only to projects defining Specification Version 2.6 or higher. Example builder : minification : excludes : - \"my/lib/thirdparty/\" - \"!my/lib/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from resource minification. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ .","title":"excludes"},{"location":"pages/Configuration/#server-configuration","text":"Example server : settings : httpPort : 1337 httpsPort : 1443 By default, UI5 Tooling will serve applications using Port 8080 . When running in HTTP/2 or HTTPS mode, Port 8443 will be used. If the default port is already in use, the next highest free port will be used. A project can also configure alternative default ports. If the configured port is already in use, an error will be thrown. The default and configured server ports can always be overwritten with the CLI parameter --port .","title":"Server Configuration"},{"location":"pages/Configuration/#extension-configuration","text":"Example specVersion : \"2.6\" type : application metadata : name : my.application --- specVersion : \"2.6\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"2.6\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed.","title":"Extension Configuration"},{"location":"pages/Configuration/#available-extensions","text":"Custom Tasks Custom Server Middleware Project Shims","title":"Available Extensions"},{"location":"pages/Configuration/#custom-bundling","text":"Example builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described.","title":"Custom Bundling"},{"location":"pages/Configuration/#properties","text":"bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle. Defaults to: .js , .control.xml , .fragment.html , .fragment.json , .fragment.xml , .view.html , .view.json and .view.xml sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of modules declared as glob patterns (resource name patterns) that are in- or excluded. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Excludes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : By default set to false . If set to true , the module bundle gets minified decorateBootstrapModule : By default set to false . If set to true , bootable bundles will be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable bundles will be wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted","title":"Properties"},{"location":"pages/Configuration/#specification-versions","text":"A project must define a Specification Version by setting the specVersion property. UI5 Tooling uses this information to detect whether the currently installed version is compatible to a projects configuration. specVersion : \"2.6\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below.","title":"Specification Versions"},{"location":"pages/Configuration/#compatibility-matrix","text":"Unless otherwise noted in the table below, UI5 Tooling modules are backward compatible. Version UI5 CLI Release 2.6 v2.14.0+ 2.5 v2.12.0+ 2.4 v2.11.0+ 2.3 v2.10.0+ 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+","title":"Compatibility Matrix"},{"location":"pages/Configuration/#specification-version-26","text":"Features: Adds support for excludes configuration for the application and library minification Specification Version 2.6 projects are supported by UI5 CLI v2.14.0 and above.","title":"Specification Version 2.6"},{"location":"pages/Configuration/#specification-version-25","text":"Features: Adds support for the build configuration includeDependency Allows server configuration in projects of type module Specification Version 2.5 projects are supported by UI5 CLI v2.12.0 and above.","title":"Specification Version 2.5"},{"location":"pages/Configuration/#specification-version-24","text":"Features: Adds support for bundleInfo mode in bundle definitions. Specification Version 2.4 projects are supported by UI5 CLI v2.11.0 and above.","title":"Specification Version 2.4"},{"location":"pages/Configuration/#specification-version-23","text":"Features: Adds support for excludes configuration of component - and library preload bundles Specification Version 2.3 projects are supported by UI5 CLI v2.10.0 and above.","title":"Specification Version 2.3"},{"location":"pages/Configuration/#specification-version-22","text":"Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above.","title":"Specification Version 2.2"},{"location":"pages/Configuration/#specification-version-21","text":"Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above.","title":"Specification Version 2.1"},{"location":"pages/Configuration/#specification-version-20","text":"Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above.","title":"Specification Version 2.0"},{"location":"pages/Configuration/#specification-version-11","text":"Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above.","title":"Specification Version 1.1"},{"location":"pages/Configuration/#specification-version-10","text":"First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above.","title":"Specification Version 1.0"},{"location":"pages/Configuration/#specification-version-01","text":"Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"Specification Version 0.1"},{"location":"pages/FAQ/","text":"FAQ \u00b6 How Can I Contribute? \u00b6 Please check our Contribution Guidelines . How Can I Obtain Support? \u00b6 Please follow our Contribution Guidelines on how to report an issue. What's the Difference Between OpenUI5 and SAPUI5? \u00b6 The open source project OpenUI5 provides most of the fundamental framework features. SAPUI5 enhances this by providing additional libraries under a different license . OpenUI5 is provided under the Apache 2.0 license. The SAPUI5 packages that are consumed in UI5 Tooling are provided under the terms of the SAP Developer License Agreement . Note that projects which use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. However, SAPUI5 projects can depend on OpenUI5 projects. Please also see the UI5 SDK documentation \"SAPUI5 vs. OpenUI5\" . Why package.json? / Why npm? \u00b6 Currently, the tooling can only resolve dependencies defined in a package.json file. This might change in the future by adding Translators for additional dependency management systems. To manage your dependencies, you can use almost any Node.js package manager that relies on package.json files. Popular ones are npm , Yarn and pnpm . The UI5 Tooling resolves dependencies almost the same way Node.js does when executing a require statement. What's the Thing With Yarn? \u00b6 In a couple of guides we refer to the Yarn node package manager. This is because it offers functionality that the otherwise preferred npm package manager is lacking in Version 6 and below. In particular, this applies to the workspace setting, which is currently used in the OpenUI5 (mono-)repository . Note that npm recently added this feature to its v7 release . If you do not plan to work with OpenUI5, you may as well use npm or any other node package manger (see FAQ: Why package.json? / Why npm? ). Keep in mind that linking the same module with npm and Yarn may cause issues. Also, Yarn can't work with links created by npm and vice versa. Where are the npm Packages? \u00b6 OpenUI5 Libraries SAPUI5 Libraries UI5 Tooling Modules","title":"FAQ"},{"location":"pages/FAQ/#faq","text":"","title":"FAQ"},{"location":"pages/FAQ/#how-can-i-contribute","text":"Please check our Contribution Guidelines .","title":"How Can I Contribute?"},{"location":"pages/FAQ/#how-can-i-obtain-support","text":"Please follow our Contribution Guidelines on how to report an issue.","title":"How Can I Obtain Support?"},{"location":"pages/FAQ/#whats-the-difference-between-openui5-and-sapui5","text":"The open source project OpenUI5 provides most of the fundamental framework features. SAPUI5 enhances this by providing additional libraries under a different license . OpenUI5 is provided under the Apache 2.0 license. The SAPUI5 packages that are consumed in UI5 Tooling are provided under the terms of the SAP Developer License Agreement . Note that projects which use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. However, SAPUI5 projects can depend on OpenUI5 projects. Please also see the UI5 SDK documentation \"SAPUI5 vs. OpenUI5\" .","title":"What's the Difference Between OpenUI5 and SAPUI5?"},{"location":"pages/FAQ/#why-packagejson-why-npm","text":"Currently, the tooling can only resolve dependencies defined in a package.json file. This might change in the future by adding Translators for additional dependency management systems. To manage your dependencies, you can use almost any Node.js package manager that relies on package.json files. Popular ones are npm , Yarn and pnpm . The UI5 Tooling resolves dependencies almost the same way Node.js does when executing a require statement.","title":"Why package.json? / Why npm?"},{"location":"pages/FAQ/#whats-the-thing-with-yarn","text":"In a couple of guides we refer to the Yarn node package manager. This is because it offers functionality that the otherwise preferred npm package manager is lacking in Version 6 and below. In particular, this applies to the workspace setting, which is currently used in the OpenUI5 (mono-)repository . Note that npm recently added this feature to its v7 release . If you do not plan to work with OpenUI5, you may as well use npm or any other node package manger (see FAQ: Why package.json? / Why npm? ). Keep in mind that linking the same module with npm and Yarn may cause issues. Also, Yarn can't work with links created by npm and vice versa.","title":"What's the Thing With Yarn?"},{"location":"pages/FAQ/#where-are-the-npm-packages","text":"OpenUI5 Libraries SAPUI5 Libraries UI5 Tooling Modules","title":"Where are the npm Packages?"},{"location":"pages/GettingStarted/","text":"Getting Started \u00b6 Installing the UI5 CLI \u00b6 Requirements \u00b6 Node.js Version 10 or later Installation \u00b6 # Global installation to have the command available npm install --global @ui5/cli # Additional local install in your project npm install --save-dev @ui5/cli # Verify installation ui5 --help The globally installed UI5 CLI will always try to invoke a locally installed version of the UI5 CLI (if present). This way you can use different versions of the UI5 Tooling across your projects. Please see the UI5 CLI documentation for details. \u26a1\ufe0f Quick Start: OpenUI5 Sample App \u00b6 Check out the OpenUI5 Sample App featuring a full blown How-to to play around with UI5 Tooling! Starting a New Project \u00b6 The easiest way to start a new UI5 project is to use a template generator like generator-easy-ui5 . Choose a template that is designed for the type of project you want to create and the target environment where you want to deploy it to. Make sure that the template already uses UI5 Tooling. A good indicator for that is the presence of a ui5.yaml file in the generated project. When working with SAP Business Application Studio, there are several templates available to you. Check out the tutorial on creating a basic SAPUI5 application and deploying it to Cloud Foundry from within SAP Business Application Studio: Create an SAP Fiori App Using SAP Business Application Studio You can find many guides on UI5 development with SAP Business Application Studio in the Tutorial Navigator . Enabling an Existing Project \u00b6 You can easily check whether or not a project (application or library) can already be used with the UI5 Tooling by looking for a ui5.yaml file in the project's root directory. This file (with some exceptions) is required for all projects and their dependencies (e.g. reuse libraries) to use them in the UI5 Tooling. Setup \u00b6 If your project is not set up for use with the UI5 Tooling yet, follow these steps: If your project does not have a package.json file, let npm generate it: npm init --yes Generate the ui5.yaml file: ui5 init Define the framework you want to use OpenUI5 SAPUI5 ui5 use openui5@latest ui5 use sapui5@latest You can choose between the OpenUI5 and the SAPUI5 framework. Don't know which one to choose? Check out our documentation on the differences between OpenUI5 and SAPUI5 . Add required libraries ui5 add sap.ui.core sap.m sap.ui.table themelib_sap_fiori_3 # [...] You can find a documentation of all libraries, including samples and more, in the Demo Kit: OpenUI5 Demo Kit SAPUI5 Demo Kit Start the server and work on your project! \ud83c\udf89 ui5 serve Tip Use ui5 serve to start a local development server and ui5 build --all to produce an optimized, static version of your project, which you can then deploy to your production environment. Find more information here: Server Builder CLI If you are using Git or similar version control, commit package.json and ui5.yaml to your repository. git add package.json ui5.yaml git commit -m \"Enable use with UI5 Tooling\" Hooray! You can now use UI5 Tooling in your project!","title":"Getting Started"},{"location":"pages/GettingStarted/#getting-started","text":"","title":"Getting Started"},{"location":"pages/GettingStarted/#installing-the-ui5-cli","text":"","title":"Installing the UI5 CLI"},{"location":"pages/GettingStarted/#requirements","text":"Node.js Version 10 or later","title":"Requirements"},{"location":"pages/GettingStarted/#installation","text":"# Global installation to have the command available npm install --global @ui5/cli # Additional local install in your project npm install --save-dev @ui5/cli # Verify installation ui5 --help The globally installed UI5 CLI will always try to invoke a locally installed version of the UI5 CLI (if present). This way you can use different versions of the UI5 Tooling across your projects. Please see the UI5 CLI documentation for details.","title":"Installation"},{"location":"pages/GettingStarted/#quick-start-openui5-sample-app","text":"Check out the OpenUI5 Sample App featuring a full blown How-to to play around with UI5 Tooling!","title":"\u26a1\ufe0f Quick Start: OpenUI5 Sample App"},{"location":"pages/GettingStarted/#starting-a-new-project","text":"The easiest way to start a new UI5 project is to use a template generator like generator-easy-ui5 . Choose a template that is designed for the type of project you want to create and the target environment where you want to deploy it to. Make sure that the template already uses UI5 Tooling. A good indicator for that is the presence of a ui5.yaml file in the generated project. When working with SAP Business Application Studio, there are several templates available to you. Check out the tutorial on creating a basic SAPUI5 application and deploying it to Cloud Foundry from within SAP Business Application Studio: Create an SAP Fiori App Using SAP Business Application Studio You can find many guides on UI5 development with SAP Business Application Studio in the Tutorial Navigator .","title":"Starting a New Project"},{"location":"pages/GettingStarted/#enabling-an-existing-project","text":"You can easily check whether or not a project (application or library) can already be used with the UI5 Tooling by looking for a ui5.yaml file in the project's root directory. This file (with some exceptions) is required for all projects and their dependencies (e.g. reuse libraries) to use them in the UI5 Tooling.","title":"Enabling an Existing Project"},{"location":"pages/GettingStarted/#setup","text":"If your project is not set up for use with the UI5 Tooling yet, follow these steps: If your project does not have a package.json file, let npm generate it: npm init --yes Generate the ui5.yaml file: ui5 init Define the framework you want to use OpenUI5 SAPUI5 ui5 use openui5@latest ui5 use sapui5@latest You can choose between the OpenUI5 and the SAPUI5 framework. Don't know which one to choose? Check out our documentation on the differences between OpenUI5 and SAPUI5 . Add required libraries ui5 add sap.ui.core sap.m sap.ui.table themelib_sap_fiori_3 # [...] You can find a documentation of all libraries, including samples and more, in the Demo Kit: OpenUI5 Demo Kit SAPUI5 Demo Kit Start the server and work on your project! \ud83c\udf89 ui5 serve Tip Use ui5 serve to start a local development server and ui5 build --all to produce an optimized, static version of your project, which you can then deploy to your production environment. Find more information here: Server Builder CLI If you are using Git or similar version control, commit package.json and ui5.yaml to your repository. git add package.json ui5.yaml git commit -m \"Enable use with UI5 Tooling\" Hooray! You can now use UI5 Tooling in your project!","title":"Setup"},{"location":"pages/OpenUI5/","text":"Consuming OpenUI5 Libraries \u00b6 OpenUI5 consumption with UI5 Tooling is very similar to SAPUI5 consumption. Please refer to the documentation on Consuming SAPUI5 Libraries for a general description of how UI5 Tooling can fetch and provide framework dependencies to your project. Note that projects using the SAPUI5 framework can depend on projects using the OpenUI5 framework. However, OpenUI5 projects can't depend on SAPUI5 projects. Please also refer to our documentation on the differences between OpenUI5 and SAPUI5 . Info The minimum OpenUI5 version that can be consumed by UI5 Tooling is 1.52.5 Configuration \u00b6 Your project's ui5.yaml provides a configuration section dedicated to framework dependency handling. This configuration can be maintained by editing the file, or by using the UI5 CLI: Example Using the UI5 CLI : ui5 use openui5@latest ui5 add sap.ui.core sap.m sap.ui.table themelib_sap_fiori_3 Example ui5.yaml of an application specVersion : \"2.6\" type : application metadata : name : some.project.name framework : name : OpenUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 Example ui5.yaml of a library specVersion : \"2.6\" type : library metadata : name : some.library framework : name : OpenUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Please make sure that your project defines Specification Version 2.0 or higher. For details, please see the corresponding framework configuration documentation . Linking Framework Dependencies \u00b6 When working on UI5 applications or libraries that use OpenUI5, you can link a local OpenUI5 repository into that project. This allows you to make changes to the project itself as well as to the OpenUI5 libraries simultaneously and test them immediately. A detailed step-by-step guide on how to achieve such a setup with the OpenUI5 Sample App can be found here . OpenUI5 Framework Development \u00b6 Please refer to the OpenUI5 Framework Development Documentation .","title":"OpenUI5"},{"location":"pages/OpenUI5/#consuming-openui5-libraries","text":"OpenUI5 consumption with UI5 Tooling is very similar to SAPUI5 consumption. Please refer to the documentation on Consuming SAPUI5 Libraries for a general description of how UI5 Tooling can fetch and provide framework dependencies to your project. Note that projects using the SAPUI5 framework can depend on projects using the OpenUI5 framework. However, OpenUI5 projects can't depend on SAPUI5 projects. Please also refer to our documentation on the differences between OpenUI5 and SAPUI5 . Info The minimum OpenUI5 version that can be consumed by UI5 Tooling is 1.52.5","title":"Consuming OpenUI5 Libraries"},{"location":"pages/OpenUI5/#configuration","text":"Your project's ui5.yaml provides a configuration section dedicated to framework dependency handling. This configuration can be maintained by editing the file, or by using the UI5 CLI: Example Using the UI5 CLI : ui5 use openui5@latest ui5 add sap.ui.core sap.m sap.ui.table themelib_sap_fiori_3 Example ui5.yaml of an application specVersion : \"2.6\" type : application metadata : name : some.project.name framework : name : OpenUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 Example ui5.yaml of a library specVersion : \"2.6\" type : library metadata : name : some.library framework : name : OpenUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Please make sure that your project defines Specification Version 2.0 or higher. For details, please see the corresponding framework configuration documentation .","title":"Configuration"},{"location":"pages/OpenUI5/#linking-framework-dependencies","text":"When working on UI5 applications or libraries that use OpenUI5, you can link a local OpenUI5 repository into that project. This allows you to make changes to the project itself as well as to the OpenUI5 libraries simultaneously and test them immediately. A detailed step-by-step guide on how to achieve such a setup with the OpenUI5 Sample App can be found here .","title":"Linking Framework Dependencies"},{"location":"pages/OpenUI5/#openui5-framework-development","text":"Please refer to the OpenUI5 Framework Development Documentation .","title":"OpenUI5 Framework Development"},{"location":"pages/Overview/","text":"Development Overview \u00b6 When developing a UI5 project on your local system, you should use the UI5 Server ( ui5 serve ) and not the UI5 Builder ( ui5 build ). Building a project should only be required when deploying it. However, you might have good reasons to also use the UI5 Builder during development. In such cases, feel free to let us know! Maybe your use case could be covered by a future enhancement of the UI5 Server. Project Dependencies \u00b6 UI5 Tooling differentiates between \"framework dependencies\" and \"project dependencies\". Framework dependencies are generally libraries and themes provided by the SAP frameworks \"OpenUI5\" and \"SAPUI5\". UI5 Tooling will take care of downloading them and handling their versions for you. Please see the corresponding documentation on both options: Working with OpenUI5 Framework Dependencies Working with SAPUI5 Framework Dependencies Project dependencies are all other libraries, custom themes, UI5 Tooling extensions or JavaScript modules your project depends on. In general these dependencies are maintained in the package.json of your project. See also: FAQ: Why package.json? / Why npm? . Linking Projects \u00b6 Would you like to work on an application project and one or more of its dependencies at the same time? We got you covered! By leaving dependency management up to the tool of your choice (see FAQ: Why package.json? / Why npm? ) you have a variety of options. Here is an example with npm , an application, and a reuse library: Example: Your Directory Structure my-app/ \\_ node_modules/ \\_ webapp/ \\_ ui5.yaml \\_ package.json my-reuse-library/ \\_ node_modules/ \\_ src/ \\_ test/ \\_ ui5.yaml \\_ package.json In its package.json , my-app should already define a dependency to my-reuse-library . So, after running the npm install command, a copy of the \"my-reuse-library\"-package should be retrieved from the package registry and added to my-app's node_modules/ directory. Now all you need to do is replacing this copy of the my-reuse-library package with a link to the my-reuse-library project located somewhere on your computer. In this example it is right next to my-app , but that doesn't really matter. First, in the directory of the my-reuse-library project, create a global link: npm link Then, in the my-app directory, use that link to replace the registry package: npm link my-reuse-library Note: \"my-reuse-library\" is the name defined in the package.json and not necessarily the directory or ui5.yaml name That's it. You can check whether the linking worked by executing ui5 tree in the my-app directory and looking for the path attributes in its output: \u251c\u2500 id: my-app \u251c\u2500 version: 1.0.0 \u251c\u2500 path: /my-app \u2514\u2500 dependencies \u251c\u2500 0 \u2502 \u251c\u2500 id: my-reuse-library \u2502 \u251c\u2500 version: 1.0.0 \u2502 \u251c\u2500 path: /my-reuse-library \u2502 \u2514\u2500 dependencies [...] HTTP/2 Development Webserver \u00b6 The UI5 Tooling contains a web server to serve the project via HTTP/2 protocol. ui5 serve --h2 This requires an SSL certificate. You are guided through the automatic generation process. Also see the UI5 Server documentation Integration in Other Tools \u00b6 One of the key features of the UI5 Tooling is its modularization. Single parts of the tooling can easily be integrated in other Node.js -based tools and frameworks like Grunt or Gulp . All JavaScript APIs available for direct consumption are listed here . However, for standard UI5 development, the UI5 CLI should always be the first choice.","title":"Overview"},{"location":"pages/Overview/#development-overview","text":"When developing a UI5 project on your local system, you should use the UI5 Server ( ui5 serve ) and not the UI5 Builder ( ui5 build ). Building a project should only be required when deploying it. However, you might have good reasons to also use the UI5 Builder during development. In such cases, feel free to let us know! Maybe your use case could be covered by a future enhancement of the UI5 Server.","title":"Development Overview"},{"location":"pages/Overview/#project-dependencies","text":"UI5 Tooling differentiates between \"framework dependencies\" and \"project dependencies\". Framework dependencies are generally libraries and themes provided by the SAP frameworks \"OpenUI5\" and \"SAPUI5\". UI5 Tooling will take care of downloading them and handling their versions for you. Please see the corresponding documentation on both options: Working with OpenUI5 Framework Dependencies Working with SAPUI5 Framework Dependencies Project dependencies are all other libraries, custom themes, UI5 Tooling extensions or JavaScript modules your project depends on. In general these dependencies are maintained in the package.json of your project. See also: FAQ: Why package.json? / Why npm? .","title":"Project Dependencies"},{"location":"pages/Overview/#linking-projects","text":"Would you like to work on an application project and one or more of its dependencies at the same time? We got you covered! By leaving dependency management up to the tool of your choice (see FAQ: Why package.json? / Why npm? ) you have a variety of options. Here is an example with npm , an application, and a reuse library: Example: Your Directory Structure my-app/ \\_ node_modules/ \\_ webapp/ \\_ ui5.yaml \\_ package.json my-reuse-library/ \\_ node_modules/ \\_ src/ \\_ test/ \\_ ui5.yaml \\_ package.json In its package.json , my-app should already define a dependency to my-reuse-library . So, after running the npm install command, a copy of the \"my-reuse-library\"-package should be retrieved from the package registry and added to my-app's node_modules/ directory. Now all you need to do is replacing this copy of the my-reuse-library package with a link to the my-reuse-library project located somewhere on your computer. In this example it is right next to my-app , but that doesn't really matter. First, in the directory of the my-reuse-library project, create a global link: npm link Then, in the my-app directory, use that link to replace the registry package: npm link my-reuse-library Note: \"my-reuse-library\" is the name defined in the package.json and not necessarily the directory or ui5.yaml name That's it. You can check whether the linking worked by executing ui5 tree in the my-app directory and looking for the path attributes in its output: \u251c\u2500 id: my-app \u251c\u2500 version: 1.0.0 \u251c\u2500 path: /my-app \u2514\u2500 dependencies \u251c\u2500 0 \u2502 \u251c\u2500 id: my-reuse-library \u2502 \u251c\u2500 version: 1.0.0 \u2502 \u251c\u2500 path: /my-reuse-library \u2502 \u2514\u2500 dependencies [...]","title":"Linking Projects"},{"location":"pages/Overview/#http2-development-webserver","text":"The UI5 Tooling contains a web server to serve the project via HTTP/2 protocol. ui5 serve --h2 This requires an SSL certificate. You are guided through the automatic generation process. Also see the UI5 Server documentation","title":"HTTP/2 Development Webserver"},{"location":"pages/Overview/#integration-in-other-tools","text":"One of the key features of the UI5 Tooling is its modularization. Single parts of the tooling can easily be integrated in other Node.js -based tools and frameworks like Grunt or Gulp . All JavaScript APIs available for direct consumption are listed here . However, for standard UI5 development, the UI5 CLI should always be the first choice.","title":"Integration in Other Tools"},{"location":"pages/Privacy/","text":"Privacy \u00b6 This site is hosted by GitHub Pages . Please see the GitHub Privacy Statement for any information how GitHub processes your personal data.","title":"Privacy"},{"location":"pages/Privacy/#privacy","text":"This site is hosted by GitHub Pages . Please see the GitHub Privacy Statement for any information how GitHub processes your personal data.","title":"Privacy"},{"location":"pages/Project/","text":"UI5 Project \u00b6 The UI5 Project module provides functionality to build a UI5 project's dependency tree, including the validated project configurations. It is also responsible for installing and managing framework dependencies. Also see Development Overview: Project Dependencies . API Reference Normalizer \u00b6 The purpose of the normalizer is to collect dependency information and to enrich it with project configuration (both done in generateProjectTree ). Translators are used to collect dependency information. The Project Preprocessor enriches this dependency information with project configuration, typically from a ui5.yaml file. A development server and build process can use this information to locate project and dependency resources. If you want to retrieve the project dependency graph without any configuration, you may use use the generateDependencyTree API. Translators \u00b6 Translators collect recursively all dependencies on a package manager specific layer and return information about them in a well-defined tree structure. Tree structure as returned by a Translator: { \"id\" : \"projectA\" , \"version\" : \"1.0.0\" , \"path\" : \"/absolute/path/to/projectA\" , \"dependencies\" : [ { \"id\" : \"projectB\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectB\" , \"dependencies\" : [ { \"id\" : \"projectD\" , \"path\" : \"/path/to/different/projectD\" } ] }, { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectD\" }, { \"id\" : \"myStaticServerTool\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/some/dependency\" } ] } This dependency tree can be used as input for the Project Preprocessor : npm Translator \u00b6 The npm translator is currently the default translator and looks for dependencies defined in the package.json file of a certain project. dependencies , devDepedencies , and napa dependencies (Git repositories which don't have a package.json file) are located via the Node.js module resolution logic. Static Translator \u00b6 This translator is currently intended for testing purposes only. Can be used to supply the full dependency information of a project in a single structured file. Example: projectDependencies.yaml --- id : testsuite version : \"\" path : \"./\" dependencies : - id : sap.f version : \"\" path : \"../sap.f\" - id : sap.m version : \"\" path : \"../sap.m\" This can be used via ui5 serve --translator static:/path/to/projectDependencies.yaml Project Preprocessor \u00b6 Enhances a given dependency tree based on a projects configuration . Enhanced dependency tree structure as returned by the Project Preprocessor: { \"id\" : \"projectA\" , \"version\" : \"1.0.0\" , \"path\" : \"/absolute/path/to/projectA\" , \"specVersion\" : \"2.6\" , \"type\" : \"application\" , \"metadata\" : { \"name\" : \"sap.projectA\" , \"copyright\" : \"Some copyright ${currentYear}\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"webapp\" : \"app\" } }, \"pathMappings\" : { \"/\" : \"app\" } }, \"dependencies\" : [ { \"id\" : \"projectB\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectB\" , \"specVersion\" : \"2.6\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectB\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src\" , \"test\" : \"test\" } }, \"pathMappings\" : { \"/resources/\" : \"src\" , \"/test-resources/\" : \"test\" } }, \"dependencies\" : [ { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/different/projectD\" , \"specVersion\" : \"2.6\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectD\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src/main/uilib\" , \"test\" : \"src/test\" } }, \"pathMappings\" : { \"/resources/\" : \"src/main/uilib\" , \"/test-resources/\" : \"src/test\" } }, \"dependencies\" : [] } ] }, { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectD\" , \"specVersion\" : \"2.6\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectD\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src/main/uilib\" , \"test\" : \"src/test\" } }, \"pathMappings\" : { \"/resources/\" : \"src/main/uilib\" , \"/test-resources/\" : \"src/test\" } }, \"dependencies\" : [] } ] }","title":"Project"},{"location":"pages/Project/#ui5-project","text":"The UI5 Project module provides functionality to build a UI5 project's dependency tree, including the validated project configurations. It is also responsible for installing and managing framework dependencies. Also see Development Overview: Project Dependencies . API Reference","title":"UI5 Project"},{"location":"pages/Project/#normalizer","text":"The purpose of the normalizer is to collect dependency information and to enrich it with project configuration (both done in generateProjectTree ). Translators are used to collect dependency information. The Project Preprocessor enriches this dependency information with project configuration, typically from a ui5.yaml file. A development server and build process can use this information to locate project and dependency resources. If you want to retrieve the project dependency graph without any configuration, you may use use the generateDependencyTree API.","title":"Normalizer"},{"location":"pages/Project/#translators","text":"Translators collect recursively all dependencies on a package manager specific layer and return information about them in a well-defined tree structure. Tree structure as returned by a Translator: { \"id\" : \"projectA\" , \"version\" : \"1.0.0\" , \"path\" : \"/absolute/path/to/projectA\" , \"dependencies\" : [ { \"id\" : \"projectB\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectB\" , \"dependencies\" : [ { \"id\" : \"projectD\" , \"path\" : \"/path/to/different/projectD\" } ] }, { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectD\" }, { \"id\" : \"myStaticServerTool\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/some/dependency\" } ] } This dependency tree can be used as input for the Project Preprocessor :","title":"Translators"},{"location":"pages/Project/#npm-translator","text":"The npm translator is currently the default translator and looks for dependencies defined in the package.json file of a certain project. dependencies , devDepedencies , and napa dependencies (Git repositories which don't have a package.json file) are located via the Node.js module resolution logic.","title":"npm Translator"},{"location":"pages/Project/#static-translator","text":"This translator is currently intended for testing purposes only. Can be used to supply the full dependency information of a project in a single structured file. Example: projectDependencies.yaml --- id : testsuite version : \"\" path : \"./\" dependencies : - id : sap.f version : \"\" path : \"../sap.f\" - id : sap.m version : \"\" path : \"../sap.m\" This can be used via ui5 serve --translator static:/path/to/projectDependencies.yaml","title":"Static Translator"},{"location":"pages/Project/#project-preprocessor","text":"Enhances a given dependency tree based on a projects configuration . Enhanced dependency tree structure as returned by the Project Preprocessor: { \"id\" : \"projectA\" , \"version\" : \"1.0.0\" , \"path\" : \"/absolute/path/to/projectA\" , \"specVersion\" : \"2.6\" , \"type\" : \"application\" , \"metadata\" : { \"name\" : \"sap.projectA\" , \"copyright\" : \"Some copyright ${currentYear}\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"webapp\" : \"app\" } }, \"pathMappings\" : { \"/\" : \"app\" } }, \"dependencies\" : [ { \"id\" : \"projectB\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectB\" , \"specVersion\" : \"2.6\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectB\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src\" , \"test\" : \"test\" } }, \"pathMappings\" : { \"/resources/\" : \"src\" , \"/test-resources/\" : \"test\" } }, \"dependencies\" : [ { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/different/projectD\" , \"specVersion\" : \"2.6\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectD\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src/main/uilib\" , \"test\" : \"src/test\" } }, \"pathMappings\" : { \"/resources/\" : \"src/main/uilib\" , \"/test-resources/\" : \"src/test\" } }, \"dependencies\" : [] } ] }, { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectD\" , \"specVersion\" : \"2.6\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectD\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src/main/uilib\" , \"test\" : \"src/test\" } }, \"pathMappings\" : { \"/resources/\" : \"src/main/uilib\" , \"/test-resources/\" : \"src/test\" } }, \"dependencies\" : [] } ] }","title":"Project Preprocessor"},{"location":"pages/SAPUI5/","text":"Consuming SAPUI5 Libraries \u00b6 Info Make sure you have installed the UI5 CLI in Version 2.0 or later: npm install --global @ui5/cli The minimum version of SAPUI5 that can be consumed by UI5 Tooling as described below is 1.76.0. For lower versions, consider using the CDN bootstrap or a custom middleware like ui5-middleware-simpleproxy . Overview \u00b6 SAPUI5 libraries are hosted on the public npm registry at registry.npmjs.org . However, you should not install them using node package managers like npm or Yarn. Instead, please let the UI5 Tooling handle them by following this guide. Note For more background information also see the Blog Post \"UI5ers Buzz #49: The UI5 Tooling and SAPUI5 \u2013 The Next Step\" Usage \u00b6 Since Version 2.0 of the UI5 CLI, it will automatically download all required framework dependencies of a project that have been listed in the corresponding ui5.yaml file. They will be cached in a .ui5 directory located in the user's home directory. This happens transparently whenever you execute the ui5 serve or ui5 build commands. All non-framework dependencies, such as reuse libraries or UI5 Tooling extensions, still need to be maintained as npm dependencies in the projects package.json . At the same time, framework dependencies listed in the ui5.yaml should not be listed in the package.json as they will be ignored by the UI5 Tooling. Configuration \u00b6 Your project's ui5.yaml provides a configuration section dedicated to framework dependency handling. This configuration can be maintained by editing the file, or by using the UI5 CLI: Example Using the UI5 CLI : ui5 use sapui5@latest ui5 add sap.ui.core sap.m sap.ui.comp themelib_sap_fiori_3 ui5 add -D sap.ushell Example ui5.yaml of an application specVersion : \"2.6\" type : application metadata : name : some.project.name framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp - name : sap.ushell development : true - name : themelib_sap_fiori_3 Example ui5.yaml of a library specVersion : \"2.6\" type : library metadata : name : some.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Please make sure that your project defines Specification Version 2.0 or higher. For details please refer to the framework configuration documentation . Differences Between OpenUI5 and SAPUI5 \u00b6 Please refer to our documentation on the differences between OpenUI5 and SAPUI5","title":"SAPUI5"},{"location":"pages/SAPUI5/#consuming-sapui5-libraries","text":"Info Make sure you have installed the UI5 CLI in Version 2.0 or later: npm install --global @ui5/cli The minimum version of SAPUI5 that can be consumed by UI5 Tooling as described below is 1.76.0. For lower versions, consider using the CDN bootstrap or a custom middleware like ui5-middleware-simpleproxy .","title":"Consuming SAPUI5 Libraries"},{"location":"pages/SAPUI5/#overview","text":"SAPUI5 libraries are hosted on the public npm registry at registry.npmjs.org . However, you should not install them using node package managers like npm or Yarn. Instead, please let the UI5 Tooling handle them by following this guide. Note For more background information also see the Blog Post \"UI5ers Buzz #49: The UI5 Tooling and SAPUI5 \u2013 The Next Step\"","title":"Overview"},{"location":"pages/SAPUI5/#usage","text":"Since Version 2.0 of the UI5 CLI, it will automatically download all required framework dependencies of a project that have been listed in the corresponding ui5.yaml file. They will be cached in a .ui5 directory located in the user's home directory. This happens transparently whenever you execute the ui5 serve or ui5 build commands. All non-framework dependencies, such as reuse libraries or UI5 Tooling extensions, still need to be maintained as npm dependencies in the projects package.json . At the same time, framework dependencies listed in the ui5.yaml should not be listed in the package.json as they will be ignored by the UI5 Tooling.","title":"Usage"},{"location":"pages/SAPUI5/#configuration","text":"Your project's ui5.yaml provides a configuration section dedicated to framework dependency handling. This configuration can be maintained by editing the file, or by using the UI5 CLI: Example Using the UI5 CLI : ui5 use sapui5@latest ui5 add sap.ui.core sap.m sap.ui.comp themelib_sap_fiori_3 ui5 add -D sap.ushell Example ui5.yaml of an application specVersion : \"2.6\" type : application metadata : name : some.project.name framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp - name : sap.ushell development : true - name : themelib_sap_fiori_3 Example ui5.yaml of a library specVersion : \"2.6\" type : library metadata : name : some.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Please make sure that your project defines Specification Version 2.0 or higher. For details please refer to the framework configuration documentation .","title":"Configuration"},{"location":"pages/SAPUI5/#differences-between-openui5-and-sapui5","text":"Please refer to our documentation on the differences between OpenUI5 and SAPUI5","title":"Differences Between OpenUI5 and SAPUI5"},{"location":"pages/Server/","text":"UI5 Server \u00b6 The UI5 Server module provides server capabilities for local development of UI5 projects. API Reference Standard Middleware \u00b6 All available standard middleware are listed below in the order of their execution. A project can also add custom middleware to the server by using the Custom Server Middleware Extensibility . Middleware Description csp See chapter csp compression Standard Express compression middleware cors Standard Express cors middleware discovery See chapter discovery serveResources See chapter serveResources testRunner See chapter testRunner serveThemes See chapter serveThemes versionInfo See chapter versionInfo connectUi5Proxy See chapter connectUi5Proxy nonReadRequests See chapter nonReadRequests serveIndex See chapter serveIndex csp \u00b6 The Content Security Policy ( CSP ) middleware is active by default. The header content-security-policy can be set by adding URL parameter sap-ui-xx-csp-policy to the request with the policy name as value. To set the policy to report-only, append :report-only or :ro to the policy name. E.g. /index.html?sap-ui-xx-csp-policy=sap-target-level-1:report-only The SAPtargetCSP parameter \u00b6 The default CSP policies can be modified using parameter sendSAPTargetCSP ( --sap-csp-policies when using the CLI). With sendSAPTargetCSP set to true the policies sap-target-level-1 and sap-target-level-2 policies are activated and send as report-only. Serve CSP Reports \u00b6 Info This option is available since UI5 CLI v2.3.0 Serving of CSP reports can be activated with parameter serveCSPReports ( --serve-csp-reports when using the CLI). With serveCSPReports set to true , the CSP reports are collected and can be downloaded from the server path /.ui5/csp/csp-reports.json . discovery \u00b6 This middleware lists project files with URLs under several /discovery endpoints. This is exclusively used by the OpenUI5 test suite application. serveResources \u00b6 This middleware resolves requests using the ui5-fs -file system abstraction. It also escapes non-ASCII characters in .properties translation files based on a project's configuration . testRunner \u00b6 Serves a static version of the UI5 QUnit TestRunner at /test-resources/sap/ui/qunit/testrunner.html . serveThemes \u00b6 Compiles CSS files for themes on-the-fly from the source *.less files. Changes made to these *.less files while the server is running will automatically lead to the re-compilation of the relevant CSS files when requested again. versionInfo \u00b6 Generates and serves the version info file /resources/sap-ui-version.json , which is required for several framework functionalities. connectUi5Proxy \u00b6 Provides basic proxy functionality using the proxy offered by connect-openui5 under the endpoint /proxy . nonReadRequests \u00b6 Answers all non-read requests (POST, PUT, DELETE, etc.) that have not been answered by any other middleware with the 404 \"Not Found\" status code . This signals the client that these operations are not supported by the server. serveIndex \u00b6 In case a directory has been requested, this middleware renders an HTML with a list of the directory's content. SSL Certificates \u00b6 When starting the UI5 Server in HTTPS- or HTTP/2 mode, for example by using UI5 CLI parameter --h2 , you will be prompted for the automatic generation of a local SSL certificate if necessary. Follow the given instructions and enter your password to install the generated certificate as trusted. You can find the generated certificate and corresponding private key under .ui5/server in your user's home directory. Tip If Chrome unintentionally redirects an HTTP-URL to HTTPS, you need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost) and pressing \"delete\".","title":"Server"},{"location":"pages/Server/#ui5-server","text":"The UI5 Server module provides server capabilities for local development of UI5 projects. API Reference","title":"UI5 Server"},{"location":"pages/Server/#standard-middleware","text":"All available standard middleware are listed below in the order of their execution. A project can also add custom middleware to the server by using the Custom Server Middleware Extensibility . Middleware Description csp See chapter csp compression Standard Express compression middleware cors Standard Express cors middleware discovery See chapter discovery serveResources See chapter serveResources testRunner See chapter testRunner serveThemes See chapter serveThemes versionInfo See chapter versionInfo connectUi5Proxy See chapter connectUi5Proxy nonReadRequests See chapter nonReadRequests serveIndex See chapter serveIndex","title":"Standard Middleware"},{"location":"pages/Server/#csp","text":"The Content Security Policy ( CSP ) middleware is active by default. The header content-security-policy can be set by adding URL parameter sap-ui-xx-csp-policy to the request with the policy name as value. To set the policy to report-only, append :report-only or :ro to the policy name. E.g. /index.html?sap-ui-xx-csp-policy=sap-target-level-1:report-only","title":"csp"},{"location":"pages/Server/#the-saptargetcsp-parameter","text":"The default CSP policies can be modified using parameter sendSAPTargetCSP ( --sap-csp-policies when using the CLI). With sendSAPTargetCSP set to true the policies sap-target-level-1 and sap-target-level-2 policies are activated and send as report-only.","title":"The SAPtargetCSP parameter"},{"location":"pages/Server/#serve-csp-reports","text":"Info This option is available since UI5 CLI v2.3.0 Serving of CSP reports can be activated with parameter serveCSPReports ( --serve-csp-reports when using the CLI). With serveCSPReports set to true , the CSP reports are collected and can be downloaded from the server path /.ui5/csp/csp-reports.json .","title":"Serve CSP Reports"},{"location":"pages/Server/#discovery","text":"This middleware lists project files with URLs under several /discovery endpoints. This is exclusively used by the OpenUI5 test suite application.","title":"discovery"},{"location":"pages/Server/#serveresources","text":"This middleware resolves requests using the ui5-fs -file system abstraction. It also escapes non-ASCII characters in .properties translation files based on a project's configuration .","title":"serveResources"},{"location":"pages/Server/#testrunner","text":"Serves a static version of the UI5 QUnit TestRunner at /test-resources/sap/ui/qunit/testrunner.html .","title":"testRunner"},{"location":"pages/Server/#servethemes","text":"Compiles CSS files for themes on-the-fly from the source *.less files. Changes made to these *.less files while the server is running will automatically lead to the re-compilation of the relevant CSS files when requested again.","title":"serveThemes"},{"location":"pages/Server/#versioninfo","text":"Generates and serves the version info file /resources/sap-ui-version.json , which is required for several framework functionalities.","title":"versionInfo"},{"location":"pages/Server/#connectui5proxy","text":"Provides basic proxy functionality using the proxy offered by connect-openui5 under the endpoint /proxy .","title":"connectUi5Proxy"},{"location":"pages/Server/#nonreadrequests","text":"Answers all non-read requests (POST, PUT, DELETE, etc.) that have not been answered by any other middleware with the 404 \"Not Found\" status code . This signals the client that these operations are not supported by the server.","title":"nonReadRequests"},{"location":"pages/Server/#serveindex","text":"In case a directory has been requested, this middleware renders an HTML with a list of the directory's content.","title":"serveIndex"},{"location":"pages/Server/#ssl-certificates","text":"When starting the UI5 Server in HTTPS- or HTTP/2 mode, for example by using UI5 CLI parameter --h2 , you will be prompted for the automatic generation of a local SSL certificate if necessary. Follow the given instructions and enter your password to install the generated certificate as trusted. You can find the generated certificate and corresponding private key under .ui5/server in your user's home directory. Tip If Chrome unintentionally redirects an HTTP-URL to HTTPS, you need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost) and pressing \"delete\".","title":"SSL Certificates"},{"location":"pages/TasksAndProcessors/","text":"Tasks and Processors \u00b6 Example: Uglifier \u00b6 Task \u00b6 const uglifyProcessor = require ( \"../processors/uglifier\" ); // Require to processor module . exports = function ({ workspace , options }) { // \"workspace\" is a DuplexCollection that represents the projects source directory (e.g. /webapp) // When calling the standard APIs \"byGlob\" and \"byPath\" it will also return resources that have // just been created by other tasks. // The uglify task intents to only process those resources present in the project source directory // therefore it calls the API \"byGlobSource\". return workspace . byGlobSource ( options . pattern ) // Collect all resources that shall be uglified. The caller provides the necessary GLOB pattern. . then (( allResources ) => { return uglifyProcessor ({ // Call to the processor resources : allResources // Pass all resources }); }) . then (( processedResources ) => { // Receive list of changed and newly created resources return Promise . all ( processedResources . map (( resource ) => { return workspace . write ( resource ); // Write them back into the workspace DuplexCollection }) ); }); }; Processor \u00b6 const uglify = require ( \"uglify-es\" ); const copyrightCommentsPattern = /copyright|\\(c\\)(?:[0-9]+|\\s+[0-9A-za-z])|released under|license|\\u00a9/i ; module . exports = function ({ resources }) { // Receive list of resources to uglify return Promise . all ( resources . map (( resource ) => { return resource . getString (). then (( code ) => { // Get resource content as string const result = uglify . minify ({ // Call to the uglify module [ resource . getPath ()] : code }, { warnings : false , output : { comments : copyrightCommentsPattern } }); if ( result . error ) { throw new Error ( // Just throw errors if something fails `Uglification failed with error: ${ result . error . message } in file ${ result . error . filename } ` + `(line ${ result . error . line } , col ${ result . error . col } , pos ${ result . error . pos } )` ); } resource . setString ( result . code ); // Update content of the resource return resource ; // Resolve with list of resources }); })); };","title":"Tasks and Processors"},{"location":"pages/TasksAndProcessors/#tasks-and-processors","text":"","title":"Tasks and Processors"},{"location":"pages/TasksAndProcessors/#example-uglifier","text":"","title":"Example: Uglifier"},{"location":"pages/TasksAndProcessors/#task","text":"const uglifyProcessor = require ( \"../processors/uglifier\" ); // Require to processor module . exports = function ({ workspace , options }) { // \"workspace\" is a DuplexCollection that represents the projects source directory (e.g. /webapp) // When calling the standard APIs \"byGlob\" and \"byPath\" it will also return resources that have // just been created by other tasks. // The uglify task intents to only process those resources present in the project source directory // therefore it calls the API \"byGlobSource\". return workspace . byGlobSource ( options . pattern ) // Collect all resources that shall be uglified. The caller provides the necessary GLOB pattern. . then (( allResources ) => { return uglifyProcessor ({ // Call to the processor resources : allResources // Pass all resources }); }) . then (( processedResources ) => { // Receive list of changed and newly created resources return Promise . all ( processedResources . map (( resource ) => { return workspace . write ( resource ); // Write them back into the workspace DuplexCollection }) ); }); };","title":"Task"},{"location":"pages/TasksAndProcessors/#processor","text":"const uglify = require ( \"uglify-es\" ); const copyrightCommentsPattern = /copyright|\\(c\\)(?:[0-9]+|\\s+[0-9A-za-z])|released under|license|\\u00a9/i ; module . exports = function ({ resources }) { // Receive list of resources to uglify return Promise . all ( resources . map (( resource ) => { return resource . getString (). then (( code ) => { // Get resource content as string const result = uglify . minify ({ // Call to the uglify module [ resource . getPath ()] : code }, { warnings : false , output : { comments : copyrightCommentsPattern } }); if ( result . error ) { throw new Error ( // Just throw errors if something fails `Uglification failed with error: ${ result . error . message } in file ${ result . error . filename } ` + `(line ${ result . error . line } , col ${ result . error . col } , pos ${ result . error . pos } )` ); } resource . setString ( result . code ); // Update content of the resource return resource ; // Resolve with list of resources }); })); };","title":"Processor"},{"location":"pages/Troubleshooting/","text":"Troubleshooting \u00b6 UI5 Server \u00b6 Chrome Redirects HTTP URLs to HTTPS ( ERR_SSL_PROTOCOL_ERROR ) \u00b6 An HTTPS server or proxy that was previously running on a domain (e.g. localhost ), might have set an HSTS header, enforcing Chrome to always use HTTPS for this domain. See https://www.chromium.org/hsts . This makes it impossible to connect to an HTTP-only server running on the same domain. Resolution \u00b6 You need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost ) and pressing \"delete\". Issues Not Listed Here \u00b6 Please follow our Contribution Guidelines on how to report an issue. UI5 Project \u00b6 Corrupt Framework Dependencies \u00b6 When using the UI5 CLI in versions lower than v2.9.1 or the @ui5/project module in versions lower than v2.2.6 you might experience build- or runtime issues caused by missing or corrupt files in one or more UI5 framework dependencies. Note that this does not affect other project dependencies, such as reuse libraries, which are installed via external package managers like npm or Yarn. These issues can be the result of an aborted install during a preceding UI5 Tooling execution. Because of a bug that has since been fixed, UI5 Tooling assumes that the preceding install was successful and uses the potentially corrupted dependency. Resolution \u00b6 Remove the .ui5/framework/ directory from your user's home directory. rm -rf ~/.ui5/framework/ Any missing framework dependencies will be downloaded again during the next UI5 Tooling invocation. ~/.ui5 Taking too Much Disk Space \u00b6 There are possibly many versions of UI5 framework dependencies installed on your system, taking a large amount of disk space. Resolution \u00b6 Remove the .ui5/framework/ directory from your user's home directory: rm -rf ~/.ui5/framework/ Any missing framework dependencies will be downloaded again during the next UI5 Tooling invocation. Benchmarking UI5 Tooling \u00b6 For benchmarking UI5 Tooling we typically make use of the open source tool hyperfine . In general we only benchmark calls to the UI5 CLI. However, we might add scripted benchmarks for some components in the future. The following is a walk-through on how to evaluate the performance impact of an imaginary change in the UI5 Builder project. Setup \u00b6 Install hyperfine Prepare the UI5 Tooling projects you want to measure (optional if your development environment already reflects this) : Start in an empty directory mkdir ui5-tooling-benchmark && cd ui5-tooling-benchmark/ Clone UI5 CLI git clone git@github.com:SAP/ui5-cli.git Clone UI5 Builder (or your fork) git clone git@github.com:SAP/ui5-builder.git Make sure you check out the master branch, since we'll perform the baseline test first Install npm dependencies in both directories ( cd ui5-cli && npm install ) ( cd ui5-builder && npm install ) Create global npm links for both projects ( cd ui5-cli && npm link ) ( cd ui5-builder && npm link ) Link UI5 Builder into UI5 CLI ( cd ui5-cli && npm link @ui5/builder ) Verify your setup ui5 --version This should output the version and location of the UI5 CLI you just cloned. For example: 2.6.6 (from /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js) Prepare your test project (we choose the openui5-sample-app ) Clone the project git clone git@github.com:SAP/openui5-sample-app.git Navigate into the project cd openui5-sample-app Install any required npm dependencies npm install Note: We won't link UI5 CLI into this project. Instead, we'll call it directly. Verify that the previously installed UI5 CLI can be called with the following command: UI5_CLI_NO_LOCAL = X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js --version On Windows: set UI5_CLI_NO_LOCAL = X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js --version (Replace the path to ui5.js with the one shown in the previous ui5 --version output) Benchmarking \u00b6 Depending on how reliable you'd like the measurements to be, consider preparing your system: Connect your computer to a power supply Make sure no updates or anti-virus scans are taking place Close all applications. This includes your IDE, since it might start indexing any new files created during the build, thus impacting I/O Don't interact with your system wile the benchmarking is running Perform the baseline measurement In the project, start your first benchmark hyperfine --warmup 1 \\ 'UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build' \\ --export-markdown ./baseline.md On Windows: hyperfine --warmup 1 \\ 'set UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build' \\ --export-markdown ./baseline.md Your baseline benchmark is now stored in baseline.md and should look similar to this: Command Mean [s] Min [s] Max [s] Relative UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build 1.439 \u00b1 0.036 1.400 1.507 1.00 Prepare your change Switch to the branch that contains your change ( cd ../ui5-builder && git checkout my-change ) If your change requires different npm dependencies, reinstall them ( cd ../ui5-builder && npm install ) The link from UI5 CLI is still in place. However, if you have changes in multiple UI5 Tooling modules, you might need to npm link those again Perform the change measurement In the project, start your second benchmark hyperfine --warmup 1 \\ 'UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build' \\ --export-markdown ./my_change.md On Windows: hyperfine --warmup 1 \\ 'set UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build' \\ --export-markdown ./my_change.md Your change's benchmark is now stored in my_change.md Compile Results \u00b6 Merge both measurements into one markdown Either remove the Relative column or calculate the relative difference yourself. You should end up with a markdown like this: | Command | Mean [s] | Min [s] | Max [s] | |:---|---:|---:|---:| | `UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build` | 1.439 \u00b1 0.036 | 1.400 | 1.507 | | `UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build` | 1.584 \u00b1 0.074 | 1.477 | 1.680 | Rendering like this: Command Mean [s] Min [s] Max [s] UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build 1.439 \u00b1 0.036 1.400 1.507 UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build 1.584 \u00b1 0.074 1.477 1.680 You can now share these results on GitHub or wherever you might need them. Happy benchmarking! \ud83c\udfce","title":"Troubleshooting"},{"location":"pages/Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"pages/Troubleshooting/#ui5-server","text":"","title":"UI5 Server"},{"location":"pages/Troubleshooting/#chrome-redirects-http-urls-to-https-err_ssl_protocol_error","text":"An HTTPS server or proxy that was previously running on a domain (e.g. localhost ), might have set an HSTS header, enforcing Chrome to always use HTTPS for this domain. See https://www.chromium.org/hsts . This makes it impossible to connect to an HTTP-only server running on the same domain.","title":"Chrome Redirects HTTP URLs to HTTPS (ERR_SSL_PROTOCOL_ERROR)"},{"location":"pages/Troubleshooting/#resolution","text":"You need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost ) and pressing \"delete\".","title":"Resolution"},{"location":"pages/Troubleshooting/#issues-not-listed-here","text":"Please follow our Contribution Guidelines on how to report an issue.","title":"Issues Not Listed Here"},{"location":"pages/Troubleshooting/#ui5-project","text":"","title":"UI5 Project"},{"location":"pages/Troubleshooting/#corrupt-framework-dependencies","text":"When using the UI5 CLI in versions lower than v2.9.1 or the @ui5/project module in versions lower than v2.2.6 you might experience build- or runtime issues caused by missing or corrupt files in one or more UI5 framework dependencies. Note that this does not affect other project dependencies, such as reuse libraries, which are installed via external package managers like npm or Yarn. These issues can be the result of an aborted install during a preceding UI5 Tooling execution. Because of a bug that has since been fixed, UI5 Tooling assumes that the preceding install was successful and uses the potentially corrupted dependency.","title":"Corrupt Framework Dependencies"},{"location":"pages/Troubleshooting/#resolution_1","text":"Remove the .ui5/framework/ directory from your user's home directory. rm -rf ~/.ui5/framework/ Any missing framework dependencies will be downloaded again during the next UI5 Tooling invocation.","title":"Resolution"},{"location":"pages/Troubleshooting/#ui5-taking-too-much-disk-space","text":"There are possibly many versions of UI5 framework dependencies installed on your system, taking a large amount of disk space.","title":"~/.ui5 Taking too Much Disk Space"},{"location":"pages/Troubleshooting/#resolution_2","text":"Remove the .ui5/framework/ directory from your user's home directory: rm -rf ~/.ui5/framework/ Any missing framework dependencies will be downloaded again during the next UI5 Tooling invocation.","title":"Resolution"},{"location":"pages/Troubleshooting/#benchmarking-ui5-tooling","text":"For benchmarking UI5 Tooling we typically make use of the open source tool hyperfine . In general we only benchmark calls to the UI5 CLI. However, we might add scripted benchmarks for some components in the future. The following is a walk-through on how to evaluate the performance impact of an imaginary change in the UI5 Builder project.","title":"Benchmarking UI5 Tooling"},{"location":"pages/Troubleshooting/#setup","text":"Install hyperfine Prepare the UI5 Tooling projects you want to measure (optional if your development environment already reflects this) : Start in an empty directory mkdir ui5-tooling-benchmark && cd ui5-tooling-benchmark/ Clone UI5 CLI git clone git@github.com:SAP/ui5-cli.git Clone UI5 Builder (or your fork) git clone git@github.com:SAP/ui5-builder.git Make sure you check out the master branch, since we'll perform the baseline test first Install npm dependencies in both directories ( cd ui5-cli && npm install ) ( cd ui5-builder && npm install ) Create global npm links for both projects ( cd ui5-cli && npm link ) ( cd ui5-builder && npm link ) Link UI5 Builder into UI5 CLI ( cd ui5-cli && npm link @ui5/builder ) Verify your setup ui5 --version This should output the version and location of the UI5 CLI you just cloned. For example: 2.6.6 (from /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js) Prepare your test project (we choose the openui5-sample-app ) Clone the project git clone git@github.com:SAP/openui5-sample-app.git Navigate into the project cd openui5-sample-app Install any required npm dependencies npm install Note: We won't link UI5 CLI into this project. Instead, we'll call it directly. Verify that the previously installed UI5 CLI can be called with the following command: UI5_CLI_NO_LOCAL = X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js --version On Windows: set UI5_CLI_NO_LOCAL = X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js --version (Replace the path to ui5.js with the one shown in the previous ui5 --version output)","title":"Setup"},{"location":"pages/Troubleshooting/#benchmarking","text":"Depending on how reliable you'd like the measurements to be, consider preparing your system: Connect your computer to a power supply Make sure no updates or anti-virus scans are taking place Close all applications. This includes your IDE, since it might start indexing any new files created during the build, thus impacting I/O Don't interact with your system wile the benchmarking is running Perform the baseline measurement In the project, start your first benchmark hyperfine --warmup 1 \\ 'UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build' \\ --export-markdown ./baseline.md On Windows: hyperfine --warmup 1 \\ 'set UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build' \\ --export-markdown ./baseline.md Your baseline benchmark is now stored in baseline.md and should look similar to this: Command Mean [s] Min [s] Max [s] Relative UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build 1.439 \u00b1 0.036 1.400 1.507 1.00 Prepare your change Switch to the branch that contains your change ( cd ../ui5-builder && git checkout my-change ) If your change requires different npm dependencies, reinstall them ( cd ../ui5-builder && npm install ) The link from UI5 CLI is still in place. However, if you have changes in multiple UI5 Tooling modules, you might need to npm link those again Perform the change measurement In the project, start your second benchmark hyperfine --warmup 1 \\ 'UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build' \\ --export-markdown ./my_change.md On Windows: hyperfine --warmup 1 \\ 'set UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build' \\ --export-markdown ./my_change.md Your change's benchmark is now stored in my_change.md","title":"Benchmarking"},{"location":"pages/Troubleshooting/#compile-results","text":"Merge both measurements into one markdown Either remove the Relative column or calculate the relative difference yourself. You should end up with a markdown like this: | Command | Mean [s] | Min [s] | Max [s] | |:---|---:|---:|---:| | `UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build` | 1.439 \u00b1 0.036 | 1.400 | 1.507 | | `UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build` | 1.584 \u00b1 0.074 | 1.477 | 1.680 | Rendering like this: Command Mean [s] Min [s] Max [s] UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build 1.439 \u00b1 0.036 1.400 1.507 UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.js build 1.584 \u00b1 0.074 1.477 1.680 You can now share these results on GitHub or wherever you might need them. Happy benchmarking! \ud83c\udfce","title":"Compile Results"},{"location":"pages/fsInterface/","text":"The fsInterface module is a custom fs implementation which is used to replace node fs . A custom or modified fs can be necessary due to several reasons, maybe for caching functionality or to fallback to multiple locations automatically. To ensure a module or library can be used with custom fs implementations, it is best practice to be able to inject the desired fs module. For Example: var tm = new TestModule({fs: someFs}) If a custom fs module is used, all required methods should be implemented. Currently we only use the methods readFile and stat in fsInterface .","title":"fsInterface"},{"location":"pages/extensibility/CustomServerMiddleware/","text":"Custom UI5 Server Middleware \u00b6 The UI5 Server Extensibility enables you to enhance the functionality of the UI5 Server. You may want to handle requests differently. For example add various headers to a response or parse data of a POST request in a specific way. For this you can plug custom middleware implementations into the internal express server of the UI5 Server module. The UI5 community already created many custom middleware packages which you can integrate into your project. They are often prefixed by ui5-middleware- to make them easily searchable in the npm registry . Please note that custom middleware packages from third parties can not only modify how your project is served but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 In a projects ui5.yaml file, you can define additional server middleware modules that will be executed when the request is received by the server. This configuration exclusively affects the server started in this project. Custom middleware configurations defined in any dependencies are ignored. A middleware may be executed before or after any other middleware. This can either be a standard middleware or another custom middleware. Example: Basic configuration \u00b6 specVersion : \"2.6\" type : application metadata : name : my.application server : customMiddleware : - name : myCustomMiddleware mountPath : /myapp afterMiddleware : compression configuration : debug : true In the above example the middleware compression is already included as a standard middleware by the UI5 Server. When serving the application my.application , the server will call the custom middleware myCustomMiddleware after compression . There can be optional configuration parameters which are passed directly to the custom middleware implementation (see below). An optional mountPath for which the middleware function is invoked can be provided. It will be passed to the app.use call (see express API reference ). Execution order \u00b6 Note that middleware configurations are applied in the order they are defined. When referencing another custom middleware, it has to be defined before that reference. Custom Middleware Extension \u00b6 A custom middleware extension consists of a ui5.yaml and a custom middleware implementation . It can be a standalone module or part of an existing UI5 project. Example: ui5.yaml \u00b6 specVersion : \"2.6\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom middleware extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a custom middleware extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The UI5 Server will detect the custom middleware configuration of the project and use the middleware on startup. Example: Custom Middleware Extension defined in UI5 project \u00b6 # Project configuration for the above example specVersion : \"2.6\" kind : project type : application metadata : name : my.application server : customMiddleware : - name : markdownHandler beforeMiddleware : serveResources --- # Custom middleware extension as part of your project specVersion : \"2.6\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom Middleware Implementation \u00b6 A custom middleware implementation needs to return a function with the following signature: /** * Custom UI5 Server middleware example * * @param {object} parameters Parameters * @param {object} parameters.resources Resource collections * @param {module:@ui5/fs.AbstractReader} parameters.resources.all Reader or Collection to read resources of the * root project and its dependencies * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject Reader or Collection to read resources of * the project the server is started in * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies Reader or Collection to read resources of * the projects dependencies * @param {object} parameters.middlewareUtil Specification version dependent interface to a * [MiddlewareUtil]{@link module:@ui5/server.middleware.MiddlewareUtil} instance * @param {object} parameters.options Options * @param {string} [parameters.options.configuration] Custom server middleware configuration if given in ui5.yaml * @returns {function} Middleware function to use */ module . exports = function ({ resources , middlewareUtil , options }) { return function ( req , res , next ) { // [...] } }; Example: lib/middleware/markdownHandler.js \u00b6 // Custom middleware implementation module . exports = function ({ resources , middlewareUtil , options }) { const MarkdownIt = require ( 'markdown-it' ); const md = new MarkdownIt (); return function ( req , res , next ) { if ( ! req . path . endsWith ( \".html\" )) { // Do not handle non-HTML requests next (); return ; } // Try to read a corresponding markdown file resources . rootProject . byPath ( req . path . replace ( \".html\" , \".md\" )). then ( async ( resource ) => { if ( ! resource ) { // No file found, hand over to next middleware next (); return ; } const markdown = await resource . getBuffer (); // Generate HTML from markdown string const html = md . render ( markdown . toString ()); res . type ( '.html' ); res . end ( html ); }). catch (( err ) => { next ( err ); }); } }; Live demo of the above example: https://github.com/SAP/openui5-sample-app/tree/demo-server-middleware-extensibility Helper Class MiddlewareUtil \u00b6 Custom middleware defining Specification Version 2.0 or higher have access to an interface of a MiddlewareUtil instance. In this case, a middlewareUtil object is provided as a part of the custom middleware's parameters . Depending on the specification version of the custom middleware, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the MiddlewareUtil API reference .","title":"Custom Server Middleware"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-ui5-server-middleware","text":"The UI5 Server Extensibility enables you to enhance the functionality of the UI5 Server. You may want to handle requests differently. For example add various headers to a response or parse data of a POST request in a specific way. For this you can plug custom middleware implementations into the internal express server of the UI5 Server module. The UI5 community already created many custom middleware packages which you can integrate into your project. They are often prefixed by ui5-middleware- to make them easily searchable in the npm registry . Please note that custom middleware packages from third parties can not only modify how your project is served but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Custom UI5 Server Middleware"},{"location":"pages/extensibility/CustomServerMiddleware/#configuration","text":"In a projects ui5.yaml file, you can define additional server middleware modules that will be executed when the request is received by the server. This configuration exclusively affects the server started in this project. Custom middleware configurations defined in any dependencies are ignored. A middleware may be executed before or after any other middleware. This can either be a standard middleware or another custom middleware.","title":"Configuration"},{"location":"pages/extensibility/CustomServerMiddleware/#example-basic-configuration","text":"specVersion : \"2.6\" type : application metadata : name : my.application server : customMiddleware : - name : myCustomMiddleware mountPath : /myapp afterMiddleware : compression configuration : debug : true In the above example the middleware compression is already included as a standard middleware by the UI5 Server. When serving the application my.application , the server will call the custom middleware myCustomMiddleware after compression . There can be optional configuration parameters which are passed directly to the custom middleware implementation (see below). An optional mountPath for which the middleware function is invoked can be provided. It will be passed to the app.use call (see express API reference ).","title":"Example: Basic configuration"},{"location":"pages/extensibility/CustomServerMiddleware/#execution-order","text":"Note that middleware configurations are applied in the order they are defined. When referencing another custom middleware, it has to be defined before that reference.","title":"Execution order"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-middleware-extension","text":"A custom middleware extension consists of a ui5.yaml and a custom middleware implementation . It can be a standalone module or part of an existing UI5 project.","title":"Custom Middleware Extension"},{"location":"pages/extensibility/CustomServerMiddleware/#example-ui5yaml","text":"specVersion : \"2.6\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom middleware extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a custom middleware extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The UI5 Server will detect the custom middleware configuration of the project and use the middleware on startup.","title":"Example: ui5.yaml"},{"location":"pages/extensibility/CustomServerMiddleware/#example-custom-middleware-extension-defined-in-ui5-project","text":"# Project configuration for the above example specVersion : \"2.6\" kind : project type : application metadata : name : my.application server : customMiddleware : - name : markdownHandler beforeMiddleware : serveResources --- # Custom middleware extension as part of your project specVersion : \"2.6\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js","title":"Example: Custom Middleware Extension defined in UI5 project"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-middleware-implementation","text":"A custom middleware implementation needs to return a function with the following signature: /** * Custom UI5 Server middleware example * * @param {object} parameters Parameters * @param {object} parameters.resources Resource collections * @param {module:@ui5/fs.AbstractReader} parameters.resources.all Reader or Collection to read resources of the * root project and its dependencies * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject Reader or Collection to read resources of * the project the server is started in * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies Reader or Collection to read resources of * the projects dependencies * @param {object} parameters.middlewareUtil Specification version dependent interface to a * [MiddlewareUtil]{@link module:@ui5/server.middleware.MiddlewareUtil} instance * @param {object} parameters.options Options * @param {string} [parameters.options.configuration] Custom server middleware configuration if given in ui5.yaml * @returns {function} Middleware function to use */ module . exports = function ({ resources , middlewareUtil , options }) { return function ( req , res , next ) { // [...] } };","title":"Custom Middleware Implementation"},{"location":"pages/extensibility/CustomServerMiddleware/#example-libmiddlewaremarkdownhandlerjs","text":"// Custom middleware implementation module . exports = function ({ resources , middlewareUtil , options }) { const MarkdownIt = require ( 'markdown-it' ); const md = new MarkdownIt (); return function ( req , res , next ) { if ( ! req . path . endsWith ( \".html\" )) { // Do not handle non-HTML requests next (); return ; } // Try to read a corresponding markdown file resources . rootProject . byPath ( req . path . replace ( \".html\" , \".md\" )). then ( async ( resource ) => { if ( ! resource ) { // No file found, hand over to next middleware next (); return ; } const markdown = await resource . getBuffer (); // Generate HTML from markdown string const html = md . render ( markdown . toString ()); res . type ( '.html' ); res . end ( html ); }). catch (( err ) => { next ( err ); }); } }; Live demo of the above example: https://github.com/SAP/openui5-sample-app/tree/demo-server-middleware-extensibility","title":"Example: lib/middleware/markdownHandler.js"},{"location":"pages/extensibility/CustomServerMiddleware/#helper-class-middlewareutil","text":"Custom middleware defining Specification Version 2.0 or higher have access to an interface of a MiddlewareUtil instance. In this case, a middlewareUtil object is provided as a part of the custom middleware's parameters . Depending on the specification version of the custom middleware, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the MiddlewareUtil API reference .","title":"Helper Class MiddlewareUtil"},{"location":"pages/extensibility/CustomTasks/","text":"Custom UI5 Builder Tasks \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify . Example: Basic configuration \u00b6 # In this example configuration two custom tasks are defined: 'babel' and 'generateMarkdownFiles'. specVersion : \"2.6\" type : library metadata : name : my.library builder : customTasks : - name : babel beforeTask : generateComponentPreload - name : generateMarkdownFiles afterTask : uglify configuration : color : blue Example: Connect multiple custom tasks \u00b6 You can also connect multiple custom tasks with each other. The order in the configuration is important in this case. You have to make sure that a task is defined before you reference it via beforeTask or afterTask . # In this example 'myCustomTask2' gets executed after 'myCustomTask1'. specVersion : \"2.6\" type : library metadata : name : my.library builder : customTasks : - name : myCustomTask1 beforeTask : generateComponentPreload - name : myCustomTask2 afterTask : myCustomTask1 Custom Task Extension \u00b6 A custom task extension consists of a ui5.yaml and a task implementation . It can be a standalone module or part of an existing UI5 project. Example: ui5.yaml \u00b6 specVersion : \"2.6\" kind : extension type : task metadata : name : generateMarkdownFiles task : path : lib/tasks/generateMarkdownFiles.js Task extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a task extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The task extension will then be automatically collected and processed during the processing of the project. Example: Custom Task Extension defined in UI5 project \u00b6 # Project configuration for the above example specVersion : \"2.6\" kind : project type : library metadata : name : my.library builder : customTasks : - name : generateMarkdownFiles afterTask : uglify configuration : color : blue --- # Task extension as part of your project specVersion : \"2.6\" kind : extension type : task metadata : name : generateMarkdownFiles task : path : lib/tasks/generateMarkdownFiles.js Task Implementation \u00b6 A custom task implementation needs to return a function with the following signature: /** * Custom task example * * @param {object} parameters Parameters * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write resources * @param {module:@ui5/fs.AbstractReader} parameters.dependencies ReaderCollection to read dependency resources * @param {object} parameters.taskUtil Specification Version dependent interface to a * [TaskUtil]{@link module:@ui5/builder.tasks.TaskUtil} instance * @param {object} parameters.options Options * @param {string} parameters.options.projectName Project name * @param {string} [parameters.options.projectNamespace] Project namespace * @param {string} [parameters.options.configuration] Task configuration if given in ui5.yaml * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written or rejecting in case of an error */ module . exports = async function ({ workspace , dependencies , taskUtil , options }) { // [...] }; Parameters: workspace : A DuplexCollection to read and write Resources for the project that is currently being built dependencies : A ReaderCollection to read Resources of the project's dependencies taskUtil : See details below options.projectName : The name of the project currently being built. Example: my.library options.projectNamespace : The namespace of the project. Example: my/library options.configuration : The task configuration as defined in the project's ui5.yaml. See Configuration Returns: A Promise that resolves once the task has completed and all new or modified resources have been written to the workspace. In case of errors the promise should reject with an Error object , causing the build to abort. Warning Depending on your project setup, UI5 Tooling tends to open many files simultaneously during a build. To prevent errors like EMFILE: too many open files , we urge custom task implementations to use the graceful-fs module as a drop-in replacement for the native fs module. Example: lib/tasks/generateMarkdownFiles.js \u00b6 The following code snippet shows an example of what a task implementation might look like. This task uses a generic \"renderMarkdown\" library to transform markdown files to HTML and writes out the newly created markdown files. const path = require ( \"path\" ); const { Resource } = require ( \"@ui5/fs\" ); const renderMarkdown = require ( \"./renderMarkdown\" ); module . exports = async function ({ workspace , dependencies , taskUtil , options }) { const textResources = await workspace . byGlob ( \"**/*.md\" ) await Promise . all ( textResources . map ( async ( resource ) => { const htmlString = await renderMarkdown ( await resource . getString ()); const markdownResourcePath = resource . getPath (); // Note: @ui5/fs virtual paths are always POSIX (on all systems) const newResourceName = path . posix . basename ( markdownResourcePath , \".md\" ) + \".html\" ; const newResourcePath = path . posix . join ( path . posix . dirname ( markdownResourcePath ), newResourceName ); const markdownResource = new Resource ({ path : newResourcePath , string : htmlString }) await workspace . write ( markdownResource ); })); }; Example: lib/tasks/bundlesOnly.js \u00b6 The following code snippet shows an example of a custom task, filtering for resources that are not bundles and tagging them for being omitted from the build result. module . exports = async function ({ workspace , dependencies , taskUtil , options }) { const jsResources = await workspace . byGlob ( \"**/*.js\" ) jsResources . forEach (( resource ) => { if ( ! taskUtil . getTag ( resource , taskUtil . STANDARD_TAGS . IsBundle )) { // Resource is not a Bundle => Remove it from the build result taskUtil . setTag ( resource , taskUtil . STANDARD_TAGS . OmitFromBuildResult ); } }); }; Helper Class TaskUtil \u00b6 Custom tasks defining Specification Version 2.2 or higher have access to an interface of a TaskUtil instance. In this case, a taskUtil object is provided as a part of the custom task's parameters . Depending on the specification version of the custom task, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the TaskUtil API reference . Also see UI5 Tooling RFC 0008 Resource Tagging During Build for details on resource tagging.","title":"Custom Tasks"},{"location":"pages/extensibility/CustomTasks/#custom-ui5-builder-tasks","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Custom UI5 Builder Tasks"},{"location":"pages/extensibility/CustomTasks/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"pages/extensibility/CustomTasks/#example-basic-configuration","text":"# In this example configuration two custom tasks are defined: 'babel' and 'generateMarkdownFiles'. specVersion : \"2.6\" type : library metadata : name : my.library builder : customTasks : - name : babel beforeTask : generateComponentPreload - name : generateMarkdownFiles afterTask : uglify configuration : color : blue","title":"Example: Basic configuration"},{"location":"pages/extensibility/CustomTasks/#example-connect-multiple-custom-tasks","text":"You can also connect multiple custom tasks with each other. The order in the configuration is important in this case. You have to make sure that a task is defined before you reference it via beforeTask or afterTask . # In this example 'myCustomTask2' gets executed after 'myCustomTask1'. specVersion : \"2.6\" type : library metadata : name : my.library builder : customTasks : - name : myCustomTask1 beforeTask : generateComponentPreload - name : myCustomTask2 afterTask : myCustomTask1","title":"Example: Connect multiple custom tasks"},{"location":"pages/extensibility/CustomTasks/#custom-task-extension","text":"A custom task extension consists of a ui5.yaml and a task implementation . It can be a standalone module or part of an existing UI5 project.","title":"Custom Task Extension"},{"location":"pages/extensibility/CustomTasks/#example-ui5yaml","text":"specVersion : \"2.6\" kind : extension type : task metadata : name : generateMarkdownFiles task : path : lib/tasks/generateMarkdownFiles.js Task extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a task extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The task extension will then be automatically collected and processed during the processing of the project.","title":"Example: ui5.yaml"},{"location":"pages/extensibility/CustomTasks/#example-custom-task-extension-defined-in-ui5-project","text":"# Project configuration for the above example specVersion : \"2.6\" kind : project type : library metadata : name : my.library builder : customTasks : - name : generateMarkdownFiles afterTask : uglify configuration : color : blue --- # Task extension as part of your project specVersion : \"2.6\" kind : extension type : task metadata : name : generateMarkdownFiles task : path : lib/tasks/generateMarkdownFiles.js","title":"Example: Custom Task Extension defined in UI5 project"},{"location":"pages/extensibility/CustomTasks/#task-implementation","text":"A custom task implementation needs to return a function with the following signature: /** * Custom task example * * @param {object} parameters Parameters * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write resources * @param {module:@ui5/fs.AbstractReader} parameters.dependencies ReaderCollection to read dependency resources * @param {object} parameters.taskUtil Specification Version dependent interface to a * [TaskUtil]{@link module:@ui5/builder.tasks.TaskUtil} instance * @param {object} parameters.options Options * @param {string} parameters.options.projectName Project name * @param {string} [parameters.options.projectNamespace] Project namespace * @param {string} [parameters.options.configuration] Task configuration if given in ui5.yaml * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written or rejecting in case of an error */ module . exports = async function ({ workspace , dependencies , taskUtil , options }) { // [...] }; Parameters: workspace : A DuplexCollection to read and write Resources for the project that is currently being built dependencies : A ReaderCollection to read Resources of the project's dependencies taskUtil : See details below options.projectName : The name of the project currently being built. Example: my.library options.projectNamespace : The namespace of the project. Example: my/library options.configuration : The task configuration as defined in the project's ui5.yaml. See Configuration Returns: A Promise that resolves once the task has completed and all new or modified resources have been written to the workspace. In case of errors the promise should reject with an Error object , causing the build to abort. Warning Depending on your project setup, UI5 Tooling tends to open many files simultaneously during a build. To prevent errors like EMFILE: too many open files , we urge custom task implementations to use the graceful-fs module as a drop-in replacement for the native fs module.","title":"Task Implementation"},{"location":"pages/extensibility/CustomTasks/#example-libtasksgeneratemarkdownfilesjs","text":"The following code snippet shows an example of what a task implementation might look like. This task uses a generic \"renderMarkdown\" library to transform markdown files to HTML and writes out the newly created markdown files. const path = require ( \"path\" ); const { Resource } = require ( \"@ui5/fs\" ); const renderMarkdown = require ( \"./renderMarkdown\" ); module . exports = async function ({ workspace , dependencies , taskUtil , options }) { const textResources = await workspace . byGlob ( \"**/*.md\" ) await Promise . all ( textResources . map ( async ( resource ) => { const htmlString = await renderMarkdown ( await resource . getString ()); const markdownResourcePath = resource . getPath (); // Note: @ui5/fs virtual paths are always POSIX (on all systems) const newResourceName = path . posix . basename ( markdownResourcePath , \".md\" ) + \".html\" ; const newResourcePath = path . posix . join ( path . posix . dirname ( markdownResourcePath ), newResourceName ); const markdownResource = new Resource ({ path : newResourcePath , string : htmlString }) await workspace . write ( markdownResource ); })); };","title":"Example: lib/tasks/generateMarkdownFiles.js"},{"location":"pages/extensibility/CustomTasks/#example-libtasksbundlesonlyjs","text":"The following code snippet shows an example of a custom task, filtering for resources that are not bundles and tagging them for being omitted from the build result. module . exports = async function ({ workspace , dependencies , taskUtil , options }) { const jsResources = await workspace . byGlob ( \"**/*.js\" ) jsResources . forEach (( resource ) => { if ( ! taskUtil . getTag ( resource , taskUtil . STANDARD_TAGS . IsBundle )) { // Resource is not a Bundle => Remove it from the build result taskUtil . setTag ( resource , taskUtil . STANDARD_TAGS . OmitFromBuildResult ); } }); };","title":"Example: lib/tasks/bundlesOnly.js"},{"location":"pages/extensibility/CustomTasks/#helper-class-taskutil","text":"Custom tasks defining Specification Version 2.2 or higher have access to an interface of a TaskUtil instance. In this case, a taskUtil object is provided as a part of the custom task's parameters . Depending on the specification version of the custom task, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the TaskUtil API reference . Also see UI5 Tooling RFC 0008 Resource Tagging During Build for details on resource tagging.","title":"Helper Class TaskUtil"},{"location":"pages/extensibility/ProjectShims/","text":"Project Shims \u00b6 A project shim extension can be used to define or extend a project configuration of a module. The most popular use case is probably to add UI5 project configuration to a third party module that otherwise could not be used with the UI5 Tooling. Also see RFC 0002 Project Shims . Structure \u00b6 specVersion : \"2.6\" kind : extension type : project-shim metadata : name : <name of project shim extension> shims : configurations : <module name (id)> : specVersion : \"2.6\" type : <project type> metadata : name : <project name> <module name (id)> : specVersion : \"2.6\" type : <project type> metadata : name : <project name> dependencies : <module name (id)> : - <module name (id)> - <module name (id)> - <module name (id)> collections : <module name> : modules : <id> : <relative path> <id> : <relative path> <id> : <relative path> \"module name\" refers to the name of the module as identified by the used translator. E.g. when using the npm translator, the name declared in the modules package.json is used here. In most cases, the module name also becomes the internal ID of the project. Properties \u00b6 configurations (optional) \u00b6 Used to add configuration to any module. Map of module names. The values represent the configuration that should be applied to the module. Note: Configuration is applied to the module using Object.assign() . This means that existing configuration properties will be overwritten. dependencies (optional) \u00b6 Used to add dependencies to any module. Map of module names. The value is an array of module names that this module depends on. Note that the other modules need to be part of the dependency tree of the root project (not as direct children, just somewhere). collections (optional) \u00b6 Used when a dependency contains multiple modules. Also referred to as a Monorepo . Map of module names. The values are objects with collection-specific configuration: - modules : Map of project IDs and their relative file system paths inside the collection module. The project ID does not have to match the actual module name (as for instance defined in the modules package.json ). UI5 Project will use it in place of a module name. Example A: \u00b6 An application \"my-application\" defines a npm dependency to lodash in its package.json and configures it by using a project-shim extension added to its ui5.yaml . ui5.yaml specVersion : \"2.6\" type : application metadata : name : my.application --- # Everything below this line could also be put into the ui5.yaml of a standalone extension module specVersion : \"2.6\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : # name as defined in package.json specVersion : \"2.6\" type : module # Use module type metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" # map root directory of lodash module Example B: \u00b6 An application \"application.a\" depends on a library \"legacy.library.a\" which does not contain a ui5.yaml or package.json yet (nor do its dependencies). Structure of the legacy library directories (two repositories) \u00b6 legacy-libs/ \\_ src/ \\_ library.a/ \\_ src/ \\_ test/ \\_ library.b/ \\_ src/ \\_ test/ legacy-library-x/ \\_ src/ \\_ test/ Dependencies between the legacy libraries \u00b6 legacy.library.a depends on legacy.library.b legacy.library.a depends on legacy.library.x legacy.library.b depends on legacy.library.x application.a \u00b6 Directory structure application-a/ \\_ node_modules/ \\_ legacy-libs/ \\_ legacy-library-x/ \\_ webapp/ \\_ ui5.yaml \\_ package.json package.json (extract) napa can install git repositories that are lacking a package.json with npm. Within ui5-project , the npm translator already detects dependencies defined in the napa section of a package.json and tries to resolve them. { \"scripts\" : { \"install\" : \"napa\" }, \"napa\" : { \"legacy-libs\" : \"<git-repository-url>\" , \"legacy-library-x\" : \"<git-repository-url>\" } } ui5.yaml The shim defined in the application configures the legacy libraries and defines their dependencies. This shim might as well be a standalone module that is added to the applications dependencies. That would be the typical reuse scenario for shims. specVersion : \"2.6\" type : application metadata : name : application.a ---- specVersion : \"2.6\" kind : extension type : project-shim metadata : name : legacy-lib-shims shims : configurations : legacy-library-a : specVersion : \"2.6\" type : library metadata : name : legacy.library.a legacy-library-b : specVersion : \"2.6\" type : library metadata : name : legacy.library.b legacy-library-x : specVersion : \"2.6\" type : library metadata : name : legacy.library.x dependencies : legacy-library-a : - legacy-library-b - legacy-library-x legacy-library-b : - legacy-library-x collections : legacy-libs : modules : legacy-library-a : src/library.a legacy-library-b : src/library.b","title":"Project Shims"},{"location":"pages/extensibility/ProjectShims/#project-shims","text":"A project shim extension can be used to define or extend a project configuration of a module. The most popular use case is probably to add UI5 project configuration to a third party module that otherwise could not be used with the UI5 Tooling. Also see RFC 0002 Project Shims .","title":"Project Shims"},{"location":"pages/extensibility/ProjectShims/#structure","text":"specVersion : \"2.6\" kind : extension type : project-shim metadata : name : <name of project shim extension> shims : configurations : <module name (id)> : specVersion : \"2.6\" type : <project type> metadata : name : <project name> <module name (id)> : specVersion : \"2.6\" type : <project type> metadata : name : <project name> dependencies : <module name (id)> : - <module name (id)> - <module name (id)> - <module name (id)> collections : <module name> : modules : <id> : <relative path> <id> : <relative path> <id> : <relative path> \"module name\" refers to the name of the module as identified by the used translator. E.g. when using the npm translator, the name declared in the modules package.json is used here. In most cases, the module name also becomes the internal ID of the project.","title":"Structure"},{"location":"pages/extensibility/ProjectShims/#properties","text":"","title":"Properties"},{"location":"pages/extensibility/ProjectShims/#configurations-optional","text":"Used to add configuration to any module. Map of module names. The values represent the configuration that should be applied to the module. Note: Configuration is applied to the module using Object.assign() . This means that existing configuration properties will be overwritten.","title":"configurations (optional)"},{"location":"pages/extensibility/ProjectShims/#dependencies-optional","text":"Used to add dependencies to any module. Map of module names. The value is an array of module names that this module depends on. Note that the other modules need to be part of the dependency tree of the root project (not as direct children, just somewhere).","title":"dependencies (optional)"},{"location":"pages/extensibility/ProjectShims/#collections-optional","text":"Used when a dependency contains multiple modules. Also referred to as a Monorepo . Map of module names. The values are objects with collection-specific configuration: - modules : Map of project IDs and their relative file system paths inside the collection module. The project ID does not have to match the actual module name (as for instance defined in the modules package.json ). UI5 Project will use it in place of a module name.","title":"collections (optional)"},{"location":"pages/extensibility/ProjectShims/#example-a","text":"An application \"my-application\" defines a npm dependency to lodash in its package.json and configures it by using a project-shim extension added to its ui5.yaml . ui5.yaml specVersion : \"2.6\" type : application metadata : name : my.application --- # Everything below this line could also be put into the ui5.yaml of a standalone extension module specVersion : \"2.6\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : # name as defined in package.json specVersion : \"2.6\" type : module # Use module type metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" # map root directory of lodash module","title":"Example A:"},{"location":"pages/extensibility/ProjectShims/#example-b","text":"An application \"application.a\" depends on a library \"legacy.library.a\" which does not contain a ui5.yaml or package.json yet (nor do its dependencies).","title":"Example B:"},{"location":"pages/extensibility/ProjectShims/#structure-of-the-legacy-library-directories-two-repositories","text":"legacy-libs/ \\_ src/ \\_ library.a/ \\_ src/ \\_ test/ \\_ library.b/ \\_ src/ \\_ test/ legacy-library-x/ \\_ src/ \\_ test/","title":"Structure of the legacy library directories (two repositories)"},{"location":"pages/extensibility/ProjectShims/#dependencies-between-the-legacy-libraries","text":"legacy.library.a depends on legacy.library.b legacy.library.a depends on legacy.library.x legacy.library.b depends on legacy.library.x","title":"Dependencies between the legacy libraries"},{"location":"pages/extensibility/ProjectShims/#applicationa","text":"Directory structure application-a/ \\_ node_modules/ \\_ legacy-libs/ \\_ legacy-library-x/ \\_ webapp/ \\_ ui5.yaml \\_ package.json package.json (extract) napa can install git repositories that are lacking a package.json with npm. Within ui5-project , the npm translator already detects dependencies defined in the napa section of a package.json and tries to resolve them. { \"scripts\" : { \"install\" : \"napa\" }, \"napa\" : { \"legacy-libs\" : \"<git-repository-url>\" , \"legacy-library-x\" : \"<git-repository-url>\" } } ui5.yaml The shim defined in the application configures the legacy libraries and defines their dependencies. This shim might as well be a standalone module that is added to the applications dependencies. That would be the typical reuse scenario for shims. specVersion : \"2.6\" type : application metadata : name : application.a ---- specVersion : \"2.6\" kind : extension type : project-shim metadata : name : legacy-lib-shims shims : configurations : legacy-library-a : specVersion : \"2.6\" type : library metadata : name : legacy.library.a legacy-library-b : specVersion : \"2.6\" type : library metadata : name : legacy.library.b legacy-library-x : specVersion : \"2.6\" type : library metadata : name : legacy.library.x dependencies : legacy-library-a : - legacy-library-b - legacy-library-x legacy-library-b : - legacy-library-x collections : legacy-libs : modules : legacy-library-a : src/library.a legacy-library-b : src/library.b","title":"application.a"},{"location":"updates/migrate-v1/","text":"Migrate to v1 \u00b6 v1.0.0 is the first stable release of the UI5 Tooling. There are only a few notable changes to the 0.x alpha version. Breaking changes \u00b6 ui5-builder: Add transformation of apps index.html in self-contained build ( SAP/ui5-builder#137 ) When running a self-contained build on an application project, the index.html will be transformed by adopting the UI5 bootstrap script tag to load the custom bundle file instead. ui5-project: normalizer: Rename optional parameter \"translator\" ( SAP/ui5-project#96 ) Renamed parameter \"translator\" of functions generateDependencyTree and generateProjectTree to \"translatorName\" ui5-fs: Remove top-level access to adapters ( SAP/ui5-fs#69 ) Adapters \"AbstractAdapter\", \"FileSystem\" and \"Memory\" used to be accessible via the top-level export of index.js Example: require ( \"@ui5/project\" ). FileSystem This is no longer possible. Adapters are now grouped in the top-level object \"adapters\" and can be accessed from there Example: require ( \"@ui5/project\" ). adapters . FileSystem How to upgrade \u00b6 Global installation \u00b6 To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ). Local installation \u00b6 To upgrade the CLI installation within a project you need to run the following command. npm install @ui5/cli@^1 ui5.yaml \u00b6 specVersion: '1.0' \u00b6 We have introduced the specification version 1.0 . New features will only be available for projects with specVersion 1.0 or newer. The specVersion 0.1 will be compatible with the UI5 CLI v1.0.0, but we still recommend to adopt your projects. specVersion : '1.0' metadata : name : <project-name> type : <project-type>","title":"Migrate to v1"},{"location":"updates/migrate-v1/#migrate-to-v1","text":"v1.0.0 is the first stable release of the UI5 Tooling. There are only a few notable changes to the 0.x alpha version.","title":"Migrate to v1"},{"location":"updates/migrate-v1/#breaking-changes","text":"ui5-builder: Add transformation of apps index.html in self-contained build ( SAP/ui5-builder#137 ) When running a self-contained build on an application project, the index.html will be transformed by adopting the UI5 bootstrap script tag to load the custom bundle file instead. ui5-project: normalizer: Rename optional parameter \"translator\" ( SAP/ui5-project#96 ) Renamed parameter \"translator\" of functions generateDependencyTree and generateProjectTree to \"translatorName\" ui5-fs: Remove top-level access to adapters ( SAP/ui5-fs#69 ) Adapters \"AbstractAdapter\", \"FileSystem\" and \"Memory\" used to be accessible via the top-level export of index.js Example: require ( \"@ui5/project\" ). FileSystem This is no longer possible. Adapters are now grouped in the top-level object \"adapters\" and can be accessed from there Example: require ( \"@ui5/project\" ). adapters . FileSystem","title":"Breaking changes"},{"location":"updates/migrate-v1/#how-to-upgrade","text":"","title":"How to upgrade"},{"location":"updates/migrate-v1/#global-installation","text":"To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ).","title":"Global installation"},{"location":"updates/migrate-v1/#local-installation","text":"To upgrade the CLI installation within a project you need to run the following command. npm install @ui5/cli@^1","title":"Local installation"},{"location":"updates/migrate-v1/#ui5yaml","text":"","title":"ui5.yaml"},{"location":"updates/migrate-v1/#specversion-10","text":"We have introduced the specification version 1.0 . New features will only be available for projects with specVersion 1.0 or newer. The specVersion 0.1 will be compatible with the UI5 CLI v1.0.0, but we still recommend to adopt your projects. specVersion : '1.0' metadata : name : <project-name> type : <project-type>","title":"specVersion: '1.0'"},{"location":"updates/migrate-v2/","text":"Migrate to v2 \u00b6 v2.0.0 of the UI5 Tooling was released on April 1, 2020. As a major feature, it introduces the easy consumption of SAPUI5 libraries in UI5 projects. Breaking changes \u00b6 All UI5 Tooling Modules: Require Node.js >= 10 Support for older Node.js releases has been dropped. UI5 Builder: Make namespace mandatory for application and library projects ( SAP/ui5-builder#430 ) The UI5 Tooling must be able to determine an application- or library project's namespace. Otherwise an error is thrown. Ideally the namespace should be defined in the sap.app/id field of the manifest.json In case of libraries, additional fallbacks are in place: The name attribute defined in the .library file The path of the library.js file UI5 Builder: LibraryFormatter: Ignore manifest.json of nested apps ( SAP/ui5-builder#392 ) If a library contains both a manifest.json and a .library file, they must be located in the same directory. Otherwise the manifest.json is ignored. In cases where the manifest.json is located at a higher level or in a different directory at the same level as the .library file, an exception is thrown. UI5 Server: serveResources middleware: Expect *.properties files in UTF-8 by default ( SAP/ui5-server#303 ) For projects of types other than application or library , the UI5 Server now expects *.properties files to be UTF-8 encoded as opposed to ISO-8859-1 before. Note: This change does not affect most projects as *.properties files are typically only located in applications or libraries, for which their project specific configuration is used. UI5 FS: Remove deprecated parameter useNamespaces ( SAP/ui5-fs#223 ) Remove the deprecated parameter useNamespaces from method resourceFactory.createCollectionsForTree . Use the parameter getVirtualBasePathPrefix instead. How to upgrade \u00b6 Global installation \u00b6 To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ). Local installation \u00b6 To upgrade the CLI installation within a project, you need to run the following command: npm install --save-dev @ui5/cli@^2 ui5.yaml \u00b6 specVersion: '2.0' \u00b6 We have introduced the specification version 2.0 . New features will only be available for projects with specVersion 2.0 or newer. Most projects defining specVersion 0.1 or 1.0 can still be used. specVersion : '2.0' metadata : name : <project-name> type : <project-type>","title":"Migrate to v2"},{"location":"updates/migrate-v2/#migrate-to-v2","text":"v2.0.0 of the UI5 Tooling was released on April 1, 2020. As a major feature, it introduces the easy consumption of SAPUI5 libraries in UI5 projects.","title":"Migrate to v2"},{"location":"updates/migrate-v2/#breaking-changes","text":"All UI5 Tooling Modules: Require Node.js >= 10 Support for older Node.js releases has been dropped. UI5 Builder: Make namespace mandatory for application and library projects ( SAP/ui5-builder#430 ) The UI5 Tooling must be able to determine an application- or library project's namespace. Otherwise an error is thrown. Ideally the namespace should be defined in the sap.app/id field of the manifest.json In case of libraries, additional fallbacks are in place: The name attribute defined in the .library file The path of the library.js file UI5 Builder: LibraryFormatter: Ignore manifest.json of nested apps ( SAP/ui5-builder#392 ) If a library contains both a manifest.json and a .library file, they must be located in the same directory. Otherwise the manifest.json is ignored. In cases where the manifest.json is located at a higher level or in a different directory at the same level as the .library file, an exception is thrown. UI5 Server: serveResources middleware: Expect *.properties files in UTF-8 by default ( SAP/ui5-server#303 ) For projects of types other than application or library , the UI5 Server now expects *.properties files to be UTF-8 encoded as opposed to ISO-8859-1 before. Note: This change does not affect most projects as *.properties files are typically only located in applications or libraries, for which their project specific configuration is used. UI5 FS: Remove deprecated parameter useNamespaces ( SAP/ui5-fs#223 ) Remove the deprecated parameter useNamespaces from method resourceFactory.createCollectionsForTree . Use the parameter getVirtualBasePathPrefix instead.","title":"Breaking changes"},{"location":"updates/migrate-v2/#how-to-upgrade","text":"","title":"How to upgrade"},{"location":"updates/migrate-v2/#global-installation","text":"To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ).","title":"Global installation"},{"location":"updates/migrate-v2/#local-installation","text":"To upgrade the CLI installation within a project, you need to run the following command: npm install --save-dev @ui5/cli@^2","title":"Local installation"},{"location":"updates/migrate-v2/#ui5yaml","text":"","title":"ui5.yaml"},{"location":"updates/migrate-v2/#specversion-20","text":"We have introduced the specification version 2.0 . New features will only be available for projects with specVersion 2.0 or newer. Most projects defining specVersion 0.1 or 1.0 can still be used. specVersion : '2.0' metadata : name : <project-name> type : <project-type>","title":"specVersion: '2.0'"},{"location":"updates/migrate-v3/","text":"Migrate to v3 \u00b6 Warning UI5 Tooling v3 is currently in development. Further breaking changes are expected. The latest development version can be installed via npm i --save-dev @ui5/cli@next Node.js and npm Version Support \u00b6 Only Node.js v16.13.2 and npm v8 or higher are supported. Support for older Node.js and npm releases has been dropped. Specification Versions Support \u00b6 Going forward, only projects with Specification Versions 2.0 and higher are supported. In case a legacy specification version is detected, an automatic migration is attempted. This means your old projects might still work. Unless they have non-standard configuration in their ui5.yaml. Changes to @ui5/project and @ui5/builder APIs \u00b6 The normalizer and projectTree APIs have been removed. The builder API has been moved from @ui5/builder to @ui5/project. The JSON based, internal representation of a project dependency tree has been replaced with a graph. This resulted in a major refactoring of @ui5/project and made us change the APIs in an incompatible way. Note The ui5.dependencies package.json configuration becomes obsolete and is ignored in UI5 Tooling v3. dependencies , devDependencies and optionalDependencies are automatically analyzed . If a dependency can be configured as a UI5 project or UI5 Tooling extension, it is added to the graph and it's dependencies are analyzed. Note that devDependencies and optionalDependencies are ignored for all but the current root project. Note that also the @ui5/server API has been changed. Instead of a tree , it now only accepts a graph instance as the first parameter. Migrating Your Code \u00b6 @ui5/project v2 const { normalizer } = require ( \"@ui5/project\" ); const { builder } = require ( \"@ui5/builder\" ); const tree = await normalizer . generateProjectTree ({ cwd : \".\" }); await builder . build ({ tree , destPath : \"./dist\" , buildDependencies : true , }); @ui5/project v3 const { generateProjectGraph } = require ( \"@ui5/project\" ); let graph = await generateProjectGraph . usingNodePackageDependencies ({ cwd : \".\" }); await graph . build ({ destPath : \"./dist\" , includedDependencies : [ \"*\" ], // Parameter \"buildDependencies\" has been removed }); Removal of Standard Tasks and Processors \u00b6 The following tasks have been removed: createDebugFiles uglify The following processors have been removed: debugFileCreator resourceCopier uglifier As a replacement, the new 'minify' task and 'minifier' processor can be used. Note The minify task is executed earlier, before the bundling process takes place. Any existing 'beforeTask' or 'afterTask' configuration of custom tasks might need to be adapted to cater for this change. In addition, the task 'generateVersionInfo' is no longer executed for application projects by default. It can be re-enable by using the --include-task parameter. Updated list of standard tasks: Task Type application Type library Type theme-library escapeNonAsciiCharacters enabled enabled replaceCopyright enabled enabled enabled replaceVersion enabled enabled enabled replaceBuildtime enabled generateJsdoc disabled 1 executeJsdocSdkTransformation disabled 1 ADDED: minify enabled enabled generateFlexChangesBundle enabled generateManifestBundle disabled disabled generateLibraryManifest enabled generateComponentPreload enabled disabled 2 generateLibraryPreload enabled generateStandaloneAppBundle disabled 3 transformBootstrapHtml disabled 3 generateBundle disabled 4 disabled 4 buildThemes enabled enabled generateThemeDesignerResources disabled disabled REMOVED: createDebugFiles enabled enabled REMOVED: uglify enabled enabled generateVersionInfo disabled generateCachebusterInfo disabled generateApiIndex disabled 1 generateResourcesJson disabled disabled disabled Disabled tasks can be activated by certain build modes, the project configuration, or by using the --include-task CLI parameter . See footnotes where given 1 Enabled in jsdoc build, which disables most of the other tasks 2 Enabled for projects defining a component preload configuration 3 Enabled in self-contained build, which disables generateComponentPreload and generateLibraryPreload 4 Enabled for projects defining a bundle configuration","title":"Migrate to v3"},{"location":"updates/migrate-v3/#migrate-to-v3","text":"Warning UI5 Tooling v3 is currently in development. Further breaking changes are expected. The latest development version can be installed via npm i --save-dev @ui5/cli@next","title":"Migrate to v3"},{"location":"updates/migrate-v3/#nodejs-and-npm-version-support","text":"Only Node.js v16.13.2 and npm v8 or higher are supported. Support for older Node.js and npm releases has been dropped.","title":"Node.js and npm Version Support"},{"location":"updates/migrate-v3/#specification-versions-support","text":"Going forward, only projects with Specification Versions 2.0 and higher are supported. In case a legacy specification version is detected, an automatic migration is attempted. This means your old projects might still work. Unless they have non-standard configuration in their ui5.yaml.","title":"Specification Versions Support"},{"location":"updates/migrate-v3/#changes-to-ui5project-and-ui5builder-apis","text":"The normalizer and projectTree APIs have been removed. The builder API has been moved from @ui5/builder to @ui5/project. The JSON based, internal representation of a project dependency tree has been replaced with a graph. This resulted in a major refactoring of @ui5/project and made us change the APIs in an incompatible way. Note The ui5.dependencies package.json configuration becomes obsolete and is ignored in UI5 Tooling v3. dependencies , devDependencies and optionalDependencies are automatically analyzed . If a dependency can be configured as a UI5 project or UI5 Tooling extension, it is added to the graph and it's dependencies are analyzed. Note that devDependencies and optionalDependencies are ignored for all but the current root project. Note that also the @ui5/server API has been changed. Instead of a tree , it now only accepts a graph instance as the first parameter.","title":"Changes to @ui5/project and @ui5/builder APIs"},{"location":"updates/migrate-v3/#migrating-your-code","text":"@ui5/project v2 const { normalizer } = require ( \"@ui5/project\" ); const { builder } = require ( \"@ui5/builder\" ); const tree = await normalizer . generateProjectTree ({ cwd : \".\" }); await builder . build ({ tree , destPath : \"./dist\" , buildDependencies : true , }); @ui5/project v3 const { generateProjectGraph } = require ( \"@ui5/project\" ); let graph = await generateProjectGraph . usingNodePackageDependencies ({ cwd : \".\" }); await graph . build ({ destPath : \"./dist\" , includedDependencies : [ \"*\" ], // Parameter \"buildDependencies\" has been removed });","title":"Migrating Your Code"},{"location":"updates/migrate-v3/#removal-of-standard-tasks-and-processors","text":"The following tasks have been removed: createDebugFiles uglify The following processors have been removed: debugFileCreator resourceCopier uglifier As a replacement, the new 'minify' task and 'minifier' processor can be used. Note The minify task is executed earlier, before the bundling process takes place. Any existing 'beforeTask' or 'afterTask' configuration of custom tasks might need to be adapted to cater for this change. In addition, the task 'generateVersionInfo' is no longer executed for application projects by default. It can be re-enable by using the --include-task parameter. Updated list of standard tasks: Task Type application Type library Type theme-library escapeNonAsciiCharacters enabled enabled replaceCopyright enabled enabled enabled replaceVersion enabled enabled enabled replaceBuildtime enabled generateJsdoc disabled 1 executeJsdocSdkTransformation disabled 1 ADDED: minify enabled enabled generateFlexChangesBundle enabled generateManifestBundle disabled disabled generateLibraryManifest enabled generateComponentPreload enabled disabled 2 generateLibraryPreload enabled generateStandaloneAppBundle disabled 3 transformBootstrapHtml disabled 3 generateBundle disabled 4 disabled 4 buildThemes enabled enabled generateThemeDesignerResources disabled disabled REMOVED: createDebugFiles enabled enabled REMOVED: uglify enabled enabled generateVersionInfo disabled generateCachebusterInfo disabled generateApiIndex disabled 1 generateResourcesJson disabled disabled disabled Disabled tasks can be activated by certain build modes, the project configuration, or by using the --include-task CLI parameter . See footnotes where given 1 Enabled in jsdoc build, which disables most of the other tasks 2 Enabled for projects defining a component preload configuration 3 Enabled in self-contained build, which disables generateComponentPreload and generateLibraryPreload 4 Enabled for projects defining a bundle configuration","title":"Removal of Standard Tasks and Processors"}]}