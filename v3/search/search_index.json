{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UI5 Tooling \u00b6 An open and modular toolchain to develop state-of-the-art applications based on the UI5 framework. Get Started Main Features \u00b6 \ud83d\udcbb UI5 CLI \u00b6 Also see the UI5 CLI Documentation # Global npm install --global @ui5/cli # In your project npm install --save-dev @ui5/cli \u2699\ufe0f Project Setup \u00b6 Configure your project for use with UI5 Tooling. Also see the Configuration Documentation \u276f ui5 init Wrote ui5.yaml: specVersion: '3.0' metadata: name: my-app type: application \ud83d\ude9a Dependency Management \u00b6 UI5 framework dependencies are managed by the tooling. All other dependencies are managed by your favorite node package manager. \u276f ui5 use SAPUI5@1.76.0 Updated configuration written to ui5.yaml This project is now using SAPUI5 version 1.76.0 \u276f ui5 add sap.ui.core sap.m themelib_sap_fiori_3 Updated configuration written to ui5.yaml Added framework libraries sap.ui.core sap.m themelib_sap_fiori_3 as dependencies \ud83c\udfc4 Development Server \u00b6 Start a local development server to work on your project. Also see the Server Documentation \u276f ui5 serve Server started URL: http://localhost:8080 \ud83d\udee0 Build for Production \u00b6 Build an optimized version of your project. Also see the Builder Documentation \u276f ui5 build info graph:helpers:ui5Framework Using OpenUI5 version: 1 .111.1 info ProjectBuilder Preparing build for project my-app info ProjectBuilder Target directory: ./dist info ProjectBuilder Cleaning target directory... info Project 1 of 1 : \u276f Building application project my-app... info my-app \u203a Running task escapeNonAsciiCharacters... info my-app \u203a Running task replaceCopyright... info my-app \u203a Running task replaceVersion... info my-app \u203a Running task minify... info my-app \u203a Running task generateFlexChangesBundle... info my-app \u203a Running task generateComponentPreload... info ProjectBuilder Build succeeded in 296 ms info ProjectBuilder Executing cleanup tasks... \ud83e\uddea Node.js API \u00b6 Most UI5 Tooling modules provide JavaScript APIs for direct consumption in other Node.js projects. This allows you to rely on UI5 Tooling for UI5-specific build functionality and project handling, while creating your own tools to perfectly match the needs of your project. All available APIs are documented in the UI5 Tooling API Reference . ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 import { graphFromPackageDependencies } from \"@ui5/project/graph\" ; async function buildApp ( projectPath , destinationPath ) { const graph = await graphFromPackageDependencies ({ cwd : projectPath }); await graph . build ({ destPath : destinationPath , selfContained : true , excludedTasks : [ \"transformBootstrapHtml\" ], includedDependencies : [ \"*\" ] }); } 1 2 3 4 5 6 7 8 9 10 11 12 13 async function buildApp ( projectPath , destinationPath ) { const { graphFromPackageDependencies } = await import ( \"@ui5/project/graph\" ); const graph = await graphFromPackageDependencies ({ cwd : projectPath }); await graph . build ({ destPath : destinationPath , selfContained : true , excludedTasks : [ \"transformBootstrapHtml\" ], includedDependencies : [ \"*\" ] }); }","title":"Home"},{"location":"#ui5-tooling","text":"An open and modular toolchain to develop state-of-the-art applications based on the UI5 framework. Get Started","title":"UI5 Tooling"},{"location":"#main-features","text":"","title":"Main Features"},{"location":"#ui5-cli","text":"Also see the UI5 CLI Documentation # Global npm install --global @ui5/cli # In your project npm install --save-dev @ui5/cli","title":"\ud83d\udcbb UI5 CLI"},{"location":"#project-setup","text":"Configure your project for use with UI5 Tooling. Also see the Configuration Documentation \u276f ui5 init Wrote ui5.yaml: specVersion: '3.0' metadata: name: my-app type: application","title":"\u2699\ufe0f Project Setup"},{"location":"#dependency-management","text":"UI5 framework dependencies are managed by the tooling. All other dependencies are managed by your favorite node package manager. \u276f ui5 use SAPUI5@1.76.0 Updated configuration written to ui5.yaml This project is now using SAPUI5 version 1.76.0 \u276f ui5 add sap.ui.core sap.m themelib_sap_fiori_3 Updated configuration written to ui5.yaml Added framework libraries sap.ui.core sap.m themelib_sap_fiori_3 as dependencies","title":"\ud83d\ude9a Dependency Management"},{"location":"#development-server","text":"Start a local development server to work on your project. Also see the Server Documentation \u276f ui5 serve Server started URL: http://localhost:8080","title":"\ud83c\udfc4 Development Server"},{"location":"#build-for-production","text":"Build an optimized version of your project. Also see the Builder Documentation \u276f ui5 build info graph:helpers:ui5Framework Using OpenUI5 version: 1 .111.1 info ProjectBuilder Preparing build for project my-app info ProjectBuilder Target directory: ./dist info ProjectBuilder Cleaning target directory... info Project 1 of 1 : \u276f Building application project my-app... info my-app \u203a Running task escapeNonAsciiCharacters... info my-app \u203a Running task replaceCopyright... info my-app \u203a Running task replaceVersion... info my-app \u203a Running task minify... info my-app \u203a Running task generateFlexChangesBundle... info my-app \u203a Running task generateComponentPreload... info ProjectBuilder Build succeeded in 296 ms info ProjectBuilder Executing cleanup tasks...","title":"\ud83d\udee0 Build for Production"},{"location":"#nodejs-api","text":"Most UI5 Tooling modules provide JavaScript APIs for direct consumption in other Node.js projects. This allows you to rely on UI5 Tooling for UI5-specific build functionality and project handling, while creating your own tools to perfectly match the needs of your project. All available APIs are documented in the UI5 Tooling API Reference . ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 import { graphFromPackageDependencies } from \"@ui5/project/graph\" ; async function buildApp ( projectPath , destinationPath ) { const graph = await graphFromPackageDependencies ({ cwd : projectPath }); await graph . build ({ destPath : destinationPath , selfContained : true , excludedTasks : [ \"transformBootstrapHtml\" ], includedDependencies : [ \"*\" ] }); } 1 2 3 4 5 6 7 8 9 10 11 12 13 async function buildApp ( projectPath , destinationPath ) { const { graphFromPackageDependencies } = await import ( \"@ui5/project/graph\" ); const graph = await graphFromPackageDependencies ({ cwd : projectPath }); await graph . build ({ destPath : destinationPath , selfContained : true , excludedTasks : [ \"transformBootstrapHtml\" ], includedDependencies : [ \"*\" ] }); }","title":"\ud83e\uddea Node.js API"},{"location":"Guidelines/","text":"Development Conventions and Guidelines \u00b6 JavaScript Coding Guidelines \u00b6 We enforce code style rules using ESLint . Execute npm run lint to check your code for style issues. You may also find an ESLint integration for your favorite IDE here . Testing \u00b6 Unit testing is based on the ava test-framework. You can run all tests using npm test (this is what our CI will do for all pull requests). During development, you might want to use npm run unit or npm run unit-watch (re-runs tests automatically after file changes) to quickly execute all unit tests and see whether your change just broke one of them. \ud83d\ude09 Git Guidelines \u00b6 No Merge Commits \u00b6 Please use rebase instead of merge to update a branch to the latest main. This helps keeping a clean commit history in the project. Commit Message Style \u00b6 Commit Summary \u00b6 The commit summary is the first line of the commit message. It should be 50-70 characters long. It must be prefixed by [FIX] , [FEATURE] or [INTERNAL] accordingly, followed by the name of the component or module which was the main subject of the change. Use [FIX] for bugfixes. Use [FEATURE] for new features / enhancements. Use [BREAKING] for breaking / incompatible changes. Note: The commit body of a breaking change should also include a paragraph starting with BREAKING CHANGE: . This paragraph will be highlighted in the changelog. Use [DEPENDENCY] for dependency updates that should be mentioned in the changelog. Use [INTERNAL] for all other changes (e.g. refactorings, documentation, etc.). These changes will not be listed in the changelog. Exceptions are changes created by automated processes like releases or dependency updates It must not contain [ or ] anywhere but in the prefix. It shall be written in imperative present tense (as recommended by Git ) Examples: Instead of \"Adding tests for\" or \"I added tests for\" use \"Add tests for\" or \"Add feature xy\" . Commit Body \u00b6 After the commit summary there should be an empty line followed by the commit body. Describe the intention and reasoning of the change If a change fixes an issue reported on GitHub, add the following line to the commit message: Fixes: #<issueNumber> (e.g. Fixes: #42 ) Breaking changes should include a paragraph starting with BREAKING CHANGE: . This paragraph will be highlighted in the changelog. Example \u00b6 [FIX] npm translator: Correct handling of devDependencies - devDevependencies should only be included in certain cases - Was caused by a refactoring Fixes: #42 Fixes: #45 Work on Release Branches \u00b6 Major releases are typically prepared on dedicated branches like next . There are some things to be aware of when working on these branches. Implementing Changes in Multiple Code Lines \u00b6 While working on a new major release (e.g. 5.0.0 ), any fixes or new features implemented on the current (main) code line (e.g. 4.x) should be cherry-picked as [INTERNAL] to the dedicated (pre-)release branch (typically next ). This is to prevent changes declared as [FEATURE] or [FIX] from appearing in the changelog twice, which can be confusing since the new major version has not yet been released and should naturally contain any fixes or features released in any of the preceding releases. Listing them twice might confuse users. Note that our changelog is generated based on all tags of the repository, independent of the currently checked out branch (also see git-chglog/issues/123 ). However, once a new major release becomes current (i.e. \"main\", not a pre-release), any changes applied to multiple code lines should be cherry picked with the original prefix, so that they appear for multiple versions in the changelog.","title":"Development Conventions and Guidelines"},{"location":"Guidelines/#development-conventions-and-guidelines","text":"","title":"Development Conventions and Guidelines"},{"location":"Guidelines/#javascript-coding-guidelines","text":"We enforce code style rules using ESLint . Execute npm run lint to check your code for style issues. You may also find an ESLint integration for your favorite IDE here .","title":"JavaScript Coding Guidelines"},{"location":"Guidelines/#testing","text":"Unit testing is based on the ava test-framework. You can run all tests using npm test (this is what our CI will do for all pull requests). During development, you might want to use npm run unit or npm run unit-watch (re-runs tests automatically after file changes) to quickly execute all unit tests and see whether your change just broke one of them. \ud83d\ude09","title":"Testing"},{"location":"Guidelines/#git-guidelines","text":"","title":"Git Guidelines"},{"location":"Guidelines/#no-merge-commits","text":"Please use rebase instead of merge to update a branch to the latest main. This helps keeping a clean commit history in the project.","title":"No Merge Commits"},{"location":"Guidelines/#commit-message-style","text":"","title":"Commit Message Style"},{"location":"Guidelines/#commit-summary","text":"The commit summary is the first line of the commit message. It should be 50-70 characters long. It must be prefixed by [FIX] , [FEATURE] or [INTERNAL] accordingly, followed by the name of the component or module which was the main subject of the change. Use [FIX] for bugfixes. Use [FEATURE] for new features / enhancements. Use [BREAKING] for breaking / incompatible changes. Note: The commit body of a breaking change should also include a paragraph starting with BREAKING CHANGE: . This paragraph will be highlighted in the changelog. Use [DEPENDENCY] for dependency updates that should be mentioned in the changelog. Use [INTERNAL] for all other changes (e.g. refactorings, documentation, etc.). These changes will not be listed in the changelog. Exceptions are changes created by automated processes like releases or dependency updates It must not contain [ or ] anywhere but in the prefix. It shall be written in imperative present tense (as recommended by Git ) Examples: Instead of \"Adding tests for\" or \"I added tests for\" use \"Add tests for\" or \"Add feature xy\" .","title":"Commit Summary"},{"location":"Guidelines/#commit-body","text":"After the commit summary there should be an empty line followed by the commit body. Describe the intention and reasoning of the change If a change fixes an issue reported on GitHub, add the following line to the commit message: Fixes: #<issueNumber> (e.g. Fixes: #42 ) Breaking changes should include a paragraph starting with BREAKING CHANGE: . This paragraph will be highlighted in the changelog.","title":"Commit Body"},{"location":"Guidelines/#example","text":"[FIX] npm translator: Correct handling of devDependencies - devDevependencies should only be included in certain cases - Was caused by a refactoring Fixes: #42 Fixes: #45","title":"Example"},{"location":"Guidelines/#work-on-release-branches","text":"Major releases are typically prepared on dedicated branches like next . There are some things to be aware of when working on these branches.","title":"Work on Release Branches"},{"location":"Guidelines/#implementing-changes-in-multiple-code-lines","text":"While working on a new major release (e.g. 5.0.0 ), any fixes or new features implemented on the current (main) code line (e.g. 4.x) should be cherry-picked as [INTERNAL] to the dedicated (pre-)release branch (typically next ). This is to prevent changes declared as [FEATURE] or [FIX] from appearing in the changelog twice, which can be confusing since the new major version has not yet been released and should naturally contain any fixes or features released in any of the preceding releases. Listing them twice might confuse users. Note that our changelog is generated based on all tags of the repository, independent of the currently checked out branch (also see git-chglog/issues/123 ). However, once a new major release becomes current (i.e. \"main\", not a pre-release), any changes applied to multiple code lines should be cherry picked with the original prefix, so that they appear for multiple versions in the changelog.","title":"Implementing Changes in Multiple Code Lines"},{"location":"indexJsdoc/","text":"UI5 Tooling API Reference \u00b6 Support \u00b6 Please follow our Contribution Guidelines on how to report an issue. Or chat with us in the #tooling channel of the OpenUI5 Community Slack License \u00b6 This project is licensed under the Apache Software License, Version 2.0 except as noted otherwise in the LICENSE file.","title":"UI5 Tooling API Reference"},{"location":"indexJsdoc/#ui5-tooling-api-reference","text":"","title":"UI5 Tooling API Reference"},{"location":"indexJsdoc/#support","text":"Please follow our Contribution Guidelines on how to report an issue. Or chat with us in the #tooling channel of the OpenUI5 Community Slack","title":"Support"},{"location":"indexJsdoc/#license","text":"This project is licensed under the Apache Software License, Version 2.0 except as noted otherwise in the LICENSE file.","title":"License"},{"location":"pages/Benchmarking/","text":"Benchmarking UI5 Tooling \u00b6 For benchmarking UI5 Tooling we typically make use of the open source tool hyperfine . In general we only benchmark calls to the UI5 CLI. However, we might add scripted benchmarks for some components in the future. The following is a walk-through on how to evaluate the performance impact of an imaginary change in the UI5 Builder project. Setup \u00b6 Install hyperfine Prepare the UI5 Tooling projects you want to measure (optional if your development environment already reflects this) : Start in an empty directory mkdir ui5-tooling-benchmark && cd ui5-tooling-benchmark/ Clone UI5 CLI git clone git@github.com:SAP/ui5-cli.git Clone UI5 Builder (or your fork) git clone git@github.com:SAP/ui5-builder.git Make sure you check out the main branch, since we'll perform the baseline test first Install npm dependencies in both directories ( cd ui5-cli && npm install ) ( cd ui5-builder && npm install ) Create global npm links for both projects ( cd ui5-cli && npm link ) ( cd ui5-builder && npm link ) Link UI5 Builder into UI5 CLI ( cd ui5-cli && npm link @ui5/builder ) Verify your setup ui5 --version This should output the version and location of the UI5 CLI you just cloned. For example: 3.0.0 (from /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs) Prepare your test project (we choose the openui5-sample-app ) Clone the project git clone git@github.com:SAP/openui5-sample-app.git Navigate into the project cd openui5-sample-app Install any required npm dependencies npm install Note: We won't link UI5 CLI into this project. Instead, we'll call it directly. Verify that the previously installed UI5 CLI can be called with the following command: UI5_CLI_NO_LOCAL = X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs --version On Windows: set UI5_CLI_NO_LOCAL = X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs --version (Replace the path to ui5.cjs with the one shown in the previous ui5 --version output) Benchmarking \u00b6 Depending on how reliable you'd like the measurements to be, consider preparing your system: Connect your computer to a power supply Make sure no updates or anti-virus scans are taking place Close all applications. This includes your IDE, since it might start indexing any new files created during the build, thus impacting I/O Don't interact with your system wile the benchmarking is running Perform the baseline measurement In the project, start your first benchmark hyperfine --warmup 1 \\ 'UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build' \\ --export-markdown ./baseline.md On Windows: hyperfine --warmup 1 \\ 'set UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build' \\ --export-markdown ./baseline.md Your baseline benchmark is now stored in baseline.md and should look similar to this: Command Mean [s] Min [s] Max [s] Relative UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build 1.439 \u00b1 0.036 1.400 1.507 1.00 Prepare your change Switch to the branch that contains your change ( cd ../ui5-builder && git checkout my-change ) If your change requires different npm dependencies, reinstall them ( cd ../ui5-builder && npm install ) The link from UI5 CLI is still in place. However, if you have changes in multiple UI5 Tooling modules, you might need to npm link those again Perform the change measurement In the project, start your second benchmark hyperfine --warmup 1 \\ 'UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build' \\ --export-markdown ./my_change.md On Windows: hyperfine --warmup 1 \\ 'set UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build' \\ --export-markdown ./my_change.md Your change's benchmark is now stored in my_change.md Compile Results \u00b6 Merge both measurements into one markdown In this setup, Hyperfine can't correctly calculate the relative difference between results. The respective column always reads \"1\". Either remove the \"Relative\" column or calculate the relative difference yourself: Use this formula to calculate the percentage increase based on the Mean result: (newMean - baselineMean) / baselineMean * 100 JavaScript function: function calcDiff ( baseVal , newVal ) { return ( newVal - baseVal ) / baseVal * 100 ;} Example for a performance improvement: Baseline of 10 seconds decreased to 7 seconds: (7-10)/10*100 = -30 => -30% change Example for a performance deterioration: Baseline of 10 seconds increased to 12 seconds: (12-10)/10*100 = 20 => +20% change Change the unit in the Mean/Min/Max column headers to seconds or milliseconds according to your results. Change the command column to only contain the relevant ui5 build command, including any parameters. E.g. ui5 build --all You should end up with a markdown like this: ui5-builder Ref | Command | Mean [s] | Min [s] | Max [s] | Relative |:---|:---|---:|---:|---:|---:| | main ([`1234567`](https://github.com/SAP/ui5-builder/commit/<sha>)) | `ui5 build` | 1.439 \u00b1 0.036 | 1.400 | 1.507 | Baseline | | feature-duck ([`9101112`](https://github.com/SAP/ui5-builder/commit/<sha>)) | `ui5 build` | 1.584 \u00b1 0.074 | 1.477 | 1.680 | **+10%** | Rendering like this: ui5-builder Ref Command Mean [s] Min [s] Max [s] Relative main ( 1234567 ) ui5 build 1.439 \u00b1 0.036 1.400 1.507 Baseline feature-duck ( 9101112 ) ui5 build 1.584 \u00b1 0.074 1.477 1.680 +10% You can now share these results on GitHub or wherever you might need them. Happy benchmarking! \ud83c\udfce","title":"Benchmarking"},{"location":"pages/Benchmarking/#benchmarking-ui5-tooling","text":"For benchmarking UI5 Tooling we typically make use of the open source tool hyperfine . In general we only benchmark calls to the UI5 CLI. However, we might add scripted benchmarks for some components in the future. The following is a walk-through on how to evaluate the performance impact of an imaginary change in the UI5 Builder project.","title":"Benchmarking UI5 Tooling"},{"location":"pages/Benchmarking/#setup","text":"Install hyperfine Prepare the UI5 Tooling projects you want to measure (optional if your development environment already reflects this) : Start in an empty directory mkdir ui5-tooling-benchmark && cd ui5-tooling-benchmark/ Clone UI5 CLI git clone git@github.com:SAP/ui5-cli.git Clone UI5 Builder (or your fork) git clone git@github.com:SAP/ui5-builder.git Make sure you check out the main branch, since we'll perform the baseline test first Install npm dependencies in both directories ( cd ui5-cli && npm install ) ( cd ui5-builder && npm install ) Create global npm links for both projects ( cd ui5-cli && npm link ) ( cd ui5-builder && npm link ) Link UI5 Builder into UI5 CLI ( cd ui5-cli && npm link @ui5/builder ) Verify your setup ui5 --version This should output the version and location of the UI5 CLI you just cloned. For example: 3.0.0 (from /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs) Prepare your test project (we choose the openui5-sample-app ) Clone the project git clone git@github.com:SAP/openui5-sample-app.git Navigate into the project cd openui5-sample-app Install any required npm dependencies npm install Note: We won't link UI5 CLI into this project. Instead, we'll call it directly. Verify that the previously installed UI5 CLI can be called with the following command: UI5_CLI_NO_LOCAL = X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs --version On Windows: set UI5_CLI_NO_LOCAL = X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs --version (Replace the path to ui5.cjs with the one shown in the previous ui5 --version output)","title":"Setup"},{"location":"pages/Benchmarking/#benchmarking","text":"Depending on how reliable you'd like the measurements to be, consider preparing your system: Connect your computer to a power supply Make sure no updates or anti-virus scans are taking place Close all applications. This includes your IDE, since it might start indexing any new files created during the build, thus impacting I/O Don't interact with your system wile the benchmarking is running Perform the baseline measurement In the project, start your first benchmark hyperfine --warmup 1 \\ 'UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build' \\ --export-markdown ./baseline.md On Windows: hyperfine --warmup 1 \\ 'set UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build' \\ --export-markdown ./baseline.md Your baseline benchmark is now stored in baseline.md and should look similar to this: Command Mean [s] Min [s] Max [s] Relative UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build 1.439 \u00b1 0.036 1.400 1.507 1.00 Prepare your change Switch to the branch that contains your change ( cd ../ui5-builder && git checkout my-change ) If your change requires different npm dependencies, reinstall them ( cd ../ui5-builder && npm install ) The link from UI5 CLI is still in place. However, if you have changes in multiple UI5 Tooling modules, you might need to npm link those again Perform the change measurement In the project, start your second benchmark hyperfine --warmup 1 \\ 'UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build' \\ --export-markdown ./my_change.md On Windows: hyperfine --warmup 1 \\ 'set UI5_CLI_NO_LOCAL=X node /my/home/ui5-tooling-benchmark/ui5-cli/bin/ui5.cjs build' \\ --export-markdown ./my_change.md Your change's benchmark is now stored in my_change.md","title":"Benchmarking"},{"location":"pages/Benchmarking/#compile-results","text":"Merge both measurements into one markdown In this setup, Hyperfine can't correctly calculate the relative difference between results. The respective column always reads \"1\". Either remove the \"Relative\" column or calculate the relative difference yourself: Use this formula to calculate the percentage increase based on the Mean result: (newMean - baselineMean) / baselineMean * 100 JavaScript function: function calcDiff ( baseVal , newVal ) { return ( newVal - baseVal ) / baseVal * 100 ;} Example for a performance improvement: Baseline of 10 seconds decreased to 7 seconds: (7-10)/10*100 = -30 => -30% change Example for a performance deterioration: Baseline of 10 seconds increased to 12 seconds: (12-10)/10*100 = 20 => +20% change Change the unit in the Mean/Min/Max column headers to seconds or milliseconds according to your results. Change the command column to only contain the relevant ui5 build command, including any parameters. E.g. ui5 build --all You should end up with a markdown like this: ui5-builder Ref | Command | Mean [s] | Min [s] | Max [s] | Relative |:---|:---|---:|---:|---:|---:| | main ([`1234567`](https://github.com/SAP/ui5-builder/commit/<sha>)) | `ui5 build` | 1.439 \u00b1 0.036 | 1.400 | 1.507 | Baseline | | feature-duck ([`9101112`](https://github.com/SAP/ui5-builder/commit/<sha>)) | `ui5 build` | 1.584 \u00b1 0.074 | 1.477 | 1.680 | **+10%** | Rendering like this: ui5-builder Ref Command Mean [s] Min [s] Max [s] Relative main ( 1234567 ) ui5 build 1.439 \u00b1 0.036 1.400 1.507 Baseline feature-duck ( 9101112 ) ui5 build 1.584 \u00b1 0.074 1.477 1.680 +10% You can now share these results on GitHub or wherever you might need them. Happy benchmarking! \ud83c\udfce","title":"Compile Results"},{"location":"pages/Builder/","text":"UI5 Builder \u00b6 The UI5 Builder module takes care of building your project. Based on a project's type, the UI5 Builder defines a series of build steps to execute; these are also called \"tasks\". For every type there is a set of default tasks. You can disable single tasks using the --exclude-task CLI parameter , and you can include tasks using the --include-task parameter. API Reference Types \u00b6 Types define how a project can be configured and how it is built. A type orchestrates a set of tasks and defines the order in which they get applied during build phase. Furthermore, it takes care of formatting and validating the project-specific configuration. Also see UI5 Project: Configuration application \u00b6 Projects of type application are typically the main or root project. In a projects dependency tree, there should only be one project of type application . If multiple are found, those further away from the root are ignored. The source directory of an application (typically named webapp ) is mapped to the virtual root path / . An applications source directory may or may not contain a Component.js file. If it does, it must also contain a manifest.json file. If there is a Component.js file, an optimized Component-preload.js file will be generated during the build. library \u00b6 UI5 libraries are often referred to as reuse-, custom- or control libraries . They are a key component in sharing code across multiple projects in UI5. A project of type library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. These directories should contain a directory structure representing the namespace of the library (e.g. src/my/first/library ) to prevent name clashes between the resources of different libraries. theme-library \u00b6 Available since Specification Version 1.1 UI5 theme libraries provide theming resources for the controls of one or multiple libraries. A project of type theme-library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. The source directory must contain a directory structure representing the namespaces of the libraries it provides theme resources for. For example, a theme library named my_custom_theme , providing resources for a library named my.library should have these resources in a directory path my/library/themes/my_custom_theme/ . module \u00b6 The module type is meant for usage with non-UI5 resources like third-party libraries. Their path mapping can be configured freely. During a build, their resources are copied without modifications. Tasks \u00b6 Tasks are specific build steps to be executed during build phase. They are responsible for collecting resources which can be modified by a processor. A task configures one or more processors and supplies them with the collected resources. After the respective processor processed the resources, the task is able to continue with its workflow. A project can add custom tasks to the build by using the Custom Tasks Extensibility . Standard Tasks \u00b6 All available standard tasks are documented in the API reference . Search for @ui5/builder/tasks/ to filter the API reference for all available tasks. The list below offers the actual order of their execution: Task Type application Type library Type theme-library escapeNonAsciiCharacters enabled enabled replaceCopyright enabled enabled enabled replaceVersion enabled enabled enabled replaceBuildtime enabled generateJsdoc disabled 1 executeJsdocSdkTransformation disabled 1 minify enabled enabled generateFlexChangesBundle enabled generateLibraryManifest enabled generateComponentPreload enabled disabled 2 generateLibraryPreload enabled generateStandaloneAppBundle disabled 3 transformBootstrapHtml disabled 3 generateBundle disabled 4 disabled 4 buildThemes enabled enabled generateThemeDesignerResources disabled 5 disabled 5 generateVersionInfo disabled 1 generateCachebusterInfo disabled generateApiIndex disabled 1 generateResourcesJson disabled disabled disabled Disabled tasks can be activated by certain build modes, the project configuration, or by using the --include-task CLI parameter . See footnotes where given 1 Enabled in jsdoc build, which disables most of the other tasks 2 Enabled for projects defining a component preload configuration 3 Enabled in self-contained build, which disables generateComponentPreload and generateLibraryPreload 4 Enabled for projects defining a bundle configuration 5 Can be enabled for framework projects via the includeTask option. For other projects, this task is skipped Processors \u00b6 Processors work with provided resources. They contain the actual build step logic to apply specific modifications to supplied resources, or to make use of the resources' content to create new resources out of that. Processors can be implemented generically. The string replacer is an example for that. Since string replacement is a common build step, it can be useful in different contexts, e.g. code, version, date, and copyright replacement. A concrete replacement operation could be achieved by passing a custom configuration to the processor. This way, multiple tasks can make use of the same processor to achieve their build step. To get a list of all available processors, please visit the API reference and search for @ui5/builder/processors/ . Legacy Bundle Tooling (lbt) \u00b6 JavaScript port of the \"legacy\" Maven/Java based bundle tooling.","title":"Builder"},{"location":"pages/Builder/#ui5-builder","text":"The UI5 Builder module takes care of building your project. Based on a project's type, the UI5 Builder defines a series of build steps to execute; these are also called \"tasks\". For every type there is a set of default tasks. You can disable single tasks using the --exclude-task CLI parameter , and you can include tasks using the --include-task parameter. API Reference","title":"UI5 Builder"},{"location":"pages/Builder/#types","text":"Types define how a project can be configured and how it is built. A type orchestrates a set of tasks and defines the order in which they get applied during build phase. Furthermore, it takes care of formatting and validating the project-specific configuration. Also see UI5 Project: Configuration","title":"Types"},{"location":"pages/Builder/#application","text":"Projects of type application are typically the main or root project. In a projects dependency tree, there should only be one project of type application . If multiple are found, those further away from the root are ignored. The source directory of an application (typically named webapp ) is mapped to the virtual root path / . An applications source directory may or may not contain a Component.js file. If it does, it must also contain a manifest.json file. If there is a Component.js file, an optimized Component-preload.js file will be generated during the build.","title":"application"},{"location":"pages/Builder/#library","text":"UI5 libraries are often referred to as reuse-, custom- or control libraries . They are a key component in sharing code across multiple projects in UI5. A project of type library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. These directories should contain a directory structure representing the namespace of the library (e.g. src/my/first/library ) to prevent name clashes between the resources of different libraries.","title":"library"},{"location":"pages/Builder/#theme-library","text":"Available since Specification Version 1.1 UI5 theme libraries provide theming resources for the controls of one or multiple libraries. A project of type theme-library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. The source directory must contain a directory structure representing the namespaces of the libraries it provides theme resources for. For example, a theme library named my_custom_theme , providing resources for a library named my.library should have these resources in a directory path my/library/themes/my_custom_theme/ .","title":"theme-library"},{"location":"pages/Builder/#module","text":"The module type is meant for usage with non-UI5 resources like third-party libraries. Their path mapping can be configured freely. During a build, their resources are copied without modifications.","title":"module"},{"location":"pages/Builder/#tasks","text":"Tasks are specific build steps to be executed during build phase. They are responsible for collecting resources which can be modified by a processor. A task configures one or more processors and supplies them with the collected resources. After the respective processor processed the resources, the task is able to continue with its workflow. A project can add custom tasks to the build by using the Custom Tasks Extensibility .","title":"Tasks"},{"location":"pages/Builder/#standard-tasks","text":"All available standard tasks are documented in the API reference . Search for @ui5/builder/tasks/ to filter the API reference for all available tasks. The list below offers the actual order of their execution: Task Type application Type library Type theme-library escapeNonAsciiCharacters enabled enabled replaceCopyright enabled enabled enabled replaceVersion enabled enabled enabled replaceBuildtime enabled generateJsdoc disabled 1 executeJsdocSdkTransformation disabled 1 minify enabled enabled generateFlexChangesBundle enabled generateLibraryManifest enabled generateComponentPreload enabled disabled 2 generateLibraryPreload enabled generateStandaloneAppBundle disabled 3 transformBootstrapHtml disabled 3 generateBundle disabled 4 disabled 4 buildThemes enabled enabled generateThemeDesignerResources disabled 5 disabled 5 generateVersionInfo disabled 1 generateCachebusterInfo disabled generateApiIndex disabled 1 generateResourcesJson disabled disabled disabled Disabled tasks can be activated by certain build modes, the project configuration, or by using the --include-task CLI parameter . See footnotes where given 1 Enabled in jsdoc build, which disables most of the other tasks 2 Enabled for projects defining a component preload configuration 3 Enabled in self-contained build, which disables generateComponentPreload and generateLibraryPreload 4 Enabled for projects defining a bundle configuration 5 Can be enabled for framework projects via the includeTask option. For other projects, this task is skipped","title":"Standard Tasks"},{"location":"pages/Builder/#processors","text":"Processors work with provided resources. They contain the actual build step logic to apply specific modifications to supplied resources, or to make use of the resources' content to create new resources out of that. Processors can be implemented generically. The string replacer is an example for that. Since string replacement is a common build step, it can be useful in different contexts, e.g. code, version, date, and copyright replacement. A concrete replacement operation could be achieved by passing a custom configuration to the processor. This way, multiple tasks can make use of the same processor to achieve their build step. To get a list of all available processors, please visit the API reference and search for @ui5/builder/processors/ .","title":"Processors"},{"location":"pages/Builder/#legacy-bundle-tooling-lbt","text":"JavaScript port of the \"legacy\" Maven/Java based bundle tooling.","title":"Legacy Bundle Tooling (lbt)"},{"location":"pages/CLI/","text":"UI5 CLI \u00b6 Requirements \u00b6 Node.js Version v16.18.0, v18.12.0 or higher npm Version v8.0.0 or higher Installation \u00b6 Install the CLI using the npm package manager: npm install --global @ui5/cli # Verify installation ui5 --help Usage/Syntax \u00b6 ui5 <command> [options] The CLI automatically checks for updates using update-notifier . While this is skipped in CI environments, you might also opt-out manually by following the steps described here . Common options \u00b6 These options you can use with each command. Option Description Details -h, --help Show help [boolean] -v, --version Show version number [boolean] -c, --config Path to project configuration file in YAML format [string] --dependency-definition Path to a YAML file containing the project's dependency tree. This option will disable resolution of node package dependencies. [string] --workspace-config Path to workspace configuration file in YAML format [string] -w, --workspace Name of the workspace configuration to use [string] [default: \"default\"] --loglevel, --log-level Set the logging level [string] [choices: \"silent\", \"error\", \"warn\", \"info\", \"perf\", \"verbose\", \"silly\"] [default: \"info\"] --verbose Enable verbose logging. [boolean] [default: false] --perf Enable performance measurements and related logging. [boolean] [default: false] --silent Disable all log output. [boolean] [default: false] Examples \u00b6 Execute command using a static dependency tree instead of resolving node package dependencies ui5 <command> --dependency-definition /path/to/projectDependencies.yaml Execute command using a project configuration from custom path ui5 <command> --config /path/to/ui5.yaml Execute command using the 'dolphin' workspace of a ui5-workspace.yaml ui5 <command> --workspace dolphin Execute command with the maximum log output ui5 <command> --log-level silly Commands \u00b6 ui5 add \u00b6 Description Add SAPUI5/OpenUI5 framework libraries to the project configuration. Usage ui5 add [--development] [--optional] <framework-libraries..> Options Option Description Details -D, --development, --dev Add as development dependency [boolean] [default: false] -O, --optional Add as optional dependency [boolean] [default: false] Positionals Positional Description Details framework-libraries Framework library names [array] [required] [default: []] Examples Add the framework libraries sap.ui.core and sap.m as dependencies ui5 add sap.ui.core sap.m Add the framework library sap.ui.support as development dependency ui5 add -D sap.ui.support Add the framework library themelib_sap_fiori_3 as optional dependency ui5 add --optional themelib_sap_fiori_3 ui5 build \u00b6 Description Build project in current directory Usage ui5 build Child Commands Command Description ui5 build jsdoc Build JSDoc resources ui5 build preload (default) Build project and create preload bundles ui5 build self-contained Build project and create self-contained bundle. Recommended to be used in conjunction with --include-all-dependencies Options Option Description Details -a, --include-all-dependencies, --all Include all dependencies in the build result. This is equivalent to '--include-dependency \"*\"' [boolean] [default: false] --include-dependency A list of dependencies to be included in the build result. You can use the asterisk '*' as an alias for including all dependencies in the build result. The listed dependencies cannot be overruled by dependencies defined in 'exclude-dependency'. The provided name must match with the dependency name shown in 'ui5 ls --flat' [array] --include-dependency-regexp A list of regular expressions defining dependencies to be included in the build result. This list is prioritized like 'include-dependency'. [array] --include-dependency-tree A list of dependencies to be included in the build result. Transitive dependencies are implicitly included and do not need to be part of this list. These dependencies overrule the selection of 'exclude-dependency-tree' but can be overruled by 'exclude-dependency'. [array] --exclude-dependency A list of dependencies to be excluded from the build result. The listed dependencies can be overruled by dependencies defined in 'include-dependency'. The provided name must match with the dependency name shown in 'ui5 ls --flat' [array] --exclude-dependency-regexp A list of regular expressions defining dependencies to be excluded from the build result. This list is prioritized like 'exclude-dependency'. [array] --exclude-dependency-tree A list of dependencies to be excluded from the build result. Transitive dependencies are implicitly included and do not need to be part of this list. [array] --dest Path of build destination [string] [default: \"./dist\"] --clean-dest If present, clean the destination directory before building [boolean] [default: false] --create-build-manifest Store build metadata in a '.ui5' directory in the build destination, allowing reuse of the build result in other builds [boolean] [default: false] --include-task A list of tasks to be added to the default execution set. This option takes precedence over any excludes. [array] --exclude-task A list of tasks to be excluded from the default task execution set [array] --framework-version Overrides the framework version defined by the project [string] --cache-mode Cache mode to use when consuming SNAPSHOT versions of framework dependencies. The 'Default' behavior is to invalidate the cache after 9 hours. 'Force' uses the cache only and does not create any requests. 'Off' invalidates any existing cache and updates from the repository [string] [choices: \"Default\", \"Force\", \"Off\"] [default: \"Default\"] --experimental-css-variables Generate CSS variables (css-variables.css, css-variables.source.less) and skeleton (library-skeleton(-RTL).css) for all themes [boolean] [default: false] Examples Preload build for project without dependencies ui5 build Self-contained build for project ui5 build self-contained Build project but only apply the minify- and generateComponentPreload tasks ui5 build --exclude-task=* --include-task=minify generateComponentPreload Build project by applying all default tasks including the minify task and excluding the generateComponentPreload task ui5 build --include-task=minify --exclude-task=generateComponentPreload Preload build with experimental CSS variables artifacts ui5 build --experimental-css-variables ui5 config \u00b6 Description Get and set UI5 Tooling configuration options Usage ui5 config Child Commands Command Description ui5 config set [value] Set the value for a given configuration key. Clear an existing configuration by omitting the value ui5 config get Get the value for a given configuration key ui5 config list Display the current configuration Examples Set a value for the mavenSnapshotEndpointUrl configuration ui5 config set mavenSnapshotEndpointUrl http://example.com/snapshots/ Unset the current value of the mavenSnapshotEndpointUrl configuration ui5 config set mavenSnapshotEndpointUrl ui5 init \u00b6 Description Initialize the UI5 Tooling configuration for an application or library project. Usage ui5 init ui5 remove \u00b6 Description Remove SAPUI5/OpenUI5 framework libraries from the project configuration. Usage ui5 remove <framework-libraries..> Positionals Positional Description Details framework-libraries Framework library names [array] [required] [default: []] Examples Remove the framework libraries sap.ui.core and sap.m as dependencies ui5 remove sap.ui.core sap.m ui5 serve \u00b6 Description Start a web server for the current project Usage ui5 serve Options Option Description Details -p, --port Port to bind on (default for HTTP: 8080, HTTP/2: 8443) [number] -o, --open Open web server root directory in default browser. Optionally, supplied relative path will be appended to the root URL [string] --h2 Shortcut for enabling the HTTP/2 protocol for the web server [boolean] [default: false] --simple-index Use a simplified view for the server directory listing [boolean] [default: false] --accept-remote-connections Accept remote connections. By default the server only accepts connections from localhost [boolean] [default: false] --key Path to the private key [string] [default: \"/home/runner/.ui5/server/server.key\"] --cert Path to the certificate [string] [default: \"/home/runner/.ui5/server/server.crt\"] --sap-csp-policies Always send content security policies 'sap-target-level-1' and 'sap-target-level-3' in report-only mode [boolean] [default: false] --serve-csp-reports Collects and serves CSP reports upon request to '/.ui5/csp/csp-reports.json' [boolean] [default: false] --framework-version Overrides the framework version defined by the project [string] --cache-mode Cache mode to use when consuming SNAPSHOT versions of framework dependencies. The 'Default' behavior is to invalidate the cache after 9 hours. 'Force' uses the cache only and does not create any requests. 'Off' invalidates any existing cache and updates from the repository [string] [choices: \"Default\", \"Force\", \"Off\"] [default: \"Default\"] Examples Start a web server for the current project ui5 serve Enable the HTTP/2 protocol for the web server (requires SSL certificate) ui5 serve --h2 Use the project configuration from a custom path ui5 serve --config /path/to/ui5.yaml Use a static dependency definition file ui5 serve --dependency-definition /path/to/projectDependencies.yaml Listen to port 1337 and launch default browser with http://localhost:1337/test/QUnit.html ui5 serve --port 1337 --open tests/QUnit.html ui5 tree \u00b6 Description Outputs the dependency tree of the current project to stdout. It takes all relevant parameters of ui5 build into account. Usage ui5 tree Options Option Description Details --flat Output a flat list of all dependencies instead of a tree hierarchy [boolean] [default: false] --level Limit the number of levels shown in the tree hierarchy [number] --framework-version Overrides the framework version defined by the project [string] --cache-mode Cache mode to use when consuming SNAPSHOT versions of framework dependencies. The 'Default' behavior is to invalidate the cache after 9 hours. 'Force' uses the cache only and does not create any requests. 'Off' invalidates any existing cache and updates from the repository [string] [choices: \"Default\", \"Force\", \"Off\"] [default: \"Default\"] ui5 use \u00b6 Description Initialize or update the project's framework configuration. Usage ui5 use <framework-info> Positionals Positional Description Details framework-info Framework name, version or both (name@version). Name can be \"SAPUI5\" or \"OpenUI5\" (case-insensitive). Version can be \"latest\" (default), \"1.xx\" or \"1.xx.x\". [string] [required] Examples Use SAPUI5 in the latest available version ui5 use sapui5@latest Use OpenUI5 in the latest available 1.76 patch version ui5 use openui5@1.76 Use the latest available version of the configured framework ui5 use latest Use OpenUI5 in the latest available version ui5 use openui5 ui5 versions \u00b6 Description Shows the versions of all UI5 Tooling modules Usage ui5 versions Local vs. Global Installation \u00b6 In general, we recommend a global installation of the UI5 CLI ( npm install --global @ui5/cli ). However, it makes sense to add the UI5 CLI as a devDependency ( npm install --save-dev @ui5/cli ) to a project's package.json . This ensures that every developer working on the project uses the same version of the UI5 CLI and your continuous integration environments also uses this version. In case you have both, a local installation in one of your projects as well as a global installation, the UI5 CLI will always try to invoke the local installation. This is in part because npm scripts defined in your package.json will also always invoke the local installation. This behavior can be disabled by setting the environment variable UI5_CLI_NO_LOCAL . Example You have a project located in the directory /my-application . You have installed the UI5 CLI globally. In addition, the project's package.json defines a devDependency to @ui5/cli and a start script \"ui5 serve\" . This means there are at least two installations of @ui5/cli on your system. Their versions might not match. This table illustrates which of the two installations is used in different scenarios. Note how the UI5 CLI always tries to prefer the version installed in the project. Current Working Directory Command Global UI5 CLI Local UI5 CLI / ui5 --version enabled /my-application ui5 --version enabled /my-application ui5 serve enabled /my-application UI5_CLI_NO_LOCAL=X ui5 serve enabled /my-application npm start enabled /my-application UI5_CLI_NO_LOCAL=X npm start enabled","title":"UI5 CLI"},{"location":"pages/CLI/#ui5-cli","text":"","title":"UI5 CLI"},{"location":"pages/CLI/#requirements","text":"Node.js Version v16.18.0, v18.12.0 or higher npm Version v8.0.0 or higher","title":"Requirements"},{"location":"pages/CLI/#installation","text":"Install the CLI using the npm package manager: npm install --global @ui5/cli # Verify installation ui5 --help","title":"Installation"},{"location":"pages/CLI/#usagesyntax","text":"ui5 <command> [options] The CLI automatically checks for updates using update-notifier . While this is skipped in CI environments, you might also opt-out manually by following the steps described here .","title":"Usage/Syntax"},{"location":"pages/CLI/#common-options","text":"These options you can use with each command. Option Description Details -h, --help Show help [boolean] -v, --version Show version number [boolean] -c, --config Path to project configuration file in YAML format [string] --dependency-definition Path to a YAML file containing the project's dependency tree. This option will disable resolution of node package dependencies. [string] --workspace-config Path to workspace configuration file in YAML format [string] -w, --workspace Name of the workspace configuration to use [string] [default: \"default\"] --loglevel, --log-level Set the logging level [string] [choices: \"silent\", \"error\", \"warn\", \"info\", \"perf\", \"verbose\", \"silly\"] [default: \"info\"] --verbose Enable verbose logging. [boolean] [default: false] --perf Enable performance measurements and related logging. [boolean] [default: false] --silent Disable all log output. [boolean] [default: false]","title":"Common options"},{"location":"pages/CLI/#examples","text":"Execute command using a static dependency tree instead of resolving node package dependencies ui5 <command> --dependency-definition /path/to/projectDependencies.yaml Execute command using a project configuration from custom path ui5 <command> --config /path/to/ui5.yaml Execute command using the 'dolphin' workspace of a ui5-workspace.yaml ui5 <command> --workspace dolphin Execute command with the maximum log output ui5 <command> --log-level silly","title":"Examples"},{"location":"pages/CLI/#commands","text":"","title":"Commands"},{"location":"pages/CLI/#ui5-add","text":"Description Add SAPUI5/OpenUI5 framework libraries to the project configuration. Usage ui5 add [--development] [--optional] <framework-libraries..> Options Option Description Details -D, --development, --dev Add as development dependency [boolean] [default: false] -O, --optional Add as optional dependency [boolean] [default: false] Positionals Positional Description Details framework-libraries Framework library names [array] [required] [default: []] Examples Add the framework libraries sap.ui.core and sap.m as dependencies ui5 add sap.ui.core sap.m Add the framework library sap.ui.support as development dependency ui5 add -D sap.ui.support Add the framework library themelib_sap_fiori_3 as optional dependency ui5 add --optional themelib_sap_fiori_3","title":"ui5 add"},{"location":"pages/CLI/#ui5-build","text":"Description Build project in current directory Usage ui5 build Child Commands Command Description ui5 build jsdoc Build JSDoc resources ui5 build preload (default) Build project and create preload bundles ui5 build self-contained Build project and create self-contained bundle. Recommended to be used in conjunction with --include-all-dependencies Options Option Description Details -a, --include-all-dependencies, --all Include all dependencies in the build result. This is equivalent to '--include-dependency \"*\"' [boolean] [default: false] --include-dependency A list of dependencies to be included in the build result. You can use the asterisk '*' as an alias for including all dependencies in the build result. The listed dependencies cannot be overruled by dependencies defined in 'exclude-dependency'. The provided name must match with the dependency name shown in 'ui5 ls --flat' [array] --include-dependency-regexp A list of regular expressions defining dependencies to be included in the build result. This list is prioritized like 'include-dependency'. [array] --include-dependency-tree A list of dependencies to be included in the build result. Transitive dependencies are implicitly included and do not need to be part of this list. These dependencies overrule the selection of 'exclude-dependency-tree' but can be overruled by 'exclude-dependency'. [array] --exclude-dependency A list of dependencies to be excluded from the build result. The listed dependencies can be overruled by dependencies defined in 'include-dependency'. The provided name must match with the dependency name shown in 'ui5 ls --flat' [array] --exclude-dependency-regexp A list of regular expressions defining dependencies to be excluded from the build result. This list is prioritized like 'exclude-dependency'. [array] --exclude-dependency-tree A list of dependencies to be excluded from the build result. Transitive dependencies are implicitly included and do not need to be part of this list. [array] --dest Path of build destination [string] [default: \"./dist\"] --clean-dest If present, clean the destination directory before building [boolean] [default: false] --create-build-manifest Store build metadata in a '.ui5' directory in the build destination, allowing reuse of the build result in other builds [boolean] [default: false] --include-task A list of tasks to be added to the default execution set. This option takes precedence over any excludes. [array] --exclude-task A list of tasks to be excluded from the default task execution set [array] --framework-version Overrides the framework version defined by the project [string] --cache-mode Cache mode to use when consuming SNAPSHOT versions of framework dependencies. The 'Default' behavior is to invalidate the cache after 9 hours. 'Force' uses the cache only and does not create any requests. 'Off' invalidates any existing cache and updates from the repository [string] [choices: \"Default\", \"Force\", \"Off\"] [default: \"Default\"] --experimental-css-variables Generate CSS variables (css-variables.css, css-variables.source.less) and skeleton (library-skeleton(-RTL).css) for all themes [boolean] [default: false] Examples Preload build for project without dependencies ui5 build Self-contained build for project ui5 build self-contained Build project but only apply the minify- and generateComponentPreload tasks ui5 build --exclude-task=* --include-task=minify generateComponentPreload Build project by applying all default tasks including the minify task and excluding the generateComponentPreload task ui5 build --include-task=minify --exclude-task=generateComponentPreload Preload build with experimental CSS variables artifacts ui5 build --experimental-css-variables","title":"ui5 build"},{"location":"pages/CLI/#ui5-config","text":"Description Get and set UI5 Tooling configuration options Usage ui5 config Child Commands Command Description ui5 config set [value] Set the value for a given configuration key. Clear an existing configuration by omitting the value ui5 config get Get the value for a given configuration key ui5 config list Display the current configuration Examples Set a value for the mavenSnapshotEndpointUrl configuration ui5 config set mavenSnapshotEndpointUrl http://example.com/snapshots/ Unset the current value of the mavenSnapshotEndpointUrl configuration ui5 config set mavenSnapshotEndpointUrl","title":"ui5 config"},{"location":"pages/CLI/#ui5-init","text":"Description Initialize the UI5 Tooling configuration for an application or library project. Usage ui5 init","title":"ui5 init"},{"location":"pages/CLI/#ui5-remove","text":"Description Remove SAPUI5/OpenUI5 framework libraries from the project configuration. Usage ui5 remove <framework-libraries..> Positionals Positional Description Details framework-libraries Framework library names [array] [required] [default: []] Examples Remove the framework libraries sap.ui.core and sap.m as dependencies ui5 remove sap.ui.core sap.m","title":"ui5 remove"},{"location":"pages/CLI/#ui5-serve","text":"Description Start a web server for the current project Usage ui5 serve Options Option Description Details -p, --port Port to bind on (default for HTTP: 8080, HTTP/2: 8443) [number] -o, --open Open web server root directory in default browser. Optionally, supplied relative path will be appended to the root URL [string] --h2 Shortcut for enabling the HTTP/2 protocol for the web server [boolean] [default: false] --simple-index Use a simplified view for the server directory listing [boolean] [default: false] --accept-remote-connections Accept remote connections. By default the server only accepts connections from localhost [boolean] [default: false] --key Path to the private key [string] [default: \"/home/runner/.ui5/server/server.key\"] --cert Path to the certificate [string] [default: \"/home/runner/.ui5/server/server.crt\"] --sap-csp-policies Always send content security policies 'sap-target-level-1' and 'sap-target-level-3' in report-only mode [boolean] [default: false] --serve-csp-reports Collects and serves CSP reports upon request to '/.ui5/csp/csp-reports.json' [boolean] [default: false] --framework-version Overrides the framework version defined by the project [string] --cache-mode Cache mode to use when consuming SNAPSHOT versions of framework dependencies. The 'Default' behavior is to invalidate the cache after 9 hours. 'Force' uses the cache only and does not create any requests. 'Off' invalidates any existing cache and updates from the repository [string] [choices: \"Default\", \"Force\", \"Off\"] [default: \"Default\"] Examples Start a web server for the current project ui5 serve Enable the HTTP/2 protocol for the web server (requires SSL certificate) ui5 serve --h2 Use the project configuration from a custom path ui5 serve --config /path/to/ui5.yaml Use a static dependency definition file ui5 serve --dependency-definition /path/to/projectDependencies.yaml Listen to port 1337 and launch default browser with http://localhost:1337/test/QUnit.html ui5 serve --port 1337 --open tests/QUnit.html","title":"ui5 serve"},{"location":"pages/CLI/#ui5-tree","text":"Description Outputs the dependency tree of the current project to stdout. It takes all relevant parameters of ui5 build into account. Usage ui5 tree Options Option Description Details --flat Output a flat list of all dependencies instead of a tree hierarchy [boolean] [default: false] --level Limit the number of levels shown in the tree hierarchy [number] --framework-version Overrides the framework version defined by the project [string] --cache-mode Cache mode to use when consuming SNAPSHOT versions of framework dependencies. The 'Default' behavior is to invalidate the cache after 9 hours. 'Force' uses the cache only and does not create any requests. 'Off' invalidates any existing cache and updates from the repository [string] [choices: \"Default\", \"Force\", \"Off\"] [default: \"Default\"]","title":"ui5 tree"},{"location":"pages/CLI/#ui5-use","text":"Description Initialize or update the project's framework configuration. Usage ui5 use <framework-info> Positionals Positional Description Details framework-info Framework name, version or both (name@version). Name can be \"SAPUI5\" or \"OpenUI5\" (case-insensitive). Version can be \"latest\" (default), \"1.xx\" or \"1.xx.x\". [string] [required] Examples Use SAPUI5 in the latest available version ui5 use sapui5@latest Use OpenUI5 in the latest available 1.76 patch version ui5 use openui5@1.76 Use the latest available version of the configured framework ui5 use latest Use OpenUI5 in the latest available version ui5 use openui5","title":"ui5 use"},{"location":"pages/CLI/#ui5-versions","text":"Description Shows the versions of all UI5 Tooling modules Usage ui5 versions","title":"ui5 versions"},{"location":"pages/CLI/#local-vs-global-installation","text":"In general, we recommend a global installation of the UI5 CLI ( npm install --global @ui5/cli ). However, it makes sense to add the UI5 CLI as a devDependency ( npm install --save-dev @ui5/cli ) to a project's package.json . This ensures that every developer working on the project uses the same version of the UI5 CLI and your continuous integration environments also uses this version. In case you have both, a local installation in one of your projects as well as a global installation, the UI5 CLI will always try to invoke the local installation. This is in part because npm scripts defined in your package.json will also always invoke the local installation. This behavior can be disabled by setting the environment variable UI5_CLI_NO_LOCAL . Example You have a project located in the directory /my-application . You have installed the UI5 CLI globally. In addition, the project's package.json defines a devDependency to @ui5/cli and a start script \"ui5 serve\" . This means there are at least two installations of @ui5/cli on your system. Their versions might not match. This table illustrates which of the two installations is used in different scenarios. Note how the UI5 CLI always tries to prefer the version installed in the project. Current Working Directory Command Global UI5 CLI Local UI5 CLI / ui5 --version enabled /my-application ui5 --version enabled /my-application ui5 serve enabled /my-application UI5_CLI_NO_LOCAL=X ui5 serve enabled /my-application npm start enabled /my-application UI5_CLI_NO_LOCAL=X npm start enabled","title":"Local vs. Global Installation"},{"location":"pages/CodeAnalysis/","text":"Code Analysis \u00b6 During the build process, UI5 Tooling executes a static code analysis of your project. In the following sections the term \"simple literal\" is used for the following language features: string literals numeric literals Boolean literals null / undefined template literals without any expressions arrays of the previous (spread operators are ignored) object literals with \"simple literals\" used as keys and values (again, spread operators are ignored) Dependency Analysis \u00b6 UI5 Tooling extracts dependency information from a project's code as outlined in the following sections. The APIs described there require the usage of \"simple literals\" when declaring dependencies. JSModule Analyzer \u00b6 The following APIs are analyzed by the JSModule Analyzer: sap.ui.define sap.ui.require jQuery.sap.declare (deprecated) jQuery.sap.require (deprecated) sap.ui.requireSync (deprecated) sap.ui.preload (restricted) sap.ui.require.preload (restricted) The JSModule Analyzer uses the \"Abstract Syntax Tree\" (AST) of a JavaScript file to decide whether a code block is executed conditionally or unconditionally . The analyzer uses a set of rules to decide whether one of the above APIs is called whenever the module is executed or whether the API is only called under certain conditions. For example, top-level code is always executed. Flow-control statements in JavaScript imply that certain blocks of code are only executed under certain conditions (for example, if blocks, else blocks, ...). Besides these inherent JavaScript rules, further common patterns are known to the analyzer, e.g. immediately invoked function expressions or the factory function of AMD modules. Any dependencies found that - according to these rules - are always executed, are collected as eager (or standard) dependencies. Dependencies that are found on a code path that depends on certain conditions are collected as conditional dependencies. The bundling implemented by UI5 Tooling can either follow only eager dependencies ( resolve : true ) or additionally conditional dependencies ( resolveConditional ). For more information, see Custom Bundling . When a dependency in one of the mentioned APIs is not a \"simple literal\" but an expression, the corresponding module is marked as \"having dynamic dependencies\". This marker is currently not further evaluated by the tooling. Component Analyzer \u00b6 The Component Analyzer analyzes JavaScript files named Component.js to collect dependency information by searching for a manifest.json located in the same folder as the Component.js . If one is found, the sap.ui5 section is evaluated in the following way: Any library dependency is added as a dependency to the library.js module of that library. If the library dependency is modeled as 'lazy', the module dependency will be added as 'conditional'. Any component dependency is added as a dependency to a file named Component.js . If the dependency is modeled as 'lazy', the module dependency will be added as 'conditional'. For each UI5 model for which a type is configured, a module dependency to that type is added. For each route that contains a view name, a module dependency to that view is added. Smart Template Analyzer \u00b6 The Smart Template Analyzer analyzes a Smart Template app and its underlying template components to collect dependency information. It searches for a manifest.json located in the same folder as the Component.js . If it is found and if it is valid JSON, an sap.ui.generic.app section is searched and evaluated in the following way: For each page configuration, the configured component is added as a dependency to the template app module. If the page configuration contains a templateName , a dependency to that template view is added to the app. Otherwise, the class definition of the component is analyzed to find a default template view name. If found, a dependency to that view is added to the app module. The template component is analyzed in the following way: precondition: the template component class is defined in an AMD-style module, using define or sap.ui.define precondition: the module sap/suite/ui/generic/template/lib/TemplateAssembler is imported precondition: a call to TemplateAssembler.getTemplateComponent is used to define the component class precondition: that call is used in a top-level return statement of the factory function precondition: necessary parameters to that call are given as an object literal (no further coding) precondition: the settings define a managed property metadata.properties.templateName with a defaultValue of type string The default value of the property represents the template view of the template component. The manifest of the template app could in theory specify an alternative template in component.settings.templateName . XML Template Analyzer \u00b6 The XML Template Analyzer tackles XMLView and XMLFragment . It parses the XML, collects controls, and adds them as dependency to the ModuleInfo object. Additionally, some special dependencies are handled: controller of the view resource bundle (note: as locale-dependent dependencies can't be modelled yet in the ModuleInfo, only a dependency to the development version (aka raw language) of the bundle will be added) component referenced via the ComponentContainer control embedded fragments or views In an XMLView/XMLFragment, usually three categories of element nodes exist: Controls, aggregations, and non-UI5 nodes (e.g. XHTML or SVG). The third category usually can be identified by its namespace. To distinguish between the first two categories, the analyzer checks whether a resource exists in the project or its dependencies whose name matches the qualified node name. For example, if the qualified node name is sap.m.Text , the analyzer checks whether sap/m/Text.js exists. If so, UI5 Tooling detects this node as a control, otherwise as an aggregation. XML Composite Analyzer \u00b6 The XMLComposite control is deprecated since version UI5 1.88. Nevertheless, UI5 Tooling will attempt to analyze the declaration of any such controls in a project. The XML Composite Analyzer searches for the name of the configured fragment containing the XMLComposite control. Name of the XMLComposite is equal to fragment name Dedicated fragment name sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { return XMLComposite . extend ( \"composites.MyComposite\" , {} }); sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { return XMLComposite . extend ( \"composites.MyComposite\" , { fragment : \"composites.custom.MyComposite\" } }); Library Initialization \u00b6 The library.js Analyzer checks every library.js file in the namespace of a library for occurences of a sap/ui/core/Core#initLibrary call. If found, the following information will be placed in the generated manifest.json: noLibraryCSS: false when the noLibraryCSS property had been set in the initLibrary info object types: string array with the names of the types contained in the library controls: string array with the names of the controls defined in the library elements: string array with the names of the elements defined in the library interfaces: string array with the names of the interfaces defined in the library sap/ui/core/Core#initLibrary requires the usage of \"simple literals\" for the parameters passed to this function call. Note: Currently only the usage via the global sap.ui.getCore().initLibrary is supported by this analyzer. Requiring sap/ui/core/Core and then calling Core.initLibrary is not recognized by this analyzer. JSDoc \u00b6 The UI5 Tooling offers a JSDoc build, which is enhanced by UI5-specific JSDoc features. An UI5 SDK can be built locally. To get more insight into the local UI5 SDK build setup, have a look at our Developer's Guide . Currently, the resources needed for a UI5 SDK build are stored in openui5 and in ui5-builder . This double maintenance is needed because these files are not part of the sap.ui.core library artefact, so building JSDoc for any library has no access to the needed resources. It's therefore necessary to have these resources also available in the ui5-builder . This might change in the future. The following artefacts contribute to the JSDoc build: jsdocGenerator.js : Executes the actual JSDoc build. UI5 Tooling wrapper for plugin.cjs . sdkTransformer.js : UI5 Tooling wrapper for transformApiJson.cjs . apiIndexGenerator.js : UI5 Tooling wrapper for createIndexFiles.cjs . createIndexFiles.cjs : Creates API index resources from all api.json resources and by interpreting the sap-ui-version.json available in the given test resources directory. The resulting index resources (e.g. api-index.json , api-index-deprecated.json , api-index-experimental.json and api-index-since.json ) are only to be used in a UI5 SDK. transformApiJson.cjs : Preprocesses api.json files for use in UI5 SDKs. Transforms the api.json as created by the JSDoc build into a pre-processed api.json file suitable for the SDK. The pre-processing includes formatting of type references, rewriting of links, and other time-consuming calculations. plugin.cjs : UI5 plugin for JSDoc3. The plugin adds the following UI5-specific tag definitions to JSDoc3: disclaimer experimental final interface implements ui5-restricted, and more It furthermore listens to the following JSDoc3 events to implement additional functionality: parseBegin: to create short names for all files that are to be parsed fileBegin: to write to the log (a kind of progress indicator) jsdocCommentFound: to pre-process comments, empty lines are used as paragraph markers, a default visibility is added, and legacy tag combinations used in JSDoc2 are converted to JSDoc3 conventions newDoclet parseComplete: remove undocumented/ignored/private doclets or duplicate doclets Last but not least, it implements an astNodeVisitor to detect UI5-specific \"extend\" calls and to create documentation for the properties, aggregations, etc. that are created with the \"extend\" call. publish.cjs : JSDoc3 template for UI5 documentation generation. adds missing namespaces determines the export names of exported APIs writes out the api.json from the collected JSDoc information calculates the inheritance hierarchy checks for cyclic dependencies removes unnecessary whitespace from an HTML document versionUtil.cjs : Provides helper methods to determine version-related information.","title":"Code Analysis"},{"location":"pages/CodeAnalysis/#code-analysis","text":"During the build process, UI5 Tooling executes a static code analysis of your project. In the following sections the term \"simple literal\" is used for the following language features: string literals numeric literals Boolean literals null / undefined template literals without any expressions arrays of the previous (spread operators are ignored) object literals with \"simple literals\" used as keys and values (again, spread operators are ignored)","title":"Code Analysis"},{"location":"pages/CodeAnalysis/#dependency-analysis","text":"UI5 Tooling extracts dependency information from a project's code as outlined in the following sections. The APIs described there require the usage of \"simple literals\" when declaring dependencies.","title":"Dependency Analysis"},{"location":"pages/CodeAnalysis/#jsmodule-analyzer","text":"The following APIs are analyzed by the JSModule Analyzer: sap.ui.define sap.ui.require jQuery.sap.declare (deprecated) jQuery.sap.require (deprecated) sap.ui.requireSync (deprecated) sap.ui.preload (restricted) sap.ui.require.preload (restricted) The JSModule Analyzer uses the \"Abstract Syntax Tree\" (AST) of a JavaScript file to decide whether a code block is executed conditionally or unconditionally . The analyzer uses a set of rules to decide whether one of the above APIs is called whenever the module is executed or whether the API is only called under certain conditions. For example, top-level code is always executed. Flow-control statements in JavaScript imply that certain blocks of code are only executed under certain conditions (for example, if blocks, else blocks, ...). Besides these inherent JavaScript rules, further common patterns are known to the analyzer, e.g. immediately invoked function expressions or the factory function of AMD modules. Any dependencies found that - according to these rules - are always executed, are collected as eager (or standard) dependencies. Dependencies that are found on a code path that depends on certain conditions are collected as conditional dependencies. The bundling implemented by UI5 Tooling can either follow only eager dependencies ( resolve : true ) or additionally conditional dependencies ( resolveConditional ). For more information, see Custom Bundling . When a dependency in one of the mentioned APIs is not a \"simple literal\" but an expression, the corresponding module is marked as \"having dynamic dependencies\". This marker is currently not further evaluated by the tooling.","title":"JSModule Analyzer"},{"location":"pages/CodeAnalysis/#component-analyzer","text":"The Component Analyzer analyzes JavaScript files named Component.js to collect dependency information by searching for a manifest.json located in the same folder as the Component.js . If one is found, the sap.ui5 section is evaluated in the following way: Any library dependency is added as a dependency to the library.js module of that library. If the library dependency is modeled as 'lazy', the module dependency will be added as 'conditional'. Any component dependency is added as a dependency to a file named Component.js . If the dependency is modeled as 'lazy', the module dependency will be added as 'conditional'. For each UI5 model for which a type is configured, a module dependency to that type is added. For each route that contains a view name, a module dependency to that view is added.","title":"Component Analyzer"},{"location":"pages/CodeAnalysis/#smart-template-analyzer","text":"The Smart Template Analyzer analyzes a Smart Template app and its underlying template components to collect dependency information. It searches for a manifest.json located in the same folder as the Component.js . If it is found and if it is valid JSON, an sap.ui.generic.app section is searched and evaluated in the following way: For each page configuration, the configured component is added as a dependency to the template app module. If the page configuration contains a templateName , a dependency to that template view is added to the app. Otherwise, the class definition of the component is analyzed to find a default template view name. If found, a dependency to that view is added to the app module. The template component is analyzed in the following way: precondition: the template component class is defined in an AMD-style module, using define or sap.ui.define precondition: the module sap/suite/ui/generic/template/lib/TemplateAssembler is imported precondition: a call to TemplateAssembler.getTemplateComponent is used to define the component class precondition: that call is used in a top-level return statement of the factory function precondition: necessary parameters to that call are given as an object literal (no further coding) precondition: the settings define a managed property metadata.properties.templateName with a defaultValue of type string The default value of the property represents the template view of the template component. The manifest of the template app could in theory specify an alternative template in component.settings.templateName .","title":"Smart Template Analyzer"},{"location":"pages/CodeAnalysis/#xml-template-analyzer","text":"The XML Template Analyzer tackles XMLView and XMLFragment . It parses the XML, collects controls, and adds them as dependency to the ModuleInfo object. Additionally, some special dependencies are handled: controller of the view resource bundle (note: as locale-dependent dependencies can't be modelled yet in the ModuleInfo, only a dependency to the development version (aka raw language) of the bundle will be added) component referenced via the ComponentContainer control embedded fragments or views In an XMLView/XMLFragment, usually three categories of element nodes exist: Controls, aggregations, and non-UI5 nodes (e.g. XHTML or SVG). The third category usually can be identified by its namespace. To distinguish between the first two categories, the analyzer checks whether a resource exists in the project or its dependencies whose name matches the qualified node name. For example, if the qualified node name is sap.m.Text , the analyzer checks whether sap/m/Text.js exists. If so, UI5 Tooling detects this node as a control, otherwise as an aggregation.","title":"XML Template Analyzer"},{"location":"pages/CodeAnalysis/#xml-composite-analyzer","text":"The XMLComposite control is deprecated since version UI5 1.88. Nevertheless, UI5 Tooling will attempt to analyze the declaration of any such controls in a project. The XML Composite Analyzer searches for the name of the configured fragment containing the XMLComposite control. Name of the XMLComposite is equal to fragment name Dedicated fragment name sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { return XMLComposite . extend ( \"composites.MyComposite\" , {} }); sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { return XMLComposite . extend ( \"composites.MyComposite\" , { fragment : \"composites.custom.MyComposite\" } });","title":"XML Composite Analyzer"},{"location":"pages/CodeAnalysis/#library-initialization","text":"The library.js Analyzer checks every library.js file in the namespace of a library for occurences of a sap/ui/core/Core#initLibrary call. If found, the following information will be placed in the generated manifest.json: noLibraryCSS: false when the noLibraryCSS property had been set in the initLibrary info object types: string array with the names of the types contained in the library controls: string array with the names of the controls defined in the library elements: string array with the names of the elements defined in the library interfaces: string array with the names of the interfaces defined in the library sap/ui/core/Core#initLibrary requires the usage of \"simple literals\" for the parameters passed to this function call. Note: Currently only the usage via the global sap.ui.getCore().initLibrary is supported by this analyzer. Requiring sap/ui/core/Core and then calling Core.initLibrary is not recognized by this analyzer.","title":"Library Initialization"},{"location":"pages/CodeAnalysis/#jsdoc","text":"The UI5 Tooling offers a JSDoc build, which is enhanced by UI5-specific JSDoc features. An UI5 SDK can be built locally. To get more insight into the local UI5 SDK build setup, have a look at our Developer's Guide . Currently, the resources needed for a UI5 SDK build are stored in openui5 and in ui5-builder . This double maintenance is needed because these files are not part of the sap.ui.core library artefact, so building JSDoc for any library has no access to the needed resources. It's therefore necessary to have these resources also available in the ui5-builder . This might change in the future. The following artefacts contribute to the JSDoc build: jsdocGenerator.js : Executes the actual JSDoc build. UI5 Tooling wrapper for plugin.cjs . sdkTransformer.js : UI5 Tooling wrapper for transformApiJson.cjs . apiIndexGenerator.js : UI5 Tooling wrapper for createIndexFiles.cjs . createIndexFiles.cjs : Creates API index resources from all api.json resources and by interpreting the sap-ui-version.json available in the given test resources directory. The resulting index resources (e.g. api-index.json , api-index-deprecated.json , api-index-experimental.json and api-index-since.json ) are only to be used in a UI5 SDK. transformApiJson.cjs : Preprocesses api.json files for use in UI5 SDKs. Transforms the api.json as created by the JSDoc build into a pre-processed api.json file suitable for the SDK. The pre-processing includes formatting of type references, rewriting of links, and other time-consuming calculations. plugin.cjs : UI5 plugin for JSDoc3. The plugin adds the following UI5-specific tag definitions to JSDoc3: disclaimer experimental final interface implements ui5-restricted, and more It furthermore listens to the following JSDoc3 events to implement additional functionality: parseBegin: to create short names for all files that are to be parsed fileBegin: to write to the log (a kind of progress indicator) jsdocCommentFound: to pre-process comments, empty lines are used as paragraph markers, a default visibility is added, and legacy tag combinations used in JSDoc2 are converted to JSDoc3 conventions newDoclet parseComplete: remove undocumented/ignored/private doclets or duplicate doclets Last but not least, it implements an astNodeVisitor to detect UI5-specific \"extend\" calls and to create documentation for the properties, aggregations, etc. that are created with the \"extend\" call. publish.cjs : JSDoc3 template for UI5 documentation generation. adds missing namespaces determines the export names of exported APIs writes out the api.json from the collected JSDoc information calculates the inheritance hierarchy checks for cyclic dependencies removes unnecessary whitespace from an HTML document versionUtil.cjs : Provides helper methods to determine version-related information.","title":"JSDoc"},{"location":"pages/Configuration/","text":"Configuration \u00b6 A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Info This document describes the configuration of UI5 Tooling-based projects and extensions. It represents Specification Version 3.0 . Validation / IDE support \u00b6 Starting with Specification Version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store Catalog which is used by the YAML Language Server . See the list of clients to find extensions for various IDEs and editors. Example \u00b6 specVersion : \"3.0\" type : application|library|theme-library|module metadata : name : some.project.name General Configuration \u00b6 Specification Version and -Type \u00b6 A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1), or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. Example application library theme-library module specVersion : \"3.0\" type : application specVersion : \"3.0\" type : library specVersion : \"3.0\" type : theme-library specVersion : \"3.0\" type : module Kind \u00b6 The configuration may also contain a kind property. This is used to differentiate between projects and extensions. This configuration defaults to kind: project , which means you typically only need to specify it for extensions like Custom Tasks . Metadata \u00b6 Example metadata : name : my.company.project copyright : |- My Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the XYZ License, Version n - see LICENSE.txt. name \u00b6 A project must have a name . In UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like organization.product.project for UI5 projects or ui5-task-heavy-boulder for extension-projects. The name property of projects defining Specification Version 3.0 and higher must satisfy the following conditions: Must be at least 3 characters long Must be no longer than 80 characters Must contain lowercase characters only Must contain alphanumeric characters, dash, underscore and period only Exception: The @ and / characters are allowed at certain positions as explained below Must start with an alphabetic character or an @ character If it starts with an @ character, it must contain exactly one forward slash / This is aligned with the npm concept for package scopes, for example @org/lib.name copyright \u00b6 A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a project's source code. |- is a way to define a multi line string in YAML. Check the YAML Specification for details. Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year. deprecated \u00b6 In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, UI5 Tooling will then display a deprecation warning. Resources \u00b6 Path Mapping \u00b6 Depending on the project type, UI5 Tooling expects your projects source files to be located in certain directories. If your project's sources are located in different directories, you need to configure the path mapping accordingly. Depending on the type of project, there are several different path mappings available. Note that all configured paths must be written in POSIX (i.e. using only forward slashes / as path segment separators) and relative to the project's root directory. Available Path Mappings \u00b6 Applications Libraries Modules webapp : Mapped to runtime path / (root) Default Configuration resources : configuration : paths : webapp : webapp src : Mapped to runtime path /resources test : Mapped to runtime path /test-resources Default Configuration resources : configuration : paths : src : src test : test Modules can map any virtual paths to any physical path within the project. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ) to avoid name clashes with other projects. Example Configuration resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Example For an application project with the following directory structure, you need the path mapping configuration given below: Directory Structure my-app/ \\_ ui5.yaml \\_ lib/ \\_ js/ \\_ app/ Path Mapping Configuration resources : configuration : paths : webapp : lib/js/app Encoding of *.properties files \u00b6 Info This configuration is available since UI5 CLI v1.7.0 Example UTF-8 ISO-8859-1 resources : configuration : propertiesFileSourceEncoding : UTF-8 resources : configuration : propertiesFileSourceEncoding : ISO-8859-1 By default UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details. Custom Configuration \u00b6 Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Example customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Custom configuration that is ignored by UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure. Framework Configuration \u00b6 Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies. Framework and Version \u00b6 In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework and which version: OpenUI5 SAPUI5 framework : name : OpenUI5 version : 1.82.0 framework : name : SAPUI5 version : 1.82.0 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . You can find an overview of the available versions for each framework here: OpenUI5 Version Overview The lowest version supported by UI5 Tooling is 1.52.5 SAPUI5 Version Overview The lowest version supported by UI5 Tooling is 1.76.0 Info Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. Dependencies \u00b6 Example application library specVersion : \"3.0\" type : application metadata : name : my.company.app framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 specVersion : \"3.0\" type : library metadata : name : my.company.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true When building an application depending on this library as well as one of the theme libraries, only that theme is built for this library. Runtime Dependencies \u00b6 All libraries required by your project must be listed in the libraries section of the framework configuration: OpenUI5 SAPUI5 framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp Development Dependencies \u00b6 Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa. Optional Dependencies \u00b6 Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true Build Configuration \u00b6 Exclude Resources \u00b6 Example application library or theme-library builder : resources : excludes : # You can specify paths relative to the configured \"webapp\" directory - \"index.html\" # When defining absolute paths, make sure to specify the namespace plus the \"/resources/\" prefix - \"/resources/my/project/namespace/test/**\" builder : resources : excludes : # For libraries, all paths must be absolute, except for wildcards - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" - \"**/*.svg\" You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual resource paths (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes. Resource excludes are currently not supported for projects of type module . Cachebuster \u00b6 Example time (default) hash builder : cachebuster : signatureType : time builder : cachebuster : signatureType : hash By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. Also see PR #241 for more details. Component Preload Generation \u00b6 For projects of type application a Component-preload.js bundle is generated by default. This bundle will contain most UI5 runtime-relevant resources of the component. You can override this default behavior by defining a componentPreload configuration. For projects of type library , no Component Preload is created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways to define the set of components for which preload bundles should be generated. You can either provide paths (allowing patterns) or namespaces . You can also combine both configuration options. Defining any of them overrides the default preload bundle generation for the root component of application projects. paths \u00b6 Example builder : componentPreload : paths : - \"my/awesome/app/**/Component.js\" The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ . namespaces \u00b6 Example builder : componentPreload : namespaces : - \"my/awesome/app\" - \"my/awesome/app/componentOne\" - \"my/awesome/app/componentTwo\" The namespaces option takes one or multiple component namespaces, which correspond to the directory structures. excludes \u00b6 Info This configuration is available since UI5 CLI v2.10.0 and applies only to projects defining Specification Version 2.3 or higher. Example Single Component Multiple Components builder : componentPreload : excludes : - \"my/awesome/app/localService/**\" builder : componentPreload : namespaces : - \"my/awesome/app\" - \"my/awesome/app/componentOne\" - \"my/awesome/app/componentTwo\" excludes : - \"my/awesome/app/**/thirdparty/\" - \"!my/awesome/app/componentTwo/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from the component preload bundles. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Re-includes must start with the namespace of the component they apply to. Library Preload Generation \u00b6 For projects of type library a library-preload.js bundle is generated by default. This bundle will contain most UI5 runtime-relevant resources of the library. excludes \u00b6 Info This configuration is available since UI5 CLI v2.10.0 and applies only to projects defining Specification Version 2.3 or higher. Example builder : libraryPreload : excludes : - \"my/lib/thirdparty/\" - \"!my/lib/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from library-preload.js bundle. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Re-includes must start with the library's namespace. Custom Tasks \u00b6 Example builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task. JSDoc \u00b6 Example builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes . Include Dependencies \u00b6 Info This configuration is available since UI5 CLI v2.12.0 and applies only to projects defining Specification Version 2.5 or higher. Example builder : settings : includeDependency : - shimmed.thirdparty.library includeDependencyRegExp : - ^com\\.namespace includeDependencyTree : - sap.m You can include certain dependencies into the build process using the includeDependency builder setting. By using includeDependencyRegExp , a regular expression can be used, for example to specify a namespace to dynamically select a group of dependencies that have to be included into the build result. By using includeDependencyTree , a selected dependency including all of its sub-dependencies is used. This configuration can be overwritten more precisely with the CLI parameters --include-dependency , --include-dependency-regexp , --include-dependency-tree , --exclude-dependency , --exclude-dependency-regexp and --exclude-dependency-tree . Minification \u00b6 For projects of types application and library , minification is done for all JavaScript files. During the minification step debug variants are created, original resources are minified, and source maps are created. You can exclude the resources of a project from minification using a list of glob patterns. Matching resources won't be minified, and no debug variants or source maps will be created. The project's ui5.yaml file can contain a list of modules declared as glob patterns (resource name patterns) that are excluded from resource minification. Re-includes have to be marked with a leading exclamation mark ! ; see the example below. The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Info This configuration is available since UI5 CLI v2.14.0 and applies only to projects defining Specification Version 2.6 or higher. Example builder : minification : excludes : - \"my/lib/thirdparty/\" - \"!my/lib/thirdparty/NotExcluded.js\" Server Configuration \u00b6 Example server : settings : httpPort : 1337 httpsPort : 1443 By default, UI5 Tooling will serve applications using Port 8080 . When running in HTTP/2 or HTTPS mode, Port 8443 will be used. If the default port is already in use, the next highest free port will be used. A project can also configure alternative default ports. If the configured port is already in use, an error will be thrown. The default and configured server ports can always be overwritten with the CLI parameter --port . Extension Configuration \u00b6 Example specVersion : \"3.0\" type : application metadata : name : my.application --- specVersion : \"3.0\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"3.0\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed. Available Extensions \u00b6 Custom Tasks Custom Server Middleware Project Shims Custom Bundling \u00b6 Example builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described. Properties \u00b6 bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle. Defaults to: .js , .control.xml , .fragment.html , .fragment.json , .fragment.xml , .view.html , .view.json and .view.xml sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of modules declared as glob patterns (resource name patterns) that are in- or excluded. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Excludes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : If set to true , the module bundle gets minified Projects defining Specification Version 3.0 and higher: Defaults to true Projects defining Specification Version lower than 3.0: Defaults to false decorateBootstrapModule : By default set to false . If set to true , the module will be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable module bundles gets wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted sourceMap : By default set to true . Adds source map support to the bundle. Available since UI5 Tooling v3.0.0 Specification Versions \u00b6 A project must define a specification version by setting the specVersion property. UI5 Tooling uses this information to detect whether the currently installed version is compatible to a project's configuration. specVersion : \"3.0\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below. Compatibility Matrix \u00b6 Unless otherwise noted in the table below, UI5 Tooling modules are backward compatible. Version UI5 CLI Release 3.0 v3.0.0+ 2.6 v2.14.0+ 2.5 v2.12.0+ 2.4 v2.11.0+ 2.3 v2.10.0+ 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+ Specification Version 3.0 \u00b6 Breaking changes: The metadata.name property is now restricted to contain only certain characters and no uppercase letters. See name for details bundleOptions has been modified: debugMode has been removed optimize now always defaults to true #685 Features: Adds support for sourceMap configuration for the application and library bundleOptions Specification Version 3.0 projects are supported by UI5 CLI v3.0.0 and above. Specification Version 2.6 \u00b6 Features: Adds support for excludes configuration for the application and library minification Specification Version 2.6 projects are supported by UI5 CLI v2.14.0 and above. Specification Version 2.5 \u00b6 Features: Adds support for the build configuration includeDependency Allows server configuration in projects of type module Specification Version 2.5 projects are supported by UI5 CLI v2.12.0 and above. Specification Version 2.4 \u00b6 Features: Adds support for bundleInfo mode in bundle definitions. Specification Version 2.4 projects are supported by UI5 CLI v2.11.0 and above. Specification Version 2.3 \u00b6 Features: Adds support for excludes configuration of component - and library preload bundles Specification Version 2.3 projects are supported by UI5 CLI v2.10.0 and above. Specification Version 2.2 \u00b6 Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above. Specification Version 2.1 \u00b6 Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above. Specification Version 2.0 \u00b6 Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above. Specification Version 1.1 \u00b6 Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above. Specification Version 1.0 \u00b6 First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above. Specification Version 0.1 \u00b6 Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"Configuration"},{"location":"pages/Configuration/#configuration","text":"A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Info This document describes the configuration of UI5 Tooling-based projects and extensions. It represents Specification Version 3.0 .","title":"Configuration"},{"location":"pages/Configuration/#validation-ide-support","text":"Starting with Specification Version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store Catalog which is used by the YAML Language Server . See the list of clients to find extensions for various IDEs and editors.","title":"Validation / IDE support"},{"location":"pages/Configuration/#example","text":"specVersion : \"3.0\" type : application|library|theme-library|module metadata : name : some.project.name","title":"Example"},{"location":"pages/Configuration/#general-configuration","text":"","title":"General Configuration"},{"location":"pages/Configuration/#specification-version-and-type","text":"A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1), or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. Example application library theme-library module specVersion : \"3.0\" type : application specVersion : \"3.0\" type : library specVersion : \"3.0\" type : theme-library specVersion : \"3.0\" type : module","title":"Specification Version and -Type"},{"location":"pages/Configuration/#kind","text":"The configuration may also contain a kind property. This is used to differentiate between projects and extensions. This configuration defaults to kind: project , which means you typically only need to specify it for extensions like Custom Tasks .","title":"Kind"},{"location":"pages/Configuration/#metadata","text":"Example metadata : name : my.company.project copyright : |- My Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the XYZ License, Version n - see LICENSE.txt.","title":"Metadata"},{"location":"pages/Configuration/#name","text":"A project must have a name . In UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like organization.product.project for UI5 projects or ui5-task-heavy-boulder for extension-projects. The name property of projects defining Specification Version 3.0 and higher must satisfy the following conditions: Must be at least 3 characters long Must be no longer than 80 characters Must contain lowercase characters only Must contain alphanumeric characters, dash, underscore and period only Exception: The @ and / characters are allowed at certain positions as explained below Must start with an alphabetic character or an @ character If it starts with an @ character, it must contain exactly one forward slash / This is aligned with the npm concept for package scopes, for example @org/lib.name","title":"name"},{"location":"pages/Configuration/#copyright","text":"A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a project's source code. |- is a way to define a multi line string in YAML. Check the YAML Specification for details. Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year.","title":"copyright"},{"location":"pages/Configuration/#deprecated","text":"In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, UI5 Tooling will then display a deprecation warning.","title":"deprecated"},{"location":"pages/Configuration/#resources","text":"","title":"Resources"},{"location":"pages/Configuration/#path-mapping","text":"Depending on the project type, UI5 Tooling expects your projects source files to be located in certain directories. If your project's sources are located in different directories, you need to configure the path mapping accordingly. Depending on the type of project, there are several different path mappings available. Note that all configured paths must be written in POSIX (i.e. using only forward slashes / as path segment separators) and relative to the project's root directory.","title":"Path Mapping"},{"location":"pages/Configuration/#available-path-mappings","text":"Applications Libraries Modules webapp : Mapped to runtime path / (root) Default Configuration resources : configuration : paths : webapp : webapp src : Mapped to runtime path /resources test : Mapped to runtime path /test-resources Default Configuration resources : configuration : paths : src : src test : test Modules can map any virtual paths to any physical path within the project. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ) to avoid name clashes with other projects. Example Configuration resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Example For an application project with the following directory structure, you need the path mapping configuration given below: Directory Structure my-app/ \\_ ui5.yaml \\_ lib/ \\_ js/ \\_ app/ Path Mapping Configuration resources : configuration : paths : webapp : lib/js/app","title":"Available Path Mappings"},{"location":"pages/Configuration/#encoding-of-properties-files","text":"Info This configuration is available since UI5 CLI v1.7.0 Example UTF-8 ISO-8859-1 resources : configuration : propertiesFileSourceEncoding : UTF-8 resources : configuration : propertiesFileSourceEncoding : ISO-8859-1 By default UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details.","title":"Encoding of *.properties files"},{"location":"pages/Configuration/#custom-configuration","text":"Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Example customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Custom configuration that is ignored by UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure.","title":"Custom Configuration"},{"location":"pages/Configuration/#framework-configuration","text":"Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies.","title":"Framework Configuration"},{"location":"pages/Configuration/#framework-and-version","text":"In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework and which version: OpenUI5 SAPUI5 framework : name : OpenUI5 version : 1.82.0 framework : name : SAPUI5 version : 1.82.0 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . You can find an overview of the available versions for each framework here: OpenUI5 Version Overview The lowest version supported by UI5 Tooling is 1.52.5 SAPUI5 Version Overview The lowest version supported by UI5 Tooling is 1.76.0 Info Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework.","title":"Framework and Version"},{"location":"pages/Configuration/#dependencies","text":"Example application library specVersion : \"3.0\" type : application metadata : name : my.company.app framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 specVersion : \"3.0\" type : library metadata : name : my.company.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true When building an application depending on this library as well as one of the theme libraries, only that theme is built for this library.","title":"Dependencies"},{"location":"pages/Configuration/#runtime-dependencies","text":"All libraries required by your project must be listed in the libraries section of the framework configuration: OpenUI5 SAPUI5 framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp","title":"Runtime Dependencies"},{"location":"pages/Configuration/#development-dependencies","text":"Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa.","title":"Development Dependencies"},{"location":"pages/Configuration/#optional-dependencies","text":"Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true","title":"Optional Dependencies"},{"location":"pages/Configuration/#build-configuration","text":"","title":"Build Configuration"},{"location":"pages/Configuration/#exclude-resources","text":"Example application library or theme-library builder : resources : excludes : # You can specify paths relative to the configured \"webapp\" directory - \"index.html\" # When defining absolute paths, make sure to specify the namespace plus the \"/resources/\" prefix - \"/resources/my/project/namespace/test/**\" builder : resources : excludes : # For libraries, all paths must be absolute, except for wildcards - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" - \"**/*.svg\" You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual resource paths (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes. Resource excludes are currently not supported for projects of type module .","title":"Exclude Resources"},{"location":"pages/Configuration/#cachebuster","text":"Example time (default) hash builder : cachebuster : signatureType : time builder : cachebuster : signatureType : hash By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. Also see PR #241 for more details.","title":"Cachebuster"},{"location":"pages/Configuration/#component-preload-generation","text":"For projects of type application a Component-preload.js bundle is generated by default. This bundle will contain most UI5 runtime-relevant resources of the component. You can override this default behavior by defining a componentPreload configuration. For projects of type library , no Component Preload is created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways to define the set of components for which preload bundles should be generated. You can either provide paths (allowing patterns) or namespaces . You can also combine both configuration options. Defining any of them overrides the default preload bundle generation for the root component of application projects.","title":"Component Preload Generation"},{"location":"pages/Configuration/#paths","text":"Example builder : componentPreload : paths : - \"my/awesome/app/**/Component.js\" The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ .","title":"paths"},{"location":"pages/Configuration/#namespaces","text":"Example builder : componentPreload : namespaces : - \"my/awesome/app\" - \"my/awesome/app/componentOne\" - \"my/awesome/app/componentTwo\" The namespaces option takes one or multiple component namespaces, which correspond to the directory structures.","title":"namespaces"},{"location":"pages/Configuration/#excludes","text":"Info This configuration is available since UI5 CLI v2.10.0 and applies only to projects defining Specification Version 2.3 or higher. Example Single Component Multiple Components builder : componentPreload : excludes : - \"my/awesome/app/localService/**\" builder : componentPreload : namespaces : - \"my/awesome/app\" - \"my/awesome/app/componentOne\" - \"my/awesome/app/componentTwo\" excludes : - \"my/awesome/app/**/thirdparty/\" - \"!my/awesome/app/componentTwo/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from the component preload bundles. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Re-includes must start with the namespace of the component they apply to.","title":"excludes"},{"location":"pages/Configuration/#library-preload-generation","text":"For projects of type library a library-preload.js bundle is generated by default. This bundle will contain most UI5 runtime-relevant resources of the library.","title":"Library Preload Generation"},{"location":"pages/Configuration/#excludes_1","text":"Info This configuration is available since UI5 CLI v2.10.0 and applies only to projects defining Specification Version 2.3 or higher. Example builder : libraryPreload : excludes : - \"my/lib/thirdparty/\" - \"!my/lib/thirdparty/NotExcluded.js\" List of modules declared as glob patterns (resource name patterns) that are excluded from library-preload.js bundle. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Re-includes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Re-includes must start with the library's namespace.","title":"excludes"},{"location":"pages/Configuration/#custom-tasks","text":"Example builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task.","title":"Custom Tasks"},{"location":"pages/Configuration/#jsdoc","text":"Example builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes .","title":"JSDoc"},{"location":"pages/Configuration/#include-dependencies","text":"Info This configuration is available since UI5 CLI v2.12.0 and applies only to projects defining Specification Version 2.5 or higher. Example builder : settings : includeDependency : - shimmed.thirdparty.library includeDependencyRegExp : - ^com\\.namespace includeDependencyTree : - sap.m You can include certain dependencies into the build process using the includeDependency builder setting. By using includeDependencyRegExp , a regular expression can be used, for example to specify a namespace to dynamically select a group of dependencies that have to be included into the build result. By using includeDependencyTree , a selected dependency including all of its sub-dependencies is used. This configuration can be overwritten more precisely with the CLI parameters --include-dependency , --include-dependency-regexp , --include-dependency-tree , --exclude-dependency , --exclude-dependency-regexp and --exclude-dependency-tree .","title":"Include Dependencies"},{"location":"pages/Configuration/#minification","text":"For projects of types application and library , minification is done for all JavaScript files. During the minification step debug variants are created, original resources are minified, and source maps are created. You can exclude the resources of a project from minification using a list of glob patterns. Matching resources won't be minified, and no debug variants or source maps will be created. The project's ui5.yaml file can contain a list of modules declared as glob patterns (resource name patterns) that are excluded from resource minification. Re-includes have to be marked with a leading exclamation mark ! ; see the example below. The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. Note that patterns are always applied relative to the project's virtual source directory /resources/ . Info This configuration is available since UI5 CLI v2.14.0 and applies only to projects defining Specification Version 2.6 or higher. Example builder : minification : excludes : - \"my/lib/thirdparty/\" - \"!my/lib/thirdparty/NotExcluded.js\"","title":"Minification"},{"location":"pages/Configuration/#server-configuration","text":"Example server : settings : httpPort : 1337 httpsPort : 1443 By default, UI5 Tooling will serve applications using Port 8080 . When running in HTTP/2 or HTTPS mode, Port 8443 will be used. If the default port is already in use, the next highest free port will be used. A project can also configure alternative default ports. If the configured port is already in use, an error will be thrown. The default and configured server ports can always be overwritten with the CLI parameter --port .","title":"Server Configuration"},{"location":"pages/Configuration/#extension-configuration","text":"Example specVersion : \"3.0\" type : application metadata : name : my.application --- specVersion : \"3.0\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"3.0\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed.","title":"Extension Configuration"},{"location":"pages/Configuration/#available-extensions","text":"Custom Tasks Custom Server Middleware Project Shims","title":"Available Extensions"},{"location":"pages/Configuration/#custom-bundling","text":"Example builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described.","title":"Custom Bundling"},{"location":"pages/Configuration/#properties","text":"bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle. Defaults to: .js , .control.xml , .fragment.html , .fragment.json , .fragment.xml , .view.html , .view.json and .view.xml sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of modules declared as glob patterns (resource name patterns) that are in- or excluded. Similarly to the use of a single * or double ** asterisk, a pattern ending with a slash / denotes an arbitrary number of characters or folder names. Excludes have to be marked with a leading exclamation mark ! . The order of filters is relevant; a later inclusion overrides an earlier exclusion, and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : If set to true , the module bundle gets minified Projects defining Specification Version 3.0 and higher: Defaults to true Projects defining Specification Version lower than 3.0: Defaults to false decorateBootstrapModule : By default set to false . If set to true , the module will be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable module bundles gets wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted sourceMap : By default set to true . Adds source map support to the bundle. Available since UI5 Tooling v3.0.0","title":"Properties"},{"location":"pages/Configuration/#specification-versions","text":"A project must define a specification version by setting the specVersion property. UI5 Tooling uses this information to detect whether the currently installed version is compatible to a project's configuration. specVersion : \"3.0\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below.","title":"Specification Versions"},{"location":"pages/Configuration/#compatibility-matrix","text":"Unless otherwise noted in the table below, UI5 Tooling modules are backward compatible. Version UI5 CLI Release 3.0 v3.0.0+ 2.6 v2.14.0+ 2.5 v2.12.0+ 2.4 v2.11.0+ 2.3 v2.10.0+ 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+","title":"Compatibility Matrix"},{"location":"pages/Configuration/#specification-version-30","text":"Breaking changes: The metadata.name property is now restricted to contain only certain characters and no uppercase letters. See name for details bundleOptions has been modified: debugMode has been removed optimize now always defaults to true #685 Features: Adds support for sourceMap configuration for the application and library bundleOptions Specification Version 3.0 projects are supported by UI5 CLI v3.0.0 and above.","title":"Specification Version 3.0"},{"location":"pages/Configuration/#specification-version-26","text":"Features: Adds support for excludes configuration for the application and library minification Specification Version 2.6 projects are supported by UI5 CLI v2.14.0 and above.","title":"Specification Version 2.6"},{"location":"pages/Configuration/#specification-version-25","text":"Features: Adds support for the build configuration includeDependency Allows server configuration in projects of type module Specification Version 2.5 projects are supported by UI5 CLI v2.12.0 and above.","title":"Specification Version 2.5"},{"location":"pages/Configuration/#specification-version-24","text":"Features: Adds support for bundleInfo mode in bundle definitions. Specification Version 2.4 projects are supported by UI5 CLI v2.11.0 and above.","title":"Specification Version 2.4"},{"location":"pages/Configuration/#specification-version-23","text":"Features: Adds support for excludes configuration of component - and library preload bundles Specification Version 2.3 projects are supported by UI5 CLI v2.10.0 and above.","title":"Specification Version 2.3"},{"location":"pages/Configuration/#specification-version-22","text":"Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above.","title":"Specification Version 2.2"},{"location":"pages/Configuration/#specification-version-21","text":"Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above.","title":"Specification Version 2.1"},{"location":"pages/Configuration/#specification-version-20","text":"Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above.","title":"Specification Version 2.0"},{"location":"pages/Configuration/#specification-version-11","text":"Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above.","title":"Specification Version 1.1"},{"location":"pages/Configuration/#specification-version-10","text":"First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above.","title":"Specification Version 1.0"},{"location":"pages/Configuration/#specification-version-01","text":"Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"Specification Version 0.1"},{"location":"pages/ESSupport/","text":"ECMAScript Support \u00b6 UI5 Tooling offers general support for ES2022 ECMAScript features. While a ui5 build is executed, UI5 Tooling analyses a project's code. Depending on the project type, you have to consider some restrictions regarding the usage of certain ECMAScript syntax. UI5 Tooling Version Supported ECMAScript Version Note v3.0+ ECMAScript 2022 v2.0+ ECMAScript 2009/ES5 Note that code up to ECMAScript 2020 can be parsed, however required code analysis might not work correctly for specific language features The following section describes all restrictions grouped by the kind of ECMAScript language feature. To get more insights into the code analysing executed by UI5 Tooling check out Code Analysis . Language Features with Restrictions \u00b6 The following sections describe the restrictions grouped by the ECMAScript language feature. JavaScript modules \u00b6 In general, UI5 Tooling only analyzes JavaScript files of type script . JavaScript Modules are not analyzed. UI5 Tooling and the UI5 Runtime does not support the usage of export and import of JavaScript Modules. Therefore, sap.ui.define has to be used. Supported Not Supported sap . ui . define ([ \"ModuleA\" , \"ModuleB\" ], function ( ModuleA , ModuleB ) { return ModuleA . extend ( \"ModuleC\" , {}); }); import ModuleA from \"ModuleA\" ; import ModuleB from \"ModuleB\" ; export default class ModuleC extends ModuleA {}; Template Literal \u00b6 Template Literals without an expressions can be used in all places where string literals can be used. However, since UI5 Tooling will attempt a static code analysis for certain calls to UI5 API, Template Literals with one or more expressions (e.g. Hello ${planets[2]} ) can't be used in the scenarios described below. Template Literal in sap.ui.define or sap.ui.require \u00b6 Template Literals with one or more expressions inside a sap.ui.define or sap.ui.require call are not supported. Supported Not Supported sap . ui . define ([ `ModuleA` , `ModuleB` ], function ( ModuleA , ModuleB ) { }); const i = `B` ; sap . ui . define ([ `ModuleA` , `Module ${ i } ` ], function ( ModuleA , ModuleB ) { }); The same rule applies also for the usage of deprecated or no longer recommended APIs jQuery.sap.declare , jQuery.sap.declare , define , require , require.predefine , sap.ui.predefine , sap.ui.requireSync and sap.ui.require.preload . Template Literal in Smart Template Declaration \u00b6 When declaring a Smart Template using a Template Literal with one or more expressions in the name of the Smart Template is not supported. Supported Not Supported sap . ui . define ([ `sap/suite/ui/generic/template/lib/TemplateAssembler` ], function ( TemplateAssembler ) { return TemplateAssembler . getTemplateComponent ( getMethods , `sap.suite.ui.generic.templates.Page.Component` , { metadata : { properties : { templateName : { type : `string` , defaultValue : `sap.suite.ui.generic.templates.Page.view.Page` } }, manifest : `json` } } ); }); sap . ui . define ([ `sap/suite/ui/generic/template/lib/TemplateAssembler` ], function ( TemplateAssembler ) { const name = `Component` ; return TemplateAssembler . getTemplateComponent ( getMethods , `sap.suite.ui.generic.templates.Page. ${ name } ` , { metadata : { properties : { templateName : { type : `string` , defaultValue : `sap.suite.ui.generic.templates.Page.view.Page` } }, manifest : `json` } } ); }); Template Literal in XMLComposite Declaration \u00b6 The XMLComposite control is deprecated since version UI5 1.88. Nevertheless UI5 Tooling will attempt to analyze the declaration of any such controls in a project. Declaring an XMLComposite control using a Template Literal with one or more expressions in the name, is not supported. Supported Not Supported sap . ui . define ([ `sap/ui/core/XMLComposite` ], function ( XMLComposite ) { return XMLComposite . extend ( `composites.MyComposite` , {} }); sap . ui . define ([ `sap/ui/core/XMLComposite` ], function ( XMLComposite ) { const name = `MyComposite` ; return XMLComposite . extend ( `composites. ${ name } ` , {}); }); Template Literal in sap/ui/core/Core#initLibrary Call \u00b6 A library is typically initialized via an accompanying library.js . Within that file, the object which is supplied to the sap/ui/core/Core#initLibrary method, must not use a Template Literal with one or more expressions for the library name. Supported Not Supported sap . ui . getCore (). initLibrary ({ name : `my.lib` }); const libraryName = `lib` ; sap . ui . getCore (). initLibrary ({ name : `my. ${ libraryName } ` }); Reserved Variable Names in a Template Literal \u00b6 While UI5 Tooling performs a build placeholders are replaced with a values offered by the build. For example ${version} is replaced with the actual version defined in the package.json of the project. Therefore it is required to not use any Template Literal where any expression contains variable with following names: version project.version buildtime copyright Supported Not Supported const myVersion = `1.2` ; const transformedVersion `v ${ myVersion } ` const version = `1.2` ; const transformedVersion `v ${ version } ` UI5 Tooling searches for the exact match of ${version} , so with adding whitespaces before and after the variable name ${ version } UI5 Tooling won't replace this occurence. This can be enforced by the dedicated ESLint config template-curly-spacing with option always . Spread Element \u00b6 A Spread Element can be used in all places, except the following. Spread Element in sap.ui.define or sap.ui.require \u00b6 A Spread Element as a parameter in a sap.ui.define or sap.ui.require call is not supported. Supported Not Supported sap . ui . define ([ \"ModuleA\" , \"ModuleB\" ], function ( ModuleA , ModuleB ) { }); const dependencies = [ \"ModuleA\" , \"ModuleB\" ]; sap . ui . define ([ ... dependencies ], function ( ModuleA , ModuleB ) { }); The same rule applies also for the usage of deprecated or no longer recommended APIs jQuery.sap.declare , jQuery.sap.declare , define , require , require.predefine , sap.ui.predefine , sap.ui.requireSync and sap.ui.require.preload . Spread Element in Smart Template Declaration \u00b6 When declaring a Smart Template , the usage of a Spread Element in the configuration is not supported. Supported Not Supported sap . ui . define ([ \"sap/suite/ui/generic/template/lib/TemplateAssembler\" ], function ( TemplateAssembler ) { return TemplateAssembler . getTemplateComponent ( getMethods , \"sap.suite.ui.generic.templates.Page.Component\" , { metadata : { properties : { templateName : { type : \"string\" , defaultValue : \"sap.suite.ui.generic.templates.Page.view.Page\" } }, manifest : \"json\" } } ); }); sap . ui . define ([ \"sap/suite/ui/generic/template/lib/TemplateAssembler\" ], function ( TemplateAssembler ) { const myTemplate = { templateName : { type : \"string\" , defaultValue : \"sap.suite.ui.generic.templates.Page.view.Page\" } }; return TemplateAssembler . getTemplateComponent ( getMethods , \"sap.suite.ui.generic.templates.Page.Component\" , { metadata : { properties : { ... myTemplate } manifest : \"json\" } } ); }); Spread Element in XMLComposite Declaration \u00b6 The XMLComposite control is deprecated since version UI5 1.88. Nevertheless UI5 Tooling will attempt to analyze the declaration of any such controls in a project. When declaring an XMLComposite , the usage of a Spread Element in the configuration is not supported. Supported Not Supported sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { return XMLComposite . extend ( \"composites.MyComposite\" , { fragment : \"composites.custom.MyComposite\" } }); sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { const myXMLComposite = { fragment : \"composites.custom.MyComposite\" }; return XMLComposite . extend ( `composites.MyComposite` , { ... myXMLComposite }); }); Spread Element in sap/ui/core/Core#initLibrary Call \u00b6 A library is typically initialized via an accompanying library.js . Within that file, the object which is supplied to the sap/ui/core/Core#initLibrary method, must not use a Spread Element . Supported Not Supported sap . ui . getCore (). initLibrary ({ name : \"my.lib\" }); const mylib = { name : \"my.lib\" }; sap . ui . getCore (). initLibrary ({ ... mylib }); Object Expression \u00b6 An Object Expression can be used in all places except in following places. Object Expression in sap.ui.define or sap.ui.require \u00b6 An Object Expression as a parameter in a sap.ui.define or sap.ui.require call is not supported. Supported Not Supported sap . ui . define ([ \"Bar\" ], function ( Bar ){ }); const dependency = \"Bar\" ; sap . ui . define ([ dependency ], function ( Bar ){ }); The same rule applies also for the usage of deprecated or no longer recommended APIs jQuery.sap.declare , jQuery.sap.declare , define , require , require.predefine , sap.ui.predefine , sap.ui.requireSync and sap.ui.require.preload . Object Expression in Smart Template Declaration \u00b6 When declaring a Smart Template , the usage of an Object Expression in the configuration is not supported. Supported Not Supported sap . ui . define ([ \"sap/suite/ui/generic/template/lib/TemplateAssembler\" ], function ( TemplateAssembler ) { return TemplateAssembler . getTemplateComponent ( getMethods , \"sap.suite.ui.generic.templates.Page.Component\" , { metadata : { properties : { templateName : { type : \"string\" , defaultValue : \"sap.suite.ui.generic.templates.Page.view.Page\" } }, manifest : \"json\" } } ); }); sap . ui . define ([ \"sap/suite/ui/generic/template/lib/TemplateAssembler\" ], function ( TemplateAssembler ) { const key = \"templateName\" return TemplateAssembler . getTemplateComponent ( getMethods , `sap.suite.ui.generic.templates.Page. ${ name } ` , { metadata : { properties : { [ key ] : { type : \"string\" , defaultValue : \"sap.suite.ui.generic.templates.Page.view.Page\" } } manifest : \"json\" } } ); }); Object Expression in XMLComposite Declaration \u00b6 The XMLComposite control is deprecated since version UI5 1.88. Nevertheless UI5 Tooling will attempt to analyze the declaration of any such controls in a project. When declaring an XMLComposite , the usage of an Object Expression in the configuration is not supported. Supported Not Supported sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { return XMLComposite . extend ( \"composites.MyComposite\" , { fragment : \"composites.custom.MyComposite\" } }); sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { const key = \"fragment\" ; return XMLComposite . extend ( \"composites.MyComposite\" , { [ key ] : \"composites.custom.MyComposite\" }); }); Object Expression in sap/ui/core/Core#initLibrary Call \u00b6 A library is typically initialized via an accompanying library.js . Within that file, the object which is supplied to the sap/ui/core/Core#initLibrary method, must not use an Object Expression . Supported Not Supported sap . ui . getCore (). initLibrary ({ name : \"my.lib\" }); const key = \"name\" ; sap . ui . getCore (). initLibrary ({ [ key ] : \"my.lib\" }); Computed Property \u00b6 A Computed Property can be used in all places except in following places. Computed Property when using extend \u00b6 One or more Computed Property as a parameter in an UI5 Module extend call is not supported. Supported Not Supported sap . ui . define ([ \"Bar\" ], function ( Bar ){ return Bar . extend ( \"my.Bar\" {}); }); const name = \"my\" ; sap . ui . define ([ \"Bar\" ], function ( Bar ){ return Bar . extend ( name + \".Bar\" , {}); }); Computed Properties in sap/ui/core/Core#initLibrary Call \u00b6 A library is typically initialized via an accompanying library.js . Within that file, the object which is supplied to the sap/ui/core/Core#initLibrary method, must not use an Computed Property . Supported Not Supported sap . ui . getCore (). initLibrary ({ name : \"my.lib\" }); const name = \"my\" ; sap . ui . getCore (). initLibrary ({ name : name + \".lib\" }); Class Declaration \u00b6 If you want to generate a JSDoc build of your project and using a Class Declaration the class declaration should not be returned directly. Declare the class and return the class in a separate statement. If not JSDoc treats the the class declaration as a return statement and does not recognize any JSDoc if such is provided right above the class declaration. Supported Not Supported sap . ui . define ([ \"Bar\" ], function ( Bar ){ /** * JSDoc block here */ class Foo extends Bar { make () {} } return Foo ; }); sap . ui . define ([ \"Bar\" ], function ( Bar ){ /** * JSDoc block here */ return class Foo extends Bar { make () {} } }); Arrow Function Expression \u00b6 If you want to generate a JSDoc build of your project and use an Arrow Function Expression the JSDoc has to be written above the arrow function and not above the sap.ui.define/sap.ui.require command. Supported Not Supported sap . ui . define ([ \"Bar\" ], /** * JSDoc block here */ ( Bar ) => Bar . extends ( \"Foo\" , { })); /** * JSDoc block here */ sap . ui . define ([ \"Bar\" ], ( Bar ) => Bar . extends ( \"Foo\" , { }));","title":"ECMAScript Support"},{"location":"pages/ESSupport/#ecmascript-support","text":"UI5 Tooling offers general support for ES2022 ECMAScript features. While a ui5 build is executed, UI5 Tooling analyses a project's code. Depending on the project type, you have to consider some restrictions regarding the usage of certain ECMAScript syntax. UI5 Tooling Version Supported ECMAScript Version Note v3.0+ ECMAScript 2022 v2.0+ ECMAScript 2009/ES5 Note that code up to ECMAScript 2020 can be parsed, however required code analysis might not work correctly for specific language features The following section describes all restrictions grouped by the kind of ECMAScript language feature. To get more insights into the code analysing executed by UI5 Tooling check out Code Analysis .","title":"ECMAScript Support"},{"location":"pages/ESSupport/#language-features-with-restrictions","text":"The following sections describe the restrictions grouped by the ECMAScript language feature.","title":"Language Features with Restrictions"},{"location":"pages/ESSupport/#javascript-modules","text":"In general, UI5 Tooling only analyzes JavaScript files of type script . JavaScript Modules are not analyzed. UI5 Tooling and the UI5 Runtime does not support the usage of export and import of JavaScript Modules. Therefore, sap.ui.define has to be used. Supported Not Supported sap . ui . define ([ \"ModuleA\" , \"ModuleB\" ], function ( ModuleA , ModuleB ) { return ModuleA . extend ( \"ModuleC\" , {}); }); import ModuleA from \"ModuleA\" ; import ModuleB from \"ModuleB\" ; export default class ModuleC extends ModuleA {};","title":"JavaScript modules"},{"location":"pages/ESSupport/#template-literal","text":"Template Literals without an expressions can be used in all places where string literals can be used. However, since UI5 Tooling will attempt a static code analysis for certain calls to UI5 API, Template Literals with one or more expressions (e.g. Hello ${planets[2]} ) can't be used in the scenarios described below.","title":"Template Literal"},{"location":"pages/ESSupport/#template-literal-in-sapuidefine-or-sapuirequire","text":"Template Literals with one or more expressions inside a sap.ui.define or sap.ui.require call are not supported. Supported Not Supported sap . ui . define ([ `ModuleA` , `ModuleB` ], function ( ModuleA , ModuleB ) { }); const i = `B` ; sap . ui . define ([ `ModuleA` , `Module ${ i } ` ], function ( ModuleA , ModuleB ) { }); The same rule applies also for the usage of deprecated or no longer recommended APIs jQuery.sap.declare , jQuery.sap.declare , define , require , require.predefine , sap.ui.predefine , sap.ui.requireSync and sap.ui.require.preload .","title":"Template Literal in sap.ui.define or sap.ui.require"},{"location":"pages/ESSupport/#template-literal-in-smart-template-declaration","text":"When declaring a Smart Template using a Template Literal with one or more expressions in the name of the Smart Template is not supported. Supported Not Supported sap . ui . define ([ `sap/suite/ui/generic/template/lib/TemplateAssembler` ], function ( TemplateAssembler ) { return TemplateAssembler . getTemplateComponent ( getMethods , `sap.suite.ui.generic.templates.Page.Component` , { metadata : { properties : { templateName : { type : `string` , defaultValue : `sap.suite.ui.generic.templates.Page.view.Page` } }, manifest : `json` } } ); }); sap . ui . define ([ `sap/suite/ui/generic/template/lib/TemplateAssembler` ], function ( TemplateAssembler ) { const name = `Component` ; return TemplateAssembler . getTemplateComponent ( getMethods , `sap.suite.ui.generic.templates.Page. ${ name } ` , { metadata : { properties : { templateName : { type : `string` , defaultValue : `sap.suite.ui.generic.templates.Page.view.Page` } }, manifest : `json` } } ); });","title":"Template Literal in Smart Template Declaration"},{"location":"pages/ESSupport/#template-literal-in-xmlcomposite-declaration","text":"The XMLComposite control is deprecated since version UI5 1.88. Nevertheless UI5 Tooling will attempt to analyze the declaration of any such controls in a project. Declaring an XMLComposite control using a Template Literal with one or more expressions in the name, is not supported. Supported Not Supported sap . ui . define ([ `sap/ui/core/XMLComposite` ], function ( XMLComposite ) { return XMLComposite . extend ( `composites.MyComposite` , {} }); sap . ui . define ([ `sap/ui/core/XMLComposite` ], function ( XMLComposite ) { const name = `MyComposite` ; return XMLComposite . extend ( `composites. ${ name } ` , {}); });","title":"Template Literal in XMLComposite Declaration"},{"location":"pages/ESSupport/#template-literal-in-sapuicorecoreinitlibrary-call","text":"A library is typically initialized via an accompanying library.js . Within that file, the object which is supplied to the sap/ui/core/Core#initLibrary method, must not use a Template Literal with one or more expressions for the library name. Supported Not Supported sap . ui . getCore (). initLibrary ({ name : `my.lib` }); const libraryName = `lib` ; sap . ui . getCore (). initLibrary ({ name : `my. ${ libraryName } ` });","title":"Template Literal in sap/ui/core/Core#initLibrary Call"},{"location":"pages/ESSupport/#reserved-variable-names-in-a-template-literal","text":"While UI5 Tooling performs a build placeholders are replaced with a values offered by the build. For example ${version} is replaced with the actual version defined in the package.json of the project. Therefore it is required to not use any Template Literal where any expression contains variable with following names: version project.version buildtime copyright Supported Not Supported const myVersion = `1.2` ; const transformedVersion `v ${ myVersion } ` const version = `1.2` ; const transformedVersion `v ${ version } ` UI5 Tooling searches for the exact match of ${version} , so with adding whitespaces before and after the variable name ${ version } UI5 Tooling won't replace this occurence. This can be enforced by the dedicated ESLint config template-curly-spacing with option always .","title":"Reserved Variable Names in a Template Literal"},{"location":"pages/ESSupport/#spread-element","text":"A Spread Element can be used in all places, except the following.","title":"Spread Element"},{"location":"pages/ESSupport/#spread-element-in-sapuidefine-or-sapuirequire","text":"A Spread Element as a parameter in a sap.ui.define or sap.ui.require call is not supported. Supported Not Supported sap . ui . define ([ \"ModuleA\" , \"ModuleB\" ], function ( ModuleA , ModuleB ) { }); const dependencies = [ \"ModuleA\" , \"ModuleB\" ]; sap . ui . define ([ ... dependencies ], function ( ModuleA , ModuleB ) { }); The same rule applies also for the usage of deprecated or no longer recommended APIs jQuery.sap.declare , jQuery.sap.declare , define , require , require.predefine , sap.ui.predefine , sap.ui.requireSync and sap.ui.require.preload .","title":"Spread Element in sap.ui.define or sap.ui.require"},{"location":"pages/ESSupport/#spread-element-in-smart-template-declaration","text":"When declaring a Smart Template , the usage of a Spread Element in the configuration is not supported. Supported Not Supported sap . ui . define ([ \"sap/suite/ui/generic/template/lib/TemplateAssembler\" ], function ( TemplateAssembler ) { return TemplateAssembler . getTemplateComponent ( getMethods , \"sap.suite.ui.generic.templates.Page.Component\" , { metadata : { properties : { templateName : { type : \"string\" , defaultValue : \"sap.suite.ui.generic.templates.Page.view.Page\" } }, manifest : \"json\" } } ); }); sap . ui . define ([ \"sap/suite/ui/generic/template/lib/TemplateAssembler\" ], function ( TemplateAssembler ) { const myTemplate = { templateName : { type : \"string\" , defaultValue : \"sap.suite.ui.generic.templates.Page.view.Page\" } }; return TemplateAssembler . getTemplateComponent ( getMethods , \"sap.suite.ui.generic.templates.Page.Component\" , { metadata : { properties : { ... myTemplate } manifest : \"json\" } } ); });","title":"Spread Element in Smart Template Declaration"},{"location":"pages/ESSupport/#spread-element-in-xmlcomposite-declaration","text":"The XMLComposite control is deprecated since version UI5 1.88. Nevertheless UI5 Tooling will attempt to analyze the declaration of any such controls in a project. When declaring an XMLComposite , the usage of a Spread Element in the configuration is not supported. Supported Not Supported sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { return XMLComposite . extend ( \"composites.MyComposite\" , { fragment : \"composites.custom.MyComposite\" } }); sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { const myXMLComposite = { fragment : \"composites.custom.MyComposite\" }; return XMLComposite . extend ( `composites.MyComposite` , { ... myXMLComposite }); });","title":"Spread Element in XMLComposite Declaration"},{"location":"pages/ESSupport/#spread-element-in-sapuicorecoreinitlibrary-call","text":"A library is typically initialized via an accompanying library.js . Within that file, the object which is supplied to the sap/ui/core/Core#initLibrary method, must not use a Spread Element . Supported Not Supported sap . ui . getCore (). initLibrary ({ name : \"my.lib\" }); const mylib = { name : \"my.lib\" }; sap . ui . getCore (). initLibrary ({ ... mylib });","title":"Spread Element in sap/ui/core/Core#initLibrary Call"},{"location":"pages/ESSupport/#object-expression","text":"An Object Expression can be used in all places except in following places.","title":"Object Expression"},{"location":"pages/ESSupport/#object-expression-in-sapuidefine-or-sapuirequire","text":"An Object Expression as a parameter in a sap.ui.define or sap.ui.require call is not supported. Supported Not Supported sap . ui . define ([ \"Bar\" ], function ( Bar ){ }); const dependency = \"Bar\" ; sap . ui . define ([ dependency ], function ( Bar ){ }); The same rule applies also for the usage of deprecated or no longer recommended APIs jQuery.sap.declare , jQuery.sap.declare , define , require , require.predefine , sap.ui.predefine , sap.ui.requireSync and sap.ui.require.preload .","title":"Object Expression in sap.ui.define or sap.ui.require"},{"location":"pages/ESSupport/#object-expression-in-smart-template-declaration","text":"When declaring a Smart Template , the usage of an Object Expression in the configuration is not supported. Supported Not Supported sap . ui . define ([ \"sap/suite/ui/generic/template/lib/TemplateAssembler\" ], function ( TemplateAssembler ) { return TemplateAssembler . getTemplateComponent ( getMethods , \"sap.suite.ui.generic.templates.Page.Component\" , { metadata : { properties : { templateName : { type : \"string\" , defaultValue : \"sap.suite.ui.generic.templates.Page.view.Page\" } }, manifest : \"json\" } } ); }); sap . ui . define ([ \"sap/suite/ui/generic/template/lib/TemplateAssembler\" ], function ( TemplateAssembler ) { const key = \"templateName\" return TemplateAssembler . getTemplateComponent ( getMethods , `sap.suite.ui.generic.templates.Page. ${ name } ` , { metadata : { properties : { [ key ] : { type : \"string\" , defaultValue : \"sap.suite.ui.generic.templates.Page.view.Page\" } } manifest : \"json\" } } ); });","title":"Object Expression in Smart Template Declaration"},{"location":"pages/ESSupport/#object-expression-in-xmlcomposite-declaration","text":"The XMLComposite control is deprecated since version UI5 1.88. Nevertheless UI5 Tooling will attempt to analyze the declaration of any such controls in a project. When declaring an XMLComposite , the usage of an Object Expression in the configuration is not supported. Supported Not Supported sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { return XMLComposite . extend ( \"composites.MyComposite\" , { fragment : \"composites.custom.MyComposite\" } }); sap . ui . define ([ \"sap/ui/core/XMLComposite\" ], function ( XMLComposite ) { const key = \"fragment\" ; return XMLComposite . extend ( \"composites.MyComposite\" , { [ key ] : \"composites.custom.MyComposite\" }); });","title":"Object Expression in XMLComposite Declaration"},{"location":"pages/ESSupport/#object-expression-in-sapuicorecoreinitlibrary-call","text":"A library is typically initialized via an accompanying library.js . Within that file, the object which is supplied to the sap/ui/core/Core#initLibrary method, must not use an Object Expression . Supported Not Supported sap . ui . getCore (). initLibrary ({ name : \"my.lib\" }); const key = \"name\" ; sap . ui . getCore (). initLibrary ({ [ key ] : \"my.lib\" });","title":"Object Expression in sap/ui/core/Core#initLibrary Call"},{"location":"pages/ESSupport/#computed-property","text":"A Computed Property can be used in all places except in following places.","title":"Computed Property"},{"location":"pages/ESSupport/#computed-property-when-using-extend","text":"One or more Computed Property as a parameter in an UI5 Module extend call is not supported. Supported Not Supported sap . ui . define ([ \"Bar\" ], function ( Bar ){ return Bar . extend ( \"my.Bar\" {}); }); const name = \"my\" ; sap . ui . define ([ \"Bar\" ], function ( Bar ){ return Bar . extend ( name + \".Bar\" , {}); });","title":"Computed Property when using extend"},{"location":"pages/ESSupport/#computed-properties-in-sapuicorecoreinitlibrary-call","text":"A library is typically initialized via an accompanying library.js . Within that file, the object which is supplied to the sap/ui/core/Core#initLibrary method, must not use an Computed Property . Supported Not Supported sap . ui . getCore (). initLibrary ({ name : \"my.lib\" }); const name = \"my\" ; sap . ui . getCore (). initLibrary ({ name : name + \".lib\" });","title":"Computed Properties in sap/ui/core/Core#initLibrary Call"},{"location":"pages/ESSupport/#class-declaration","text":"If you want to generate a JSDoc build of your project and using a Class Declaration the class declaration should not be returned directly. Declare the class and return the class in a separate statement. If not JSDoc treats the the class declaration as a return statement and does not recognize any JSDoc if such is provided right above the class declaration. Supported Not Supported sap . ui . define ([ \"Bar\" ], function ( Bar ){ /** * JSDoc block here */ class Foo extends Bar { make () {} } return Foo ; }); sap . ui . define ([ \"Bar\" ], function ( Bar ){ /** * JSDoc block here */ return class Foo extends Bar { make () {} } });","title":"Class Declaration"},{"location":"pages/ESSupport/#arrow-function-expression","text":"If you want to generate a JSDoc build of your project and use an Arrow Function Expression the JSDoc has to be written above the arrow function and not above the sap.ui.define/sap.ui.require command. Supported Not Supported sap . ui . define ([ \"Bar\" ], /** * JSDoc block here */ ( Bar ) => Bar . extends ( \"Foo\" , { })); /** * JSDoc block here */ sap . ui . define ([ \"Bar\" ], ( Bar ) => Bar . extends ( \"Foo\" , { }));","title":"Arrow Function Expression"},{"location":"pages/FAQ/","text":"FAQ \u00b6 How Can I Contribute? \u00b6 Please check our Contribution Guidelines . How Can I Obtain Support? \u00b6 Please follow our Contribution Guidelines on how to report an issue. What's the Difference Between OpenUI5 and SAPUI5? \u00b6 The open source project OpenUI5 provides most of the fundamental framework features. SAPUI5 enhances this by providing additional libraries under a different license . OpenUI5 is provided under the Apache 2.0 license. The SAPUI5 packages that are consumed in UI5 Tooling are provided under the terms of the SAP Developer License Agreement . Note that projects which use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. However, SAPUI5 projects can depend on OpenUI5 projects. Please also see the UI5 SDK documentation \"SAPUI5 vs. OpenUI5\" . Why package.json? / Why npm? \u00b6 Currently, the tooling can only resolve dependencies defined in a package.json file. This might change in the future by adding Translators for additional dependency management systems. To manage your dependencies, you can use almost any Node.js package manager that relies on package.json files. Popular ones are npm , Yarn and pnpm . UI5 Tooling itself uses npm . UI5 Tooling resolves dependencies almost the same way Node.js does when executing a require / import statement. Where are the npm Packages? \u00b6 OpenUI5 Libraries SAPUI5 Libraries UI5 Tooling Modules","title":"FAQ"},{"location":"pages/FAQ/#faq","text":"","title":"FAQ"},{"location":"pages/FAQ/#how-can-i-contribute","text":"Please check our Contribution Guidelines .","title":"How Can I Contribute?"},{"location":"pages/FAQ/#how-can-i-obtain-support","text":"Please follow our Contribution Guidelines on how to report an issue.","title":"How Can I Obtain Support?"},{"location":"pages/FAQ/#whats-the-difference-between-openui5-and-sapui5","text":"The open source project OpenUI5 provides most of the fundamental framework features. SAPUI5 enhances this by providing additional libraries under a different license . OpenUI5 is provided under the Apache 2.0 license. The SAPUI5 packages that are consumed in UI5 Tooling are provided under the terms of the SAP Developer License Agreement . Note that projects which use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. However, SAPUI5 projects can depend on OpenUI5 projects. Please also see the UI5 SDK documentation \"SAPUI5 vs. OpenUI5\" .","title":"What's the Difference Between OpenUI5 and SAPUI5?"},{"location":"pages/FAQ/#why-packagejson-why-npm","text":"Currently, the tooling can only resolve dependencies defined in a package.json file. This might change in the future by adding Translators for additional dependency management systems. To manage your dependencies, you can use almost any Node.js package manager that relies on package.json files. Popular ones are npm , Yarn and pnpm . UI5 Tooling itself uses npm . UI5 Tooling resolves dependencies almost the same way Node.js does when executing a require / import statement.","title":"Why package.json? / Why npm?"},{"location":"pages/FAQ/#where-are-the-npm-packages","text":"OpenUI5 Libraries SAPUI5 Libraries UI5 Tooling Modules","title":"Where are the npm Packages?"},{"location":"pages/FileSystem/","text":"UI5 FS \u00b6 The UI5 FS provides a UI5-specific file system abstraction. API Reference Overview \u00b6 The virtual file system \"UI5 FS\" offers an abstraction layer from the physical file system. Among other features, it can combine a set of scattered file locations into a well-defined virtual structure. Resource \u00b6 A Resource basically represents a file. Besides providing access to the file content, it also carries metadata like the virtual path of the Resource. Resources are typically created and stored in Adapters . Once read from a physical file system, they are typically kept in memory for further processing in other modules. This ensures a high build performance, as physical read and write access for a high number of resources is kept to a minimum. Adapters \u00b6 Adapters abstract access to different resource locations. The Memory Adapter represents a virtual file system which maintains respective Resources inside a virtual data structure. The File System Adapter , on the other hand, has direct access to the physical file system. It maps a \"virtual base path\" to a given physical path. Both adapters provide APIs to retrieve and persist Resources , namely to retrieve a single resource by its virtual path use byPath() , to retrieve many resources based on patterns use byGlob() , to persist a single resource use write() . Reader Collections \u00b6 Reader collections allow grouped access to multiple adapters, which might even be nested in other reader collections. They implement the same API for retrieving resources as adapters ( byPath and byGlob ). Multiple flavors exist: ReaderCollection : The most basic collection. Allows parallel read access to multiple readers (i.e. adapters or collections) ReaderCollectionPrioritized : Contains a list of readers which are searched in-order. This allows one reader to \"overlay\" resources of another DuplexCollection : Contains a single reader and a single \"writer\". It therefore also implements the Adapter API for persisting resources ( write() ). When retrieving resources, the writer is prioritized over the reader WriterCollection : Contains a set of writers and a mapping for each of them. When writing a resource, the writer is chosen based on the resource's virtual path.","title":"File System"},{"location":"pages/FileSystem/#ui5-fs","text":"The UI5 FS provides a UI5-specific file system abstraction. API Reference","title":"UI5 FS"},{"location":"pages/FileSystem/#overview","text":"The virtual file system \"UI5 FS\" offers an abstraction layer from the physical file system. Among other features, it can combine a set of scattered file locations into a well-defined virtual structure.","title":"Overview"},{"location":"pages/FileSystem/#resource","text":"A Resource basically represents a file. Besides providing access to the file content, it also carries metadata like the virtual path of the Resource. Resources are typically created and stored in Adapters . Once read from a physical file system, they are typically kept in memory for further processing in other modules. This ensures a high build performance, as physical read and write access for a high number of resources is kept to a minimum.","title":"Resource"},{"location":"pages/FileSystem/#adapters","text":"Adapters abstract access to different resource locations. The Memory Adapter represents a virtual file system which maintains respective Resources inside a virtual data structure. The File System Adapter , on the other hand, has direct access to the physical file system. It maps a \"virtual base path\" to a given physical path. Both adapters provide APIs to retrieve and persist Resources , namely to retrieve a single resource by its virtual path use byPath() , to retrieve many resources based on patterns use byGlob() , to persist a single resource use write() .","title":"Adapters"},{"location":"pages/FileSystem/#reader-collections","text":"Reader collections allow grouped access to multiple adapters, which might even be nested in other reader collections. They implement the same API for retrieving resources as adapters ( byPath and byGlob ). Multiple flavors exist: ReaderCollection : The most basic collection. Allows parallel read access to multiple readers (i.e. adapters or collections) ReaderCollectionPrioritized : Contains a list of readers which are searched in-order. This allows one reader to \"overlay\" resources of another DuplexCollection : Contains a single reader and a single \"writer\". It therefore also implements the Adapter API for persisting resources ( write() ). When retrieving resources, the writer is prioritized over the reader WriterCollection : Contains a set of writers and a mapping for each of them. When writing a resource, the writer is chosen based on the resource's virtual path.","title":"Reader Collections"},{"location":"pages/GettingStarted/","text":"Getting Started \u00b6 Installing the UI5 CLI \u00b6 Requirements \u00b6 Node.js Versions 16.18.0, 18.12.0, or later Installation \u00b6 # Global installation to have the command available npm install --global @ui5/cli # Additional local install in your project npm install --save-dev @ui5/cli # Verify installation ui5 --help The globally installed UI5 CLI will always try to invoke a locally installed version of the UI5 CLI (if present). This way you can use different versions of the UI5 Tooling across your projects. Please see the UI5 CLI documentation for details. \u26a1\ufe0f Quick Start: OpenUI5 Sample App \u00b6 Check out the OpenUI5 Sample App featuring a full blown How-to to play around with UI5 Tooling! Starting a New Project \u00b6 The easiest way to start a new UI5 project is to use a template generator like generator-easy-ui5 . Choose a template that is designed for the type of project you want to create and the target environment where you want to deploy it to. Make sure that the template already uses UI5 Tooling. A good indicator for that is the presence of a ui5.yaml file in the generated project. When working with SAP Business Application Studio, there are several templates available to you. Check out the tutorial on creating a basic SAPUI5 application and deploying it to Cloud Foundry from within SAP Business Application Studio: Create an SAP Fiori App Using SAP Business Application Studio You can find many guides on UI5 development with SAP Business Application Studio in the Tutorial Navigator . Enabling an Existing Project \u00b6 You can easily check whether or not a project (application or library) can already be used with the UI5 Tooling by looking for a ui5.yaml file in the project's root directory. This file (with some exceptions) is required for all projects and their dependencies (e.g. reuse libraries) to use them in the UI5 Tooling. Setup \u00b6 If your project is not set up for use with the UI5 Tooling yet, follow these steps: If your project does not have a package.json file, let npm generate it: npm init --yes Generate the ui5.yaml file: ui5 init Define the framework you want to use OpenUI5 SAPUI5 ui5 use openui5@latest ui5 use sapui5@latest You can choose between the OpenUI5 and the SAPUI5 framework. Don't know which one to choose? Check out our documentation on the differences between OpenUI5 and SAPUI5 . Add required libraries ui5 add sap.ui.core sap.m sap.ui.table themelib_sap_fiori_3 # [...] You can find a documentation of all libraries, including samples and more, in the Demo Kit: OpenUI5 Demo Kit SAPUI5 Demo Kit Start the server and work on your project! \ud83c\udf89 ui5 serve Tip Use ui5 serve to start a local development server and ui5 build --all to produce an optimized, static version of your project, which you can then deploy to your production environment. Find more information here: Server Builder CLI If you are using Git or similar version control, commit package.json and ui5.yaml to your repository. git add package.json ui5.yaml git commit -m \"Enable use with UI5 Tooling\" Hooray! You can now use UI5 Tooling in your project!","title":"Getting Started"},{"location":"pages/GettingStarted/#getting-started","text":"","title":"Getting Started"},{"location":"pages/GettingStarted/#installing-the-ui5-cli","text":"","title":"Installing the UI5 CLI"},{"location":"pages/GettingStarted/#requirements","text":"Node.js Versions 16.18.0, 18.12.0, or later","title":"Requirements"},{"location":"pages/GettingStarted/#installation","text":"# Global installation to have the command available npm install --global @ui5/cli # Additional local install in your project npm install --save-dev @ui5/cli # Verify installation ui5 --help The globally installed UI5 CLI will always try to invoke a locally installed version of the UI5 CLI (if present). This way you can use different versions of the UI5 Tooling across your projects. Please see the UI5 CLI documentation for details.","title":"Installation"},{"location":"pages/GettingStarted/#quick-start-openui5-sample-app","text":"Check out the OpenUI5 Sample App featuring a full blown How-to to play around with UI5 Tooling!","title":"\u26a1\ufe0f Quick Start: OpenUI5 Sample App"},{"location":"pages/GettingStarted/#starting-a-new-project","text":"The easiest way to start a new UI5 project is to use a template generator like generator-easy-ui5 . Choose a template that is designed for the type of project you want to create and the target environment where you want to deploy it to. Make sure that the template already uses UI5 Tooling. A good indicator for that is the presence of a ui5.yaml file in the generated project. When working with SAP Business Application Studio, there are several templates available to you. Check out the tutorial on creating a basic SAPUI5 application and deploying it to Cloud Foundry from within SAP Business Application Studio: Create an SAP Fiori App Using SAP Business Application Studio You can find many guides on UI5 development with SAP Business Application Studio in the Tutorial Navigator .","title":"Starting a New Project"},{"location":"pages/GettingStarted/#enabling-an-existing-project","text":"You can easily check whether or not a project (application or library) can already be used with the UI5 Tooling by looking for a ui5.yaml file in the project's root directory. This file (with some exceptions) is required for all projects and their dependencies (e.g. reuse libraries) to use them in the UI5 Tooling.","title":"Enabling an Existing Project"},{"location":"pages/GettingStarted/#setup","text":"If your project is not set up for use with the UI5 Tooling yet, follow these steps: If your project does not have a package.json file, let npm generate it: npm init --yes Generate the ui5.yaml file: ui5 init Define the framework you want to use OpenUI5 SAPUI5 ui5 use openui5@latest ui5 use sapui5@latest You can choose between the OpenUI5 and the SAPUI5 framework. Don't know which one to choose? Check out our documentation on the differences between OpenUI5 and SAPUI5 . Add required libraries ui5 add sap.ui.core sap.m sap.ui.table themelib_sap_fiori_3 # [...] You can find a documentation of all libraries, including samples and more, in the Demo Kit: OpenUI5 Demo Kit SAPUI5 Demo Kit Start the server and work on your project! \ud83c\udf89 ui5 serve Tip Use ui5 serve to start a local development server and ui5 build --all to produce an optimized, static version of your project, which you can then deploy to your production environment. Find more information here: Server Builder CLI If you are using Git or similar version control, commit package.json and ui5.yaml to your repository. git add package.json ui5.yaml git commit -m \"Enable use with UI5 Tooling\" Hooray! You can now use UI5 Tooling in your project!","title":"Setup"},{"location":"pages/OpenUI5/","text":"Consuming OpenUI5 Libraries \u00b6 OpenUI5 consumption with UI5 Tooling is very similar to SAPUI5 consumption. Please refer to the documentation on Consuming SAPUI5 Libraries for a general description of how UI5 Tooling can fetch and provide framework dependencies to your project. Note that projects using the SAPUI5 framework can depend on projects using the OpenUI5 framework. However, OpenUI5 projects can't depend on SAPUI5 projects. Please also refer to our documentation on the differences between OpenUI5 and SAPUI5 . Info The minimum OpenUI5 version that can be consumed by UI5 Tooling is 1.52.5 Configuration \u00b6 Your project's ui5.yaml provides a configuration section dedicated to framework dependency handling. This configuration can be maintained by editing the file, or by using the UI5 CLI: Example Using the UI5 CLI : ui5 use openui5@latest ui5 add sap.ui.core sap.m sap.ui.table themelib_sap_fiori_3 Example ui5.yaml of an application specVersion : \"3.0\" type : application metadata : name : some.project.name framework : name : OpenUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 Example ui5.yaml of a library specVersion : \"3.0\" type : library metadata : name : some.library framework : name : OpenUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Please make sure that your project defines Specification Version 2.0 or higher. For details, please see the corresponding framework configuration documentation . Linking Framework Dependencies \u00b6 When working on UI5 applications or libraries that use OpenUI5, you can link a local OpenUI5 repository into that project. This allows you to make changes to the project itself as well as to the OpenUI5 libraries simultaneously and test them immediately. A detailed step-by-step guide on how to achieve such a setup with the OpenUI5 Sample App can be found here . OpenUI5 Framework Development \u00b6 Please refer to the OpenUI5 Framework Development Documentation .","title":"OpenUI5"},{"location":"pages/OpenUI5/#consuming-openui5-libraries","text":"OpenUI5 consumption with UI5 Tooling is very similar to SAPUI5 consumption. Please refer to the documentation on Consuming SAPUI5 Libraries for a general description of how UI5 Tooling can fetch and provide framework dependencies to your project. Note that projects using the SAPUI5 framework can depend on projects using the OpenUI5 framework. However, OpenUI5 projects can't depend on SAPUI5 projects. Please also refer to our documentation on the differences between OpenUI5 and SAPUI5 . Info The minimum OpenUI5 version that can be consumed by UI5 Tooling is 1.52.5","title":"Consuming OpenUI5 Libraries"},{"location":"pages/OpenUI5/#configuration","text":"Your project's ui5.yaml provides a configuration section dedicated to framework dependency handling. This configuration can be maintained by editing the file, or by using the UI5 CLI: Example Using the UI5 CLI : ui5 use openui5@latest ui5 add sap.ui.core sap.m sap.ui.table themelib_sap_fiori_3 Example ui5.yaml of an application specVersion : \"3.0\" type : application metadata : name : some.project.name framework : name : OpenUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 Example ui5.yaml of a library specVersion : \"3.0\" type : library metadata : name : some.library framework : name : OpenUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Please make sure that your project defines Specification Version 2.0 or higher. For details, please see the corresponding framework configuration documentation .","title":"Configuration"},{"location":"pages/OpenUI5/#linking-framework-dependencies","text":"When working on UI5 applications or libraries that use OpenUI5, you can link a local OpenUI5 repository into that project. This allows you to make changes to the project itself as well as to the OpenUI5 libraries simultaneously and test them immediately. A detailed step-by-step guide on how to achieve such a setup with the OpenUI5 Sample App can be found here .","title":"Linking Framework Dependencies"},{"location":"pages/OpenUI5/#openui5-framework-development","text":"Please refer to the OpenUI5 Framework Development Documentation .","title":"OpenUI5 Framework Development"},{"location":"pages/Overview/","text":"Development Overview \u00b6 When developing a UI5 project on your local system, you should use the UI5 Server ( ui5 serve ) and not the UI5 Builder ( ui5 build ). Building a project should only be required when deploying it. However, you might have good reasons to also use the UI5 Builder during development. In such cases, feel free to let us know! Maybe your use case could be covered by a future enhancement of the UI5 Server. Project Dependencies \u00b6 UI5 Tooling differentiates between \"framework dependencies\" and \"project dependencies\". Framework dependencies are generally libraries and themes provided by the SAP frameworks \"OpenUI5\" and \"SAPUI5\". UI5 Tooling will take care of downloading them and handling their versions for you. Please see the corresponding documentation on both options: Working with OpenUI5 Framework Dependencies Working with SAPUI5 Framework Dependencies Project dependencies are all other libraries, custom themes, UI5 Tooling extensions or JavaScript modules your project depends on. In general these dependencies are maintained in the package.json of your project. See also: FAQ: Why package.json? / Why npm? . Linking Projects \u00b6 Would you like to work on an application project and one or more of its dependencies at the same time? We got you covered! UI5 Workspaces \u00b6 The recommended approach for setting up a development environment where simultaneous work on multiple UI5 projects is required. Head over to the UI5 Workspaces documentation for the details. Below is an example based on a simple scenario with an application and a reuse library project: Example: Your Directory Structure my-app/ \\_ node_modules/ \\_ webapp/ \\_ ui5.yaml \\_ package.json my-reuse-library/ \\_ node_modules/ \\_ src/ \\_ test/ \\_ ui5.yaml \\_ package.json In its package.json , my-app should already define a dependency to my-reuse-library . So, after running the npm install command, a copy of the my-reuse-library -package should be retrieved from the package registry and added to my-app's node_modules/ directory. In the my-app directory, create a new file named ui5-workspace.yaml with the following content: ui5-workspace.yaml specVersion : workspace/1.0 metadata : name : default dependencyManagement : resolutions : - path : ../my-reuse-library That's it! Start a server via ui5 serve , and you will see that any changes you make in my-reuse-library are immediately visible in my-app . Package Managers \u00b6 By leaving dependency management up to the tool of your choice (see FAQ: Why package.json? / Why npm? ) you have a variety of other options for linking dependencies into your project. Here is an example using the npm CLI in Version 8, an application, and a reuse library project: Example: Your Directory Structure my-app/ \\_ node_modules/ \\_ webapp/ \\_ ui5.yaml \\_ package.json my-reuse-library/ \\_ node_modules/ \\_ src/ \\_ test/ \\_ ui5.yaml \\_ package.json In its package.json , my-app should already define a dependency to my-reuse-library . So, after running the npm install command, a copy of the \"my-reuse-library\"-package should be retrieved from the package registry and added to my-app's node_modules/ directory. Now all you need to do is replacing this copy of the my-reuse-library package with a link to the my-reuse-library project located somewhere on your computer. In this example it is right next to my-app , but that doesn't really matter. First, in the directory of the my-reuse-library project, create a global link: npm link Then, in the my-app directory, use that link to replace the registry package: npm link my-reuse-library Note: \"my-reuse-library\" is the name defined in the package.json and not necessarily the directory or ui5.yaml name That's it. You can check whether the linking worked by executing ui5 tree in the my-app directory and looking for the path attributes in its output. Static Dependency Definition \u00b6 As an alternative to defining your project dependencies in the package.json , you can define a static dependency hierarchy for the project in a YAML file. This is typically only advised in special cases where none of the other concepts work. To use such a file in UI5 CLI, provide a path to it using the --dependency-definition parameter. Note that all package.json dependencies will be ignored (including UI5 Tooling extensions), but UI5 framework dependencies defined in ui5.yaml will still be used. Example: projectDependencies.yaml id : my.app version : \"local\" path : \".\" dependencies : - id : my.lib version : \"local\" path : \"../my.lib\" By placing this file in the root directory of the my.app application project, you can start a server with a local copy of the my.lib dependency, located in the same parent directory, using the command ui5 serve --dependency-definition ./projectDependencies.yaml . The structure of the dependency definition file follows that of the @ui5/project/graph/providers/DependencyTree~TreeNode type. HTTP/2 Development Webserver \u00b6 The UI5 Tooling contains a web server to serve the project via HTTP/2 protocol. ui5 serve --h2 This requires an SSL certificate. You are guided through the automatic generation process. Also see the UI5 Server documentation Integration in Other Tools \u00b6 One of the key features of the UI5 Tooling is its modularization. Single parts of the tooling can easily be integrated in other Node.js -based tools and frameworks like Grunt or Gulp . All JavaScript APIs available for direct consumption are listed here . However, for standard UI5 development, the UI5 CLI should always be the first choice.","title":"Overview"},{"location":"pages/Overview/#development-overview","text":"When developing a UI5 project on your local system, you should use the UI5 Server ( ui5 serve ) and not the UI5 Builder ( ui5 build ). Building a project should only be required when deploying it. However, you might have good reasons to also use the UI5 Builder during development. In such cases, feel free to let us know! Maybe your use case could be covered by a future enhancement of the UI5 Server.","title":"Development Overview"},{"location":"pages/Overview/#project-dependencies","text":"UI5 Tooling differentiates between \"framework dependencies\" and \"project dependencies\". Framework dependencies are generally libraries and themes provided by the SAP frameworks \"OpenUI5\" and \"SAPUI5\". UI5 Tooling will take care of downloading them and handling their versions for you. Please see the corresponding documentation on both options: Working with OpenUI5 Framework Dependencies Working with SAPUI5 Framework Dependencies Project dependencies are all other libraries, custom themes, UI5 Tooling extensions or JavaScript modules your project depends on. In general these dependencies are maintained in the package.json of your project. See also: FAQ: Why package.json? / Why npm? .","title":"Project Dependencies"},{"location":"pages/Overview/#linking-projects","text":"Would you like to work on an application project and one or more of its dependencies at the same time? We got you covered!","title":"Linking Projects"},{"location":"pages/Overview/#ui5-workspaces","text":"The recommended approach for setting up a development environment where simultaneous work on multiple UI5 projects is required. Head over to the UI5 Workspaces documentation for the details. Below is an example based on a simple scenario with an application and a reuse library project: Example: Your Directory Structure my-app/ \\_ node_modules/ \\_ webapp/ \\_ ui5.yaml \\_ package.json my-reuse-library/ \\_ node_modules/ \\_ src/ \\_ test/ \\_ ui5.yaml \\_ package.json In its package.json , my-app should already define a dependency to my-reuse-library . So, after running the npm install command, a copy of the my-reuse-library -package should be retrieved from the package registry and added to my-app's node_modules/ directory. In the my-app directory, create a new file named ui5-workspace.yaml with the following content: ui5-workspace.yaml specVersion : workspace/1.0 metadata : name : default dependencyManagement : resolutions : - path : ../my-reuse-library That's it! Start a server via ui5 serve , and you will see that any changes you make in my-reuse-library are immediately visible in my-app .","title":"UI5 Workspaces"},{"location":"pages/Overview/#package-managers","text":"By leaving dependency management up to the tool of your choice (see FAQ: Why package.json? / Why npm? ) you have a variety of other options for linking dependencies into your project. Here is an example using the npm CLI in Version 8, an application, and a reuse library project: Example: Your Directory Structure my-app/ \\_ node_modules/ \\_ webapp/ \\_ ui5.yaml \\_ package.json my-reuse-library/ \\_ node_modules/ \\_ src/ \\_ test/ \\_ ui5.yaml \\_ package.json In its package.json , my-app should already define a dependency to my-reuse-library . So, after running the npm install command, a copy of the \"my-reuse-library\"-package should be retrieved from the package registry and added to my-app's node_modules/ directory. Now all you need to do is replacing this copy of the my-reuse-library package with a link to the my-reuse-library project located somewhere on your computer. In this example it is right next to my-app , but that doesn't really matter. First, in the directory of the my-reuse-library project, create a global link: npm link Then, in the my-app directory, use that link to replace the registry package: npm link my-reuse-library Note: \"my-reuse-library\" is the name defined in the package.json and not necessarily the directory or ui5.yaml name That's it. You can check whether the linking worked by executing ui5 tree in the my-app directory and looking for the path attributes in its output.","title":"Package Managers"},{"location":"pages/Overview/#static-dependency-definition","text":"As an alternative to defining your project dependencies in the package.json , you can define a static dependency hierarchy for the project in a YAML file. This is typically only advised in special cases where none of the other concepts work. To use such a file in UI5 CLI, provide a path to it using the --dependency-definition parameter. Note that all package.json dependencies will be ignored (including UI5 Tooling extensions), but UI5 framework dependencies defined in ui5.yaml will still be used. Example: projectDependencies.yaml id : my.app version : \"local\" path : \".\" dependencies : - id : my.lib version : \"local\" path : \"../my.lib\" By placing this file in the root directory of the my.app application project, you can start a server with a local copy of the my.lib dependency, located in the same parent directory, using the command ui5 serve --dependency-definition ./projectDependencies.yaml . The structure of the dependency definition file follows that of the @ui5/project/graph/providers/DependencyTree~TreeNode type.","title":"Static Dependency Definition"},{"location":"pages/Overview/#http2-development-webserver","text":"The UI5 Tooling contains a web server to serve the project via HTTP/2 protocol. ui5 serve --h2 This requires an SSL certificate. You are guided through the automatic generation process. Also see the UI5 Server documentation","title":"HTTP/2 Development Webserver"},{"location":"pages/Overview/#integration-in-other-tools","text":"One of the key features of the UI5 Tooling is its modularization. Single parts of the tooling can easily be integrated in other Node.js -based tools and frameworks like Grunt or Gulp . All JavaScript APIs available for direct consumption are listed here . However, for standard UI5 development, the UI5 CLI should always be the first choice.","title":"Integration in Other Tools"},{"location":"pages/Privacy/","text":"Privacy \u00b6 This site is hosted by GitHub Pages . Please see the GitHub Privacy Statement for any information how GitHub processes your personal data.","title":"Privacy"},{"location":"pages/Privacy/#privacy","text":"This site is hosted by GitHub Pages . Please see the GitHub Privacy Statement for any information how GitHub processes your personal data.","title":"Privacy"},{"location":"pages/Project/","text":"UI5 Project \u00b6 The UI5 Project module provides functionality to build a UI5 project. Also see Development Overview: Project Dependencies . API Reference","title":"Project"},{"location":"pages/Project/#ui5-project","text":"The UI5 Project module provides functionality to build a UI5 project. Also see Development Overview: Project Dependencies . API Reference","title":"UI5 Project"},{"location":"pages/SAPUI5/","text":"Consuming SAPUI5 Libraries \u00b6 Info Make sure you have installed the UI5 CLI in Version 2.0 or later: npm install --global @ui5/cli The minimum version of SAPUI5 that can be consumed by UI5 Tooling as described below is 1.76.0. For lower versions, consider using the CDN bootstrap or a custom middleware like ui5-middleware-simpleproxy . Overview \u00b6 SAPUI5 libraries are hosted on the public npm registry at registry.npmjs.org . However, you should not install them using node package managers such as npm. Let UI5 Tooling handle them instead by following this guide. Note For more background information also see the Blog Post \"UI5ers Buzz #49: The UI5 Tooling and SAPUI5 \u2013 The Next Step\" Usage \u00b6 Since Version 2.0 of the UI5 CLI, it will automatically download all required framework dependencies of a project that have been listed in the corresponding ui5.yaml file. They will be cached in a .ui5 directory located in the user's home directory. This happens transparently whenever you execute the ui5 serve or ui5 build commands. All non-framework dependencies, such as reuse libraries or UI5 Tooling extensions, still need to be maintained as npm dependencies in the projects package.json . At the same time, framework dependencies listed in the ui5.yaml should not be listed in the package.json as they will be ignored by the UI5 Tooling. Configuration \u00b6 Your project's ui5.yaml provides a configuration section dedicated to framework dependency handling. This configuration can be maintained by editing the file, or by using the UI5 CLI: Example Using the UI5 CLI : ui5 use sapui5@latest ui5 add sap.ui.core sap.m sap.ui.comp themelib_sap_fiori_3 ui5 add -D sap.ushell Example ui5.yaml of an application specVersion : \"3.0\" type : application metadata : name : some.project.name framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp - name : sap.ushell development : true - name : themelib_sap_fiori_3 Example ui5.yaml of a library specVersion : \"3.0\" type : library metadata : name : some.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Please make sure that your project defines Specification Version 2.0 or higher. For details please refer to the framework configuration documentation . Differences Between OpenUI5 and SAPUI5 \u00b6 Please refer to our documentation on the differences between OpenUI5 and SAPUI5","title":"SAPUI5"},{"location":"pages/SAPUI5/#consuming-sapui5-libraries","text":"Info Make sure you have installed the UI5 CLI in Version 2.0 or later: npm install --global @ui5/cli The minimum version of SAPUI5 that can be consumed by UI5 Tooling as described below is 1.76.0. For lower versions, consider using the CDN bootstrap or a custom middleware like ui5-middleware-simpleproxy .","title":"Consuming SAPUI5 Libraries"},{"location":"pages/SAPUI5/#overview","text":"SAPUI5 libraries are hosted on the public npm registry at registry.npmjs.org . However, you should not install them using node package managers such as npm. Let UI5 Tooling handle them instead by following this guide. Note For more background information also see the Blog Post \"UI5ers Buzz #49: The UI5 Tooling and SAPUI5 \u2013 The Next Step\"","title":"Overview"},{"location":"pages/SAPUI5/#usage","text":"Since Version 2.0 of the UI5 CLI, it will automatically download all required framework dependencies of a project that have been listed in the corresponding ui5.yaml file. They will be cached in a .ui5 directory located in the user's home directory. This happens transparently whenever you execute the ui5 serve or ui5 build commands. All non-framework dependencies, such as reuse libraries or UI5 Tooling extensions, still need to be maintained as npm dependencies in the projects package.json . At the same time, framework dependencies listed in the ui5.yaml should not be listed in the package.json as they will be ignored by the UI5 Tooling.","title":"Usage"},{"location":"pages/SAPUI5/#configuration","text":"Your project's ui5.yaml provides a configuration section dedicated to framework dependency handling. This configuration can be maintained by editing the file, or by using the UI5 CLI: Example Using the UI5 CLI : ui5 use sapui5@latest ui5 add sap.ui.core sap.m sap.ui.comp themelib_sap_fiori_3 ui5 add -D sap.ushell Example ui5.yaml of an application specVersion : \"3.0\" type : application metadata : name : some.project.name framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp - name : sap.ushell development : true - name : themelib_sap_fiori_3 Example ui5.yaml of a library specVersion : \"3.0\" type : library metadata : name : some.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Please make sure that your project defines Specification Version 2.0 or higher. For details please refer to the framework configuration documentation .","title":"Configuration"},{"location":"pages/SAPUI5/#differences-between-openui5-and-sapui5","text":"Please refer to our documentation on the differences between OpenUI5 and SAPUI5","title":"Differences Between OpenUI5 and SAPUI5"},{"location":"pages/Server/","text":"UI5 Server \u00b6 The UI5 Server module provides server capabilities for local development of UI5 projects. API Reference Standard Middleware \u00b6 All available standard middleware are listed below in the order of their execution. A project can also add custom middleware to the server by using the Custom Server Middleware Extensibility . Middleware Description csp See chapter csp compression Standard Express compression middleware cors Standard Express cors middleware discovery See chapter discovery serveResources See chapter serveResources testRunner See chapter testRunner serveThemes See chapter serveThemes versionInfo See chapter versionInfo nonReadRequests See chapter nonReadRequests serveIndex See chapter serveIndex csp \u00b6 The Content Security Policy ( CSP ) middleware is active by default. The header content-security-policy can be set by adding URL parameter sap-ui-xx-csp-policy to the request with the policy name as value. To set the policy to report-only, append :report-only or :ro to the policy name. E.g. /index.html?sap-ui-xx-csp-policy=sap-target-level-1:report-only sendSAPTargetCSP parameter \u00b6 The default CSP policies can be modified using parameter sendSAPTargetCSP ( --sap-csp-policies when using the CLI). With sendSAPTargetCSP set to true the policies sap-target-level-1 and sap-target-level-3 policies are activated and send as report-only. Serve CSP Reports \u00b6 Serving of CSP reports can be activated with parameter serveCSPReports ( --serve-csp-reports when using the CLI). With serveCSPReports set to true , the CSP reports are collected and can be downloaded from the server path /.ui5/csp/csp-reports.json . discovery \u00b6 This middleware lists project files with URLs under several /discovery endpoints. This is exclusively used by the OpenUI5 test suite application. serveResources \u00b6 This middleware resolves requests using the ui5-fs -file system abstraction. It also escapes non-ASCII characters in .properties translation files based on a project's configuration . testRunner \u00b6 Serves a static version of the UI5 QUnit TestRunner at /test-resources/sap/ui/qunit/testrunner.html . serveThemes \u00b6 Compiles CSS files for themes on-the-fly from the source *.less files. Changes made to these *.less files while the server is running will automatically lead to the re-compilation of the relevant CSS files when requested again. versionInfo \u00b6 Generates and serves the version info file /resources/sap-ui-version.json , which is required for several framework functionalities. nonReadRequests \u00b6 Answers all non-read requests (POST, PUT, DELETE, etc.) that have not been answered by any other middleware with the 404 \"Not Found\" status code . This signals the client that these operations are not supported by the server. serveIndex \u00b6 In case a directory has been requested, this middleware renders an HTML with a list of the directory's content. SSL Certificates \u00b6 When starting the UI5 Server in HTTPS- or HTTP/2 mode, for example by using UI5 CLI parameter --h2 , you will be prompted for the automatic generation of a local SSL certificate if necessary. Follow the given instructions and enter your password to install the generated certificate as trusted. You can find the generated certificate and corresponding private key under .ui5/server in your user's home directory. Tip If Chrome unintentionally redirects an HTTP-URL to HTTPS, you need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost) and pressing \"delete\".","title":"Server"},{"location":"pages/Server/#ui5-server","text":"The UI5 Server module provides server capabilities for local development of UI5 projects. API Reference","title":"UI5 Server"},{"location":"pages/Server/#standard-middleware","text":"All available standard middleware are listed below in the order of their execution. A project can also add custom middleware to the server by using the Custom Server Middleware Extensibility . Middleware Description csp See chapter csp compression Standard Express compression middleware cors Standard Express cors middleware discovery See chapter discovery serveResources See chapter serveResources testRunner See chapter testRunner serveThemes See chapter serveThemes versionInfo See chapter versionInfo nonReadRequests See chapter nonReadRequests serveIndex See chapter serveIndex","title":"Standard Middleware"},{"location":"pages/Server/#csp","text":"The Content Security Policy ( CSP ) middleware is active by default. The header content-security-policy can be set by adding URL parameter sap-ui-xx-csp-policy to the request with the policy name as value. To set the policy to report-only, append :report-only or :ro to the policy name. E.g. /index.html?sap-ui-xx-csp-policy=sap-target-level-1:report-only","title":"csp"},{"location":"pages/Server/#sendsaptargetcsp-parameter","text":"The default CSP policies can be modified using parameter sendSAPTargetCSP ( --sap-csp-policies when using the CLI). With sendSAPTargetCSP set to true the policies sap-target-level-1 and sap-target-level-3 policies are activated and send as report-only.","title":"sendSAPTargetCSP parameter"},{"location":"pages/Server/#serve-csp-reports","text":"Serving of CSP reports can be activated with parameter serveCSPReports ( --serve-csp-reports when using the CLI). With serveCSPReports set to true , the CSP reports are collected and can be downloaded from the server path /.ui5/csp/csp-reports.json .","title":"Serve CSP Reports"},{"location":"pages/Server/#discovery","text":"This middleware lists project files with URLs under several /discovery endpoints. This is exclusively used by the OpenUI5 test suite application.","title":"discovery"},{"location":"pages/Server/#serveresources","text":"This middleware resolves requests using the ui5-fs -file system abstraction. It also escapes non-ASCII characters in .properties translation files based on a project's configuration .","title":"serveResources"},{"location":"pages/Server/#testrunner","text":"Serves a static version of the UI5 QUnit TestRunner at /test-resources/sap/ui/qunit/testrunner.html .","title":"testRunner"},{"location":"pages/Server/#servethemes","text":"Compiles CSS files for themes on-the-fly from the source *.less files. Changes made to these *.less files while the server is running will automatically lead to the re-compilation of the relevant CSS files when requested again.","title":"serveThemes"},{"location":"pages/Server/#versioninfo","text":"Generates and serves the version info file /resources/sap-ui-version.json , which is required for several framework functionalities.","title":"versionInfo"},{"location":"pages/Server/#nonreadrequests","text":"Answers all non-read requests (POST, PUT, DELETE, etc.) that have not been answered by any other middleware with the 404 \"Not Found\" status code . This signals the client that these operations are not supported by the server.","title":"nonReadRequests"},{"location":"pages/Server/#serveindex","text":"In case a directory has been requested, this middleware renders an HTML with a list of the directory's content.","title":"serveIndex"},{"location":"pages/Server/#ssl-certificates","text":"When starting the UI5 Server in HTTPS- or HTTP/2 mode, for example by using UI5 CLI parameter --h2 , you will be prompted for the automatic generation of a local SSL certificate if necessary. Follow the given instructions and enter your password to install the generated certificate as trusted. You can find the generated certificate and corresponding private key under .ui5/server in your user's home directory. Tip If Chrome unintentionally redirects an HTTP-URL to HTTPS, you need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost) and pressing \"delete\".","title":"SSL Certificates"},{"location":"pages/Troubleshooting/","text":"Troubleshooting \u00b6 UI5 Server \u00b6 Chrome Redirects HTTP URLs to HTTPS ( ERR_SSL_PROTOCOL_ERROR ) \u00b6 An HTTPS server or proxy that was previously running on a domain (e.g. localhost ), might have set an HSTS header, enforcing Chrome to always use HTTPS for this domain. See https://www.chromium.org/hsts . This makes it impossible to connect to an HTTP-only server running on the same domain. Resolution \u00b6 You need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost ) and pressing \"delete\". Issues Not Listed Here \u00b6 Please follow our Contribution Guidelines on how to report an issue. UI5 Project \u00b6 ~/.ui5 Taking too Much Disk Space \u00b6 There are possibly many versions of UI5 framework dependencies installed on your system, taking a large amount of disk space. Resolution \u00b6 Remove the .ui5/framework/ directory from your user's home directory: rm -rf ~/.ui5/framework/ Any missing framework dependencies will be downloaded again during the next UI5 Tooling invocation. Environment Variables \u00b6 Changing the Log Level \u00b6 In CI environments or in a combination with other tools, the usage of UI5 CLI's --log-level command parameter might be inconvenient and even impossible. Resolution \u00b6 Replace UI5 Tooling's --log-level option with the UI5_LOG_LVL environment variable. Example: UI5_LOG_LVL=silly ui5 build On Windows: set UI5_LOG_LVL=silly ui5 build Cross Environment via cross-env : cross-env UI5_LOG_LVL=silly ui5 build UI5 + Karma: cross-env UI5_LOG_LVL=verbose npm run karma Warning The combination of the UI5_LOG_LVL environment variable with the --log-level CLI parameter might lead to unexpected results; they should be used interchangeably but not together. The CLI parameter takes precedence over the UI5_LOG_LVL environment variable.","title":"Troubleshooting"},{"location":"pages/Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"pages/Troubleshooting/#ui5-server","text":"","title":"UI5 Server"},{"location":"pages/Troubleshooting/#chrome-redirects-http-urls-to-https-err_ssl_protocol_error","text":"An HTTPS server or proxy that was previously running on a domain (e.g. localhost ), might have set an HSTS header, enforcing Chrome to always use HTTPS for this domain. See https://www.chromium.org/hsts . This makes it impossible to connect to an HTTP-only server running on the same domain.","title":"Chrome Redirects HTTP URLs to HTTPS (ERR_SSL_PROTOCOL_ERROR)"},{"location":"pages/Troubleshooting/#resolution","text":"You need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost ) and pressing \"delete\".","title":"Resolution"},{"location":"pages/Troubleshooting/#issues-not-listed-here","text":"Please follow our Contribution Guidelines on how to report an issue.","title":"Issues Not Listed Here"},{"location":"pages/Troubleshooting/#ui5-project","text":"","title":"UI5 Project"},{"location":"pages/Troubleshooting/#ui5-taking-too-much-disk-space","text":"There are possibly many versions of UI5 framework dependencies installed on your system, taking a large amount of disk space.","title":"~/.ui5 Taking too Much Disk Space"},{"location":"pages/Troubleshooting/#resolution_1","text":"Remove the .ui5/framework/ directory from your user's home directory: rm -rf ~/.ui5/framework/ Any missing framework dependencies will be downloaded again during the next UI5 Tooling invocation.","title":"Resolution"},{"location":"pages/Troubleshooting/#environment-variables","text":"","title":"Environment Variables"},{"location":"pages/Troubleshooting/#changing-the-log-level","text":"In CI environments or in a combination with other tools, the usage of UI5 CLI's --log-level command parameter might be inconvenient and even impossible.","title":"Changing the Log Level"},{"location":"pages/Troubleshooting/#resolution_2","text":"Replace UI5 Tooling's --log-level option with the UI5_LOG_LVL environment variable. Example: UI5_LOG_LVL=silly ui5 build On Windows: set UI5_LOG_LVL=silly ui5 build Cross Environment via cross-env : cross-env UI5_LOG_LVL=silly ui5 build UI5 + Karma: cross-env UI5_LOG_LVL=verbose npm run karma Warning The combination of the UI5_LOG_LVL environment variable with the --log-level CLI parameter might lead to unexpected results; they should be used interchangeably but not together. The CLI parameter takes precedence over the UI5_LOG_LVL environment variable.","title":"Resolution"},{"location":"pages/Workspace/","text":"UI5 Workspaces \u00b6 Info UI5 Workspaces is a new feature available since UI5 CLI v3.0.0 Example ui5-workspace.yaml specVersion : workspace/1.0 metadata : name : default dependencyManagement : resolutions : - path : ../heavy.library General Concept \u00b6 UI5 Workspaces can be used to create a personalized local development environment for a UI5 project. They allow to use UI5 dependencies from local directories without the need to use the link features of package managers like npm. \"UI5 dependencies\" generally refers to projects that have a ui5.yaml . Workspaces are typically configured in a ui5-workspace.yaml file, located next to the project's ui5.yaml . The file can contain one or many workspace configurations, each separated by three dashes . For example: Example ui5-workspace.yaml specVersion : workspace/1.0 metadata : name : default dependencyManagement : resolutions : - path : ../heavy.library --- specVersion : workspace/1.0 metadata : name : extended dependencyManagement : resolutions : - path : ../heavy.library - path : ../light.library - path : ../test.library If a workspace configuration named default exists, it will be used automatically; otherwise the workspace must be specified using the UI5 CLI parameter --workspace . Workspaces can only be used in the project that is currently being worked on, i.e. the current root project. Workspace configurations of dependencies are ignored. The workspace file, however, does not necessarily have to be located within the project. You can reference any workspace configuration file via the UI5 CLI parameter --workspace-config . This concept has been discussed in an RFC: RFC 0006 Local Dependency Resolution Configuration \u00b6 A UI5 Workspace configuration must define a specification version ( specVersion ) compatible with its configuration. For more information, see Workspace Specification Versions . specVersion : \"workspace/1.0\" Metadata \u00b6 Example specVersion : workspace/1.0 metadata : name : dolphin name \u00b6 A workspace must have a name . This allows to easily switch between individual workspace configurations. If a workspace is named default , it will be used automatically , unless a different workspace is selected using the --workspace CLI parameter. The name property must satisfy the following conditions. They are identical to project names : Must be at least 3 characters long Must be no longer than 80 characters Must contain lowercase characters only Must contain alphanumeric characters, dash, underscore and period only Exception: The @ and / characters are allowed at certain positions as explained below Must start with an alphabetic character or an @ character If it starts with an @ character, it must contain exactly one forward slash / This is aligned with the npm concept for package scopes, for example @org/lib.name Dependency Management \u00b6 UI5 Workspace configurations allow to influence the dependency resolution when working with a UI5 project. Example specVersion : workspace/1.0 metadata : name : dolphin dependencyManagement : resolutions : - path : ../light.library - path : ../heavy.library - path : ../test.library Resolutions \u00b6 dependencyManagement : resolutions : - path : ../test.library Resolution paths will be used by UI5 Tooling to look for project dependencies. Any dependencies found via these paths will be used over the ones found with the regular dependency resolution mechanism. This includes UI5 Tooling extensions. Paths must point to a directory containing a package.json . UI5 Tooling will attempt to find a UI5 project here. However, if the package.json contains a workspaces , or equivalently, ui5.workspaces configuration (which overrules the first), UI5 Tooling will resolve the workspace first and attempt to find UI5 projects in the configured \"npm workspaces\". This is commonly used in mono-repos. An example can be found in the OpenUI5 repository . Paths must be written in POSIX (i.e. using only forward slashes / as path segment separators) and must be relative to the workspace configuration file . Absolute paths, or paths relative to the home directory ( ~ ), are not allowed. This is to ensure that workspace configuration files are easy to share and to reduce the chance of them exposing sensitive information like user names or large directory hierarchies. Symbolic links are followed. Note that this configuration only affects the resolution of dependencies which have already been found during the regular dependency resolution process of a project. For example, if a workspace resolution path resolves to a project that would otherwise not be part of the dependency tree of the current root project, it will not be added to the dependency tree. Also, transitive dependencies of resolved projects are not being followed. Workspace Specification Versions \u00b6 A workspace configuration must define a Specification Version by setting the specVersion property. UI5 Tooling uses this information to detect whether the currently installed version is compatible with a workspace's configuration. specVersion : \"workspace/1.0\" [ ... ] To use new features, a workspace configuration might need to update the specVersion property. For a given Specification Version \"workspace/ MAJOR.MINOR \"\" we will increment: MAJOR when there are breaking changes that might require additional actions by the project's maintainer MINOR when adding new features that are fully backward-compatible All changes are documented below. Compatibility Matrix \u00b6 Unless otherwise noted in the table below, UI5 Tooling modules are backward-compatible. Version UI5 CLI Release workspace/1.0 v3.0.0+ Specification Version workspace/1.0 \u00b6 Initial version. Specification Version workspace/1.0 configurations are compatible with UI5 CLI v3.0.0 and above.","title":"Workspace"},{"location":"pages/Workspace/#ui5-workspaces","text":"Info UI5 Workspaces is a new feature available since UI5 CLI v3.0.0 Example ui5-workspace.yaml specVersion : workspace/1.0 metadata : name : default dependencyManagement : resolutions : - path : ../heavy.library","title":"UI5 Workspaces"},{"location":"pages/Workspace/#general-concept","text":"UI5 Workspaces can be used to create a personalized local development environment for a UI5 project. They allow to use UI5 dependencies from local directories without the need to use the link features of package managers like npm. \"UI5 dependencies\" generally refers to projects that have a ui5.yaml . Workspaces are typically configured in a ui5-workspace.yaml file, located next to the project's ui5.yaml . The file can contain one or many workspace configurations, each separated by three dashes . For example: Example ui5-workspace.yaml specVersion : workspace/1.0 metadata : name : default dependencyManagement : resolutions : - path : ../heavy.library --- specVersion : workspace/1.0 metadata : name : extended dependencyManagement : resolutions : - path : ../heavy.library - path : ../light.library - path : ../test.library If a workspace configuration named default exists, it will be used automatically; otherwise the workspace must be specified using the UI5 CLI parameter --workspace . Workspaces can only be used in the project that is currently being worked on, i.e. the current root project. Workspace configurations of dependencies are ignored. The workspace file, however, does not necessarily have to be located within the project. You can reference any workspace configuration file via the UI5 CLI parameter --workspace-config . This concept has been discussed in an RFC: RFC 0006 Local Dependency Resolution","title":"General Concept"},{"location":"pages/Workspace/#configuration","text":"A UI5 Workspace configuration must define a specification version ( specVersion ) compatible with its configuration. For more information, see Workspace Specification Versions . specVersion : \"workspace/1.0\"","title":"Configuration"},{"location":"pages/Workspace/#metadata","text":"Example specVersion : workspace/1.0 metadata : name : dolphin","title":"Metadata"},{"location":"pages/Workspace/#name","text":"A workspace must have a name . This allows to easily switch between individual workspace configurations. If a workspace is named default , it will be used automatically , unless a different workspace is selected using the --workspace CLI parameter. The name property must satisfy the following conditions. They are identical to project names : Must be at least 3 characters long Must be no longer than 80 characters Must contain lowercase characters only Must contain alphanumeric characters, dash, underscore and period only Exception: The @ and / characters are allowed at certain positions as explained below Must start with an alphabetic character or an @ character If it starts with an @ character, it must contain exactly one forward slash / This is aligned with the npm concept for package scopes, for example @org/lib.name","title":"name"},{"location":"pages/Workspace/#dependency-management","text":"UI5 Workspace configurations allow to influence the dependency resolution when working with a UI5 project. Example specVersion : workspace/1.0 metadata : name : dolphin dependencyManagement : resolutions : - path : ../light.library - path : ../heavy.library - path : ../test.library","title":"Dependency Management"},{"location":"pages/Workspace/#resolutions","text":"dependencyManagement : resolutions : - path : ../test.library Resolution paths will be used by UI5 Tooling to look for project dependencies. Any dependencies found via these paths will be used over the ones found with the regular dependency resolution mechanism. This includes UI5 Tooling extensions. Paths must point to a directory containing a package.json . UI5 Tooling will attempt to find a UI5 project here. However, if the package.json contains a workspaces , or equivalently, ui5.workspaces configuration (which overrules the first), UI5 Tooling will resolve the workspace first and attempt to find UI5 projects in the configured \"npm workspaces\". This is commonly used in mono-repos. An example can be found in the OpenUI5 repository . Paths must be written in POSIX (i.e. using only forward slashes / as path segment separators) and must be relative to the workspace configuration file . Absolute paths, or paths relative to the home directory ( ~ ), are not allowed. This is to ensure that workspace configuration files are easy to share and to reduce the chance of them exposing sensitive information like user names or large directory hierarchies. Symbolic links are followed. Note that this configuration only affects the resolution of dependencies which have already been found during the regular dependency resolution process of a project. For example, if a workspace resolution path resolves to a project that would otherwise not be part of the dependency tree of the current root project, it will not be added to the dependency tree. Also, transitive dependencies of resolved projects are not being followed.","title":"Resolutions"},{"location":"pages/Workspace/#workspace-specification-versions","text":"A workspace configuration must define a Specification Version by setting the specVersion property. UI5 Tooling uses this information to detect whether the currently installed version is compatible with a workspace's configuration. specVersion : \"workspace/1.0\" [ ... ] To use new features, a workspace configuration might need to update the specVersion property. For a given Specification Version \"workspace/ MAJOR.MINOR \"\" we will increment: MAJOR when there are breaking changes that might require additional actions by the project's maintainer MINOR when adding new features that are fully backward-compatible All changes are documented below.","title":"Workspace Specification Versions"},{"location":"pages/Workspace/#compatibility-matrix","text":"Unless otherwise noted in the table below, UI5 Tooling modules are backward-compatible. Version UI5 CLI Release workspace/1.0 v3.0.0+","title":"Compatibility Matrix"},{"location":"pages/Workspace/#specification-version-workspace10","text":"Initial version. Specification Version workspace/1.0 configurations are compatible with UI5 CLI v3.0.0 and above.","title":"Specification Version workspace/1.0"},{"location":"pages/extensibility/CustomServerMiddleware/","text":"Custom UI5 Server Middleware \u00b6 The UI5 Server Extensibility enables you to enhance the functionality of the UI5 Server. You may want to handle requests differently. For example add various headers to a response or parse data of a POST request in a specific way. For this you can plug custom middleware implementations into the internal express server of the UI5 Server module. The UI5 community already created many custom middleware packages which you can integrate into your project. They are often prefixed by ui5-middleware- to make them easily searchable in the npm registry . Please note that custom middleware packages from third parties can not only modify how your project is served but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 In a projects ui5.yaml file, you can define additional server middleware modules that will be executed when the request is received by the server. This configuration exclusively affects the server started in this project. Custom middleware configurations defined in any dependencies are ignored. A middleware may be executed before or after any other middleware. This can either be a standard middleware or another custom middleware. Example: Basic configuration \u00b6 specVersion : \"3.0\" type : application metadata : name : my.application server : customMiddleware : - name : myCustomMiddleware mountPath : /myapp afterMiddleware : compression configuration : debug : true In the above example the middleware compression is already included as a standard middleware by the UI5 Server. When serving the application my.application , the server will call the custom middleware myCustomMiddleware after compression . There can be optional configuration parameters which are passed directly to the custom middleware implementation (see below). An optional mountPath for which the middleware function is invoked can be provided. It will be passed to the app.use call (see express API reference ). Execution order \u00b6 Note that middleware configurations are applied in the order they are defined. When referencing another custom middleware, it has to be defined before that reference. Custom Middleware Extension \u00b6 A custom middleware extension consists of a ui5.yaml and a custom middleware implementation . It can be a standalone module or part of an existing UI5 project. Example: ui5.yaml \u00b6 specVersion : \"3.0\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom middleware extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a custom middleware extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The UI5 Server will detect the custom middleware configuration of the project and use the middleware on startup. Example: Custom Middleware Extension defined in UI5 project \u00b6 # Project configuration for the above example specVersion : \"3.0\" kind : project type : application metadata : name : my.application server : customMiddleware : - name : markdownHandler beforeMiddleware : serveResources --- # Custom middleware extension as part of your project specVersion : \"3.0\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom Middleware Implementation \u00b6 A custom middleware implementation needs to return a function with the following signature: ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Custom UI5 Server middleware API * * @param {object} parameters Parameters * @param {@ui5/logger/Logger} parameters.log * Logger instance for use in the custom middleware. * This parameter is only provided to custom middleware * extensions defining Specification Version 3.0 and later. * @param {@ui5/server.middleware.MiddlewareUtil} parameters.middlewareUtil * Specification version-dependent interface to a * MiddlewareUtil instance. See the corresponding API reference for details: * https://sap.github.io/ui5-tooling/v3/api/@ui5_server_middleware_MiddlewareUtil.html * @param {object} parameters.options Options * @param {string} parameters.options.configuration * Custom middleware configuration, as defined in the project's ui5.yaml * @param {string} parameters.options.middlewareName * Name of the custom middleware. * This parameter is only provided to custom middleware extensions * defining Specification Version 3.0 and later * @param {object} parameters.resources Readers for accessing resources * @param {module:@ui5/fs.AbstractReader} parameters.resources.all * Reader to access resources of the root project and its dependencies * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject * Reader to access resources of the root project * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies * Reader to access resources of the project's dependencies. * @returns {function} Middleware function to use */ export default function ({ log , middlewareUtil , options , resources }) { return async function ( req , res , next ) { // [...] } }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Custom UI5 Server middleware API * * @param {object} parameters Parameters * @param {@ui5/logger/Logger} parameters.log * Logger instance for use in the custom middleware. * This parameter is only provided to custom middleware * extensions defining Specification Version 3.0 and later. * @param {@ui5/server.middleware.MiddlewareUtil} parameters.middlewareUtil * Specification version-dependent interface to a * MiddlewareUtil instance. See the corresponding API reference for details: * https://sap.github.io/ui5-tooling/v3/api/@ui5_server_middleware_MiddlewareUtil.html * @param {object} parameters.options Options * @param {string} parameters.options.configuration * Custom middleware configuration, as defined in the project's ui5.yaml * @param {string} parameters.options.middlewareName * Name of the custom middleware. * This parameter is only provided to custom middleware extensions * defining Specification Version 3.0 and later * @param {object} parameters.resources Readers for accessing resources * @param {module:@ui5/fs.AbstractReader} parameters.resources.all * Reader to access resources of the root project and its dependencies * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject * Reader to access resources of the root project * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies * Reader to access resources of the project's dependencies. * @returns {function} Middleware function to use */ module . exports = function ({ log , middlewareUtil , options , resources }) { return async function ( req , res , next ) { // [...] } }; Example: lib/middleware/markdownHandler.(m)js \u00b6 ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import MarkdownIt from \"markdown-it\" ; export default async function ({ log , middlewareUtil , options , resources }) { const md = new MarkdownIt (); return function ( req , res , next ) { if ( ! req . path || ! req . path . endsWith ( \".html\" )) { // Do not handle non-HTML requests next (); return ; } // Try to read a corresponding markdown file resources . rootProject . byPath ( req . path . replace ( \".html\" , \".md\" )). then ( async ( resource ) => { if ( ! resource ) { // No file found, hand over to next middleware next (); return ; } log . info ( `Rendering markdown for ${ resource . getPath () } ` ); const markdown = await resource . getBuffer (); // Generate HTML from markdown string const html = md . render ( markdown . toString ()); res . type ( '.html' ); res . end ( html ); }). catch (( err ) => { next ( err ); }); } }; Live demo of the above example: openui5-sample-app with custom middleware 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 module . exports = async function ({ log , middlewareUtil , options , resources }) { const MarkdownIt = require ( \"markdown-it\" ); const md = new MarkdownIt (); return function ( req , res , next ) { if ( ! req . path || ! req . path . endsWith ( \".html\" )) { // Do not handle non-HTML requests next (); return ; } // Try to read a corresponding markdown file resources . rootProject . byPath ( req . path . replace ( \".html\" , \".md\" )). then ( async ( resource ) => { if ( ! resource ) { // No file found, hand over to next middleware next (); return ; } log . info ( `Rendering markdown for ${ resource . getPath () } ` ); const markdown = await resource . getBuffer (); // Generate HTML from markdown string const html = md . render ( markdown . toString ()); res . type ( '.html' ); res . end ( html ); }). catch (( err ) => { next ( err ); }); } }; Live demo of the above example: openui5-sample-app with custom middleware Helper Class MiddlewareUtil \u00b6 Custom middleware defining Specification Version 2.0 or higher have access to an interface of a MiddlewareUtil instance. In this case, a middlewareUtil object is provided as a part of the custom middleware's parameters . Depending on the specification version of the custom middleware, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the MiddlewareUtil API reference . Integration with karma-ui5 \u00b6 Warning The Karma project has been deprecated as of 2023 karma-ui5 is a plugin for the popular Karma test runner . Based on your configuration , it can fetch resources from a dedicated server or start an internal server using parts of UI5 Tooling. In the latter case, any custom middleware configured in the default ui5.yaml of the project will be used automatically. However, since Karma uses the connect framework, as opposed to UI5 Tooling's express , custom middleware might not always work as expected. Compared to connect , the express framework provides a more versatile API to middleware. Therefore, if you plan to use custom middleware in an integrated scenario with karma-ui5 , you must restrict the middleware to using the connect API only to ensure compatibility. Alternatively, you can start a server with the usual ui5 serve command and configure the corresponding URL for use by karma-ui5 .","title":"Custom Server Middleware"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-ui5-server-middleware","text":"The UI5 Server Extensibility enables you to enhance the functionality of the UI5 Server. You may want to handle requests differently. For example add various headers to a response or parse data of a POST request in a specific way. For this you can plug custom middleware implementations into the internal express server of the UI5 Server module. The UI5 community already created many custom middleware packages which you can integrate into your project. They are often prefixed by ui5-middleware- to make them easily searchable in the npm registry . Please note that custom middleware packages from third parties can not only modify how your project is served but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Custom UI5 Server Middleware"},{"location":"pages/extensibility/CustomServerMiddleware/#configuration","text":"In a projects ui5.yaml file, you can define additional server middleware modules that will be executed when the request is received by the server. This configuration exclusively affects the server started in this project. Custom middleware configurations defined in any dependencies are ignored. A middleware may be executed before or after any other middleware. This can either be a standard middleware or another custom middleware.","title":"Configuration"},{"location":"pages/extensibility/CustomServerMiddleware/#example-basic-configuration","text":"specVersion : \"3.0\" type : application metadata : name : my.application server : customMiddleware : - name : myCustomMiddleware mountPath : /myapp afterMiddleware : compression configuration : debug : true In the above example the middleware compression is already included as a standard middleware by the UI5 Server. When serving the application my.application , the server will call the custom middleware myCustomMiddleware after compression . There can be optional configuration parameters which are passed directly to the custom middleware implementation (see below). An optional mountPath for which the middleware function is invoked can be provided. It will be passed to the app.use call (see express API reference ).","title":"Example: Basic configuration"},{"location":"pages/extensibility/CustomServerMiddleware/#execution-order","text":"Note that middleware configurations are applied in the order they are defined. When referencing another custom middleware, it has to be defined before that reference.","title":"Execution order"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-middleware-extension","text":"A custom middleware extension consists of a ui5.yaml and a custom middleware implementation . It can be a standalone module or part of an existing UI5 project.","title":"Custom Middleware Extension"},{"location":"pages/extensibility/CustomServerMiddleware/#example-ui5yaml","text":"specVersion : \"3.0\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom middleware extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a custom middleware extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The UI5 Server will detect the custom middleware configuration of the project and use the middleware on startup.","title":"Example: ui5.yaml"},{"location":"pages/extensibility/CustomServerMiddleware/#example-custom-middleware-extension-defined-in-ui5-project","text":"# Project configuration for the above example specVersion : \"3.0\" kind : project type : application metadata : name : my.application server : customMiddleware : - name : markdownHandler beforeMiddleware : serveResources --- # Custom middleware extension as part of your project specVersion : \"3.0\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js","title":"Example: Custom Middleware Extension defined in UI5 project"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-middleware-implementation","text":"A custom middleware implementation needs to return a function with the following signature: ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Custom UI5 Server middleware API * * @param {object} parameters Parameters * @param {@ui5/logger/Logger} parameters.log * Logger instance for use in the custom middleware. * This parameter is only provided to custom middleware * extensions defining Specification Version 3.0 and later. * @param {@ui5/server.middleware.MiddlewareUtil} parameters.middlewareUtil * Specification version-dependent interface to a * MiddlewareUtil instance. See the corresponding API reference for details: * https://sap.github.io/ui5-tooling/v3/api/@ui5_server_middleware_MiddlewareUtil.html * @param {object} parameters.options Options * @param {string} parameters.options.configuration * Custom middleware configuration, as defined in the project's ui5.yaml * @param {string} parameters.options.middlewareName * Name of the custom middleware. * This parameter is only provided to custom middleware extensions * defining Specification Version 3.0 and later * @param {object} parameters.resources Readers for accessing resources * @param {module:@ui5/fs.AbstractReader} parameters.resources.all * Reader to access resources of the root project and its dependencies * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject * Reader to access resources of the root project * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies * Reader to access resources of the project's dependencies. * @returns {function} Middleware function to use */ export default function ({ log , middlewareUtil , options , resources }) { return async function ( req , res , next ) { // [...] } }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Custom UI5 Server middleware API * * @param {object} parameters Parameters * @param {@ui5/logger/Logger} parameters.log * Logger instance for use in the custom middleware. * This parameter is only provided to custom middleware * extensions defining Specification Version 3.0 and later. * @param {@ui5/server.middleware.MiddlewareUtil} parameters.middlewareUtil * Specification version-dependent interface to a * MiddlewareUtil instance. See the corresponding API reference for details: * https://sap.github.io/ui5-tooling/v3/api/@ui5_server_middleware_MiddlewareUtil.html * @param {object} parameters.options Options * @param {string} parameters.options.configuration * Custom middleware configuration, as defined in the project's ui5.yaml * @param {string} parameters.options.middlewareName * Name of the custom middleware. * This parameter is only provided to custom middleware extensions * defining Specification Version 3.0 and later * @param {object} parameters.resources Readers for accessing resources * @param {module:@ui5/fs.AbstractReader} parameters.resources.all * Reader to access resources of the root project and its dependencies * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject * Reader to access resources of the root project * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies * Reader to access resources of the project's dependencies. * @returns {function} Middleware function to use */ module . exports = function ({ log , middlewareUtil , options , resources }) { return async function ( req , res , next ) { // [...] } };","title":"Custom Middleware Implementation"},{"location":"pages/extensibility/CustomServerMiddleware/#example-libmiddlewaremarkdownhandlermjs","text":"ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import MarkdownIt from \"markdown-it\" ; export default async function ({ log , middlewareUtil , options , resources }) { const md = new MarkdownIt (); return function ( req , res , next ) { if ( ! req . path || ! req . path . endsWith ( \".html\" )) { // Do not handle non-HTML requests next (); return ; } // Try to read a corresponding markdown file resources . rootProject . byPath ( req . path . replace ( \".html\" , \".md\" )). then ( async ( resource ) => { if ( ! resource ) { // No file found, hand over to next middleware next (); return ; } log . info ( `Rendering markdown for ${ resource . getPath () } ` ); const markdown = await resource . getBuffer (); // Generate HTML from markdown string const html = md . render ( markdown . toString ()); res . type ( '.html' ); res . end ( html ); }). catch (( err ) => { next ( err ); }); } }; Live demo of the above example: openui5-sample-app with custom middleware 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 module . exports = async function ({ log , middlewareUtil , options , resources }) { const MarkdownIt = require ( \"markdown-it\" ); const md = new MarkdownIt (); return function ( req , res , next ) { if ( ! req . path || ! req . path . endsWith ( \".html\" )) { // Do not handle non-HTML requests next (); return ; } // Try to read a corresponding markdown file resources . rootProject . byPath ( req . path . replace ( \".html\" , \".md\" )). then ( async ( resource ) => { if ( ! resource ) { // No file found, hand over to next middleware next (); return ; } log . info ( `Rendering markdown for ${ resource . getPath () } ` ); const markdown = await resource . getBuffer (); // Generate HTML from markdown string const html = md . render ( markdown . toString ()); res . type ( '.html' ); res . end ( html ); }). catch (( err ) => { next ( err ); }); } }; Live demo of the above example: openui5-sample-app with custom middleware","title":"Example: lib/middleware/markdownHandler.(m)js"},{"location":"pages/extensibility/CustomServerMiddleware/#helper-class-middlewareutil","text":"Custom middleware defining Specification Version 2.0 or higher have access to an interface of a MiddlewareUtil instance. In this case, a middlewareUtil object is provided as a part of the custom middleware's parameters . Depending on the specification version of the custom middleware, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the MiddlewareUtil API reference .","title":"Helper Class MiddlewareUtil"},{"location":"pages/extensibility/CustomServerMiddleware/#integration-with-karma-ui5","text":"Warning The Karma project has been deprecated as of 2023 karma-ui5 is a plugin for the popular Karma test runner . Based on your configuration , it can fetch resources from a dedicated server or start an internal server using parts of UI5 Tooling. In the latter case, any custom middleware configured in the default ui5.yaml of the project will be used automatically. However, since Karma uses the connect framework, as opposed to UI5 Tooling's express , custom middleware might not always work as expected. Compared to connect , the express framework provides a more versatile API to middleware. Therefore, if you plan to use custom middleware in an integrated scenario with karma-ui5 , you must restrict the middleware to using the connect API only to ensure compatibility. Alternatively, you can start a server with the usual ui5 serve command and configure the corresponding URL for use by karma-ui5 .","title":"Integration with karma-ui5"},{"location":"pages/extensibility/CustomTasks/","text":"Custom UI5 Builder Tasks \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called renderMarkdownFiles is then executed immediately after the standard task minify . Example: Basic configuration \u00b6 # In this example configuration two custom tasks are defined: 'babel' and 'renderMarkdownFiles'. specVersion : \"3.0\" type : library metadata : name : my.library builder : customTasks : - name : babel beforeTask : generateComponentPreload - name : renderMarkdownFiles afterTask : minify configuration : markdownStyle : firstH1IsTitle : true Example: Connect multiple custom tasks \u00b6 You can also connect multiple custom tasks with each other. The order in the configuration is important in this case. You have to make sure that a task is defined before you reference it via beforeTask or afterTask . # In this example 'myCustomTask2' gets executed after 'myCustomTask1'. specVersion : \"3.0\" type : library metadata : name : my.library builder : customTasks : - name : myCustomTask1 beforeTask : generateComponentPreload - name : myCustomTask2 afterTask : myCustomTask1 Custom Task Extension \u00b6 A custom task extension consists of a ui5.yaml and a task implementation . It can be a standalone module or part of an existing UI5 project. Example: ui5.yaml \u00b6 specVersion : \"3.0\" kind : extension type : task metadata : name : renderMarkdownFiles task : path : lib/tasks/renderMarkdownFiles.js Task extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a task extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The task extension will then be automatically collected and processed during the processing of the project. Example: Custom Task Extension defined in UI5 project \u00b6 # Project configuration for the above example specVersion : \"3.0\" kind : project type : library metadata : name : my.library builder : customTasks : - name : renderMarkdownFiles afterTask : minify configuration : markdownStyle : firstH1IsTitle : true --- # Task extension as part of your project specVersion : \"3.0\" kind : extension type : task metadata : name : renderMarkdownFiles task : path : lib/tasks/renderMarkdownFiles.js Task Implementation \u00b6 A custom task implementation needs to return a function with the following signature: ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Custom task API * * @param {object} parameters * * @param {module:@ui5/fs.AbstractReader} parameters.dependencies * Reader to access resources of the project's dependencies * @param {@ui5/logger/Logger} parameters.log * Logger instance for use in the custom task. * This parameter is only available to custom task extensions * defining Specification Version 3.0 and later. * @param {object} parameters.options Options * @param {string} parameters.options.projectName * Name of the project currently being built * @param {string} parameters.options.projectNamespace * Namespace of the project currently being built * @param {string} parameters.options.configuration * Custom task configuration, as defined in the project's ui5.yaml * @param {string} parameters.options.taskName * Name of the custom task. * This parameter is only provided to custom task extensions * defining Specification Version 3.0 and later. * @param {@ui5/builder.tasks.TaskUtil} parameters.taskUtil * Specification Version-dependent interface to a TaskUtil instance. * See the corresponding API reference for details: * https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html * @param {module:@ui5/fs.DuplexCollection} parameters.workspace * Reader/Writer to access and modify resources of the * project currently being built * @returns {Promise<undefined>} * Promise resolving once the task has finished */ export default async function ({ dependencies , log , options , taskUtil , workspace }) { // [...] }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Custom task API * * @param {object} parameters * * @param {module:@ui5/fs.AbstractReader} parameters.dependencies * Reader to access resources of the project's dependencies * @param {@ui5/logger/Logger} parameters.log * Logger instance for use in the custom task. * This parameter is only available to custom task extensions * defining Specification Version 3.0 and later. * @param {object} parameters.options Options * @param {string} parameters.options.projectName * Name of the project currently being built * @param {string} parameters.options.projectNamespace * Namespace of the project currently being built * @param {string} parameters.options.configuration * Custom task configuration, as defined in the project's ui5.yaml * @param {string} parameters.options.taskName * Name of the custom task. * This parameter is only provided to custom task extensions * defining Specification Version 3.0 and later. * @param {@ui5/builder.tasks.TaskUtil} parameters.taskUtil * Specification Version-dependent interface to a TaskUtil instance. * See the corresponding API reference for details: * https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html * @param {module:@ui5/fs.DuplexCollection} parameters.workspace * Reader/Writer to access and modify resources of the * project currently being built * @returns {Promise<undefined>} * Promise resolving once the task has finished */ module . exports = async function ({ dependencies , log , options , taskUtil , workspace }) { // [...] }; Required Dependencies \u00b6 Info This functionality has been added with UI5 CLI v3.0.0 Custom tasks can export an optional callback function determineRequiredDependencies to control which dependency-resources are made available through the dependencies -reader that is provided to the task. By reducing the amount of required dependencies or by not requiring any, UI5 Tooling might be able to build a project faster. Before executing a task, UI5 Tooling will ensure that all required dependencies have been built. If this callback is not provided, UI5 Tooling will make an assumption as to whether the custom task requires access to any resources of dependencies based on the defined Specification Version of the custom task extension: Specification Version 3.0 and later: If no callback is provided, UI5 Tooling assumes that no dependencies are required. In this case, the dependencies parameter will be omitted. Specification Versions before 3.0: If no callback is provided, UI5 Tooling assumes that all dependencies are required. For more details, see also RFC 0012 UI5 Tooling Extension API v3 ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Callback function to define the list of required dependencies * * @param {object} parameters * @param {Set} parameters.availableDependencies * Set containing the names of all direct dependencies of * the project currently being built. * @param {function} parameters.getDependencies * Identical to TaskUtil#getDependencies * (see https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html). * Creates a list of names of all direct dependencies * of a given project. * @param {function} parameters.getProject * Identical to TaskUtil#getProject * (see https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html). * Retrieves a Project-instance for a given project name. * @param {object} parameters.options * Identical to the options given to the standard task function. * @returns {Promise<Set>} * Promise resolving with a Set containing all dependencies * that should be made available to the task. * UI5 Tooling will ensure that those dependencies have been * built before executing the task. */ export async function determineRequiredDependencies ({ availableDependencies , getDependencies , getProject , options }) { // \"availableDependencies\" could look like this: Set(3) { \"sap.ui.core\", \"sap.m\", \"my.lib\" } // Reduce list of required dependencies: Do not require any UI5 framework projects availableDependencies . forEach (( depName ) => { if ( getProject ( depName ). isFrameworkProject ()) { availableDependencies . delete ( depName ) } }); // => Only resources of project \"my.lib\" will be available to the task return availableDependencies ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Callback function to define the list of required dependencies * * @param {object} parameters * @param {Set} parameters.availableDependencies * Set containing the names of all direct dependencies of * the project currently being built. * @param {function} parameters.getDependencies * Identical to TaskUtil#getDependencies * (see https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html). * Creates a list of names of all direct dependencies * of a given project. * @param {function} parameters.getProject * Identical to TaskUtil#getProject * (see https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html). * Retrieves a Project-instance for a given project name. * @param {object} parameters.options * Identical to the options given to the standard task function. * @returns {Promise<Set>} * Promise resolving with a Set containing all dependencies * that should be made available to the task. * UI5 Tooling will ensure that those dependencies have been * built before executing the task. */ module . exports . determineRequiredDependencies = async function ({ availableDependencies , getDependencies , getProject , options }) { // \"availableDependencies\" could look like this: Set(3) { \"sap.ui.core\", \"sap.m\", \"my.lib\" } // Reduce list of required dependencies: Do not require any UI5 framework projects availableDependencies . forEach (( depName ) => { if ( getProject ( depName ). isFrameworkProject ()) { availableDependencies . delete ( depName ) } }); // => Only resources of project \"my.lib\" will be available to the task return availableDependencies ; } Examples \u00b6 The following code snippets show examples for custom task implementations. Example: lib/tasks/renderMarkdownFiles.js \u00b6 This example is making use of the resourceFactory TaskUtil API to create new resources based on the output of a third-party module for rendering Markdown files. The created resources are added to the build result by writing them into the provided workspace . ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import path from \"node:path\" ; import renderMarkdown from \"./renderMarkdown.js\" ; /* * Render all .md (Markdown) files in the project to HTML */ export default async function ({ dependencies , log , options , taskUtil , workspace }) { const { createResource } = taskUtil . resourceFactory ; const textResources = await workspace . byGlob ( \"**/*.md\" ); await Promise . all ( textResources . map ( async ( resource ) => { const markdownResourcePath = resource . getPath (); log . info ( `Rendering markdown file ${ markdownResourcePath } ...` ); const htmlString = await renderMarkdown ( await resource . getString (), options . configuration ); // Note: @ui5/fs virtual paths are always (on *all* platforms) POSIX. Therefore using path.posix here const newResourceName = path . posix . basename ( markdownResourcePath , \".md\" ) + \".html\" ; const newResourcePath = path . posix . join ( path . posix . dirname ( markdownResourcePath ), newResourceName ); const markdownResource = createResource ({ path : newResourcePath , string : htmlString }); await workspace . write ( markdownResource ); })); }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const path = require ( \"node:path\" ); const renderMarkdown = require ( \"./renderMarkdown.js\" ); /* * Render all .md (Markdown) files in the project to HTML */ module . exports = async function ({ dependencies , log , options , taskUtil , workspace }) { const { createResource } = taskUtil . resourceFactory ; const textResources = await workspace . byGlob ( \"**/*.md\" ); await Promise . all ( textResources . map ( async ( resource ) => { const markdownResourcePath = resource . getPath (); log . info ( `Rendering markdown file ${ markdownResourcePath } ...` ); const htmlString = await renderMarkdown ( await resource . getString (), options . configuration ); // Note: @ui5/fs virtual paths are always (on *all* platforms) POSIX. Therefore using path.posix here const newResourceName = path . posix . basename ( markdownResourcePath , \".md\" ) + \".html\" ; const newResourcePath = path . posix . join ( path . posix . dirname ( markdownResourcePath ), newResourceName ); const markdownResource = createResource ({ path : newResourcePath , string : htmlString }); await workspace . write ( markdownResource ); })); }; Warning Depending on your project setup, UI5 Tooling tends to open many files simultaneously during a build. To prevent errors like EMFILE: too many open files , we urge custom task implementations to use the graceful-fs module as a drop-in replacement for the native fs module in case it is used. Tasks should ideally use the reader/writer APIs provided by UI5 Tooling for working with project resources. Example: lib/tasks/compileLicenseSummary.js \u00b6 This example is making use of multiple TaskUtil APIs to retrieve additional information about the project currently being built ( taskUtil.getProject() ) and its direct dependencies ( taskUtil.getDependencies() ). Project configuration files like package.json can be accessed directly using project.getRootReader() . ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import path from \"node:path\" ; /* * Compile a list of all licenses of the project's dependencies * and write it to \"dependency-license-summary.json\" */ export default async function ({ dependencies , log , options , taskUtil , workspace }) { const { createResource } = taskUtil . resourceFactory ; const licenses = new Map (); const projectsVisited = new Set (); async function processProject ( project ) { return Promise . all ( taskUtil . getDependencies (). map ( async ( projectName ) => { if ( projectsVisited . has ( projectName )) { return ; } projectsVisited . add ( projectName ); const project = taskUtil . getProject ( projectName ); const pkgResource = await project . getRootReader (). byPath ( \"/package.json\" ); if ( pkgResource ) { const pkg = JSON . parse ( await pkgResource . getString ()) // Add project to list of licenses if ( licenses . has ( pkg . license )) { licenses . get ( pkg . license ). push ( project . getName ()); } else { // License not yet in map. Define it licenses . set ( pkg . license , [ project . getName ()]); } } else { log . info ( `Could not find package.json file in project ${ project . getName () } ` ); } return processProject ( project ); })); } // Start processing dependencies of the root project await processProject ( taskUtil . getProject ()); const summaryResource = createResource ({ path : \"/dependency-license-summary.json\" , string : JSON . stringify ( Object . fromEntries ( licenses ), null , \"\\t\" ) }); await workspace . write ( summaryResource ); }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 const path = require ( \"node:path\" ); /* * Compile a list of all licenses of the project's dependencies * and write it to \"dependency-license-summary.json\" */ module . exports = async function ({ dependencies , log , options , taskUtil , workspace }) { const { createResource } = taskUtil . resourceFactory ; const licenses = new Map (); const projectsVisited = new Set (); async function processProject ( project ) { return Promise . all ( taskUtil . getDependencies (). map ( async ( projectName ) => { if ( projectsVisited . has ( projectName )) { return ; } projectsVisited . add ( projectName ); const project = taskUtil . getProject ( projectName ); const pkgResource = await project . getRootReader (). byPath ( \"/package.json\" ); if ( pkgResource ) { const pkg = JSON . parse ( await pkgResource . getString ()) // Add project to list of licenses if ( licenses . has ( pkg . license )) { licenses . get ( pkg . license ). push ( project . getName ()); } else { // License not yet in map. Define it licenses . set ( pkg . license , [ project . getName ()]); } } else { log . info ( `Could not find package.json file in project ${ project . getName () } ` ); } return processProject ( project ); })); } // Start processing dependencies of the root project await processProject ( taskUtil . getProject ()); const summaryResource = createResource ({ path : \"/dependency-license-summary.json\" , string : JSON . stringify ( Object . fromEntries ( licenses ), null , \"\\t\" ) }); await workspace . write ( summaryResource ); }; Helper Class TaskUtil \u00b6 Custom tasks defining Specification Version 2.2 or higher have access to an interface of a TaskUtil instance. In this case, a taskUtil object is provided as a part of the custom task's parameters . Depending on the specification version of the custom task, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the TaskUtil API reference .","title":"Custom Tasks"},{"location":"pages/extensibility/CustomTasks/#custom-ui5-builder-tasks","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Custom UI5 Builder Tasks"},{"location":"pages/extensibility/CustomTasks/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called renderMarkdownFiles is then executed immediately after the standard task minify .","title":"Configuration"},{"location":"pages/extensibility/CustomTasks/#example-basic-configuration","text":"# In this example configuration two custom tasks are defined: 'babel' and 'renderMarkdownFiles'. specVersion : \"3.0\" type : library metadata : name : my.library builder : customTasks : - name : babel beforeTask : generateComponentPreload - name : renderMarkdownFiles afterTask : minify configuration : markdownStyle : firstH1IsTitle : true","title":"Example: Basic configuration"},{"location":"pages/extensibility/CustomTasks/#example-connect-multiple-custom-tasks","text":"You can also connect multiple custom tasks with each other. The order in the configuration is important in this case. You have to make sure that a task is defined before you reference it via beforeTask or afterTask . # In this example 'myCustomTask2' gets executed after 'myCustomTask1'. specVersion : \"3.0\" type : library metadata : name : my.library builder : customTasks : - name : myCustomTask1 beforeTask : generateComponentPreload - name : myCustomTask2 afterTask : myCustomTask1","title":"Example: Connect multiple custom tasks"},{"location":"pages/extensibility/CustomTasks/#custom-task-extension","text":"A custom task extension consists of a ui5.yaml and a task implementation . It can be a standalone module or part of an existing UI5 project.","title":"Custom Task Extension"},{"location":"pages/extensibility/CustomTasks/#example-ui5yaml","text":"specVersion : \"3.0\" kind : extension type : task metadata : name : renderMarkdownFiles task : path : lib/tasks/renderMarkdownFiles.js Task extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a task extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The task extension will then be automatically collected and processed during the processing of the project.","title":"Example: ui5.yaml"},{"location":"pages/extensibility/CustomTasks/#example-custom-task-extension-defined-in-ui5-project","text":"# Project configuration for the above example specVersion : \"3.0\" kind : project type : library metadata : name : my.library builder : customTasks : - name : renderMarkdownFiles afterTask : minify configuration : markdownStyle : firstH1IsTitle : true --- # Task extension as part of your project specVersion : \"3.0\" kind : extension type : task metadata : name : renderMarkdownFiles task : path : lib/tasks/renderMarkdownFiles.js","title":"Example: Custom Task Extension defined in UI5 project"},{"location":"pages/extensibility/CustomTasks/#task-implementation","text":"A custom task implementation needs to return a function with the following signature: ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Custom task API * * @param {object} parameters * * @param {module:@ui5/fs.AbstractReader} parameters.dependencies * Reader to access resources of the project's dependencies * @param {@ui5/logger/Logger} parameters.log * Logger instance for use in the custom task. * This parameter is only available to custom task extensions * defining Specification Version 3.0 and later. * @param {object} parameters.options Options * @param {string} parameters.options.projectName * Name of the project currently being built * @param {string} parameters.options.projectNamespace * Namespace of the project currently being built * @param {string} parameters.options.configuration * Custom task configuration, as defined in the project's ui5.yaml * @param {string} parameters.options.taskName * Name of the custom task. * This parameter is only provided to custom task extensions * defining Specification Version 3.0 and later. * @param {@ui5/builder.tasks.TaskUtil} parameters.taskUtil * Specification Version-dependent interface to a TaskUtil instance. * See the corresponding API reference for details: * https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html * @param {module:@ui5/fs.DuplexCollection} parameters.workspace * Reader/Writer to access and modify resources of the * project currently being built * @returns {Promise<undefined>} * Promise resolving once the task has finished */ export default async function ({ dependencies , log , options , taskUtil , workspace }) { // [...] }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Custom task API * * @param {object} parameters * * @param {module:@ui5/fs.AbstractReader} parameters.dependencies * Reader to access resources of the project's dependencies * @param {@ui5/logger/Logger} parameters.log * Logger instance for use in the custom task. * This parameter is only available to custom task extensions * defining Specification Version 3.0 and later. * @param {object} parameters.options Options * @param {string} parameters.options.projectName * Name of the project currently being built * @param {string} parameters.options.projectNamespace * Namespace of the project currently being built * @param {string} parameters.options.configuration * Custom task configuration, as defined in the project's ui5.yaml * @param {string} parameters.options.taskName * Name of the custom task. * This parameter is only provided to custom task extensions * defining Specification Version 3.0 and later. * @param {@ui5/builder.tasks.TaskUtil} parameters.taskUtil * Specification Version-dependent interface to a TaskUtil instance. * See the corresponding API reference for details: * https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html * @param {module:@ui5/fs.DuplexCollection} parameters.workspace * Reader/Writer to access and modify resources of the * project currently being built * @returns {Promise<undefined>} * Promise resolving once the task has finished */ module . exports = async function ({ dependencies , log , options , taskUtil , workspace }) { // [...] };","title":"Task Implementation"},{"location":"pages/extensibility/CustomTasks/#required-dependencies","text":"Info This functionality has been added with UI5 CLI v3.0.0 Custom tasks can export an optional callback function determineRequiredDependencies to control which dependency-resources are made available through the dependencies -reader that is provided to the task. By reducing the amount of required dependencies or by not requiring any, UI5 Tooling might be able to build a project faster. Before executing a task, UI5 Tooling will ensure that all required dependencies have been built. If this callback is not provided, UI5 Tooling will make an assumption as to whether the custom task requires access to any resources of dependencies based on the defined Specification Version of the custom task extension: Specification Version 3.0 and later: If no callback is provided, UI5 Tooling assumes that no dependencies are required. In this case, the dependencies parameter will be omitted. Specification Versions before 3.0: If no callback is provided, UI5 Tooling assumes that all dependencies are required. For more details, see also RFC 0012 UI5 Tooling Extension API v3 ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Callback function to define the list of required dependencies * * @param {object} parameters * @param {Set} parameters.availableDependencies * Set containing the names of all direct dependencies of * the project currently being built. * @param {function} parameters.getDependencies * Identical to TaskUtil#getDependencies * (see https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html). * Creates a list of names of all direct dependencies * of a given project. * @param {function} parameters.getProject * Identical to TaskUtil#getProject * (see https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html). * Retrieves a Project-instance for a given project name. * @param {object} parameters.options * Identical to the options given to the standard task function. * @returns {Promise<Set>} * Promise resolving with a Set containing all dependencies * that should be made available to the task. * UI5 Tooling will ensure that those dependencies have been * built before executing the task. */ export async function determineRequiredDependencies ({ availableDependencies , getDependencies , getProject , options }) { // \"availableDependencies\" could look like this: Set(3) { \"sap.ui.core\", \"sap.m\", \"my.lib\" } // Reduce list of required dependencies: Do not require any UI5 framework projects availableDependencies . forEach (( depName ) => { if ( getProject ( depName ). isFrameworkProject ()) { availableDependencies . delete ( depName ) } }); // => Only resources of project \"my.lib\" will be available to the task return availableDependencies ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Callback function to define the list of required dependencies * * @param {object} parameters * @param {Set} parameters.availableDependencies * Set containing the names of all direct dependencies of * the project currently being built. * @param {function} parameters.getDependencies * Identical to TaskUtil#getDependencies * (see https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html). * Creates a list of names of all direct dependencies * of a given project. * @param {function} parameters.getProject * Identical to TaskUtil#getProject * (see https://sap.github.io/ui5-tooling/v3/api/@ui5_project_build_helpers_TaskUtil.html). * Retrieves a Project-instance for a given project name. * @param {object} parameters.options * Identical to the options given to the standard task function. * @returns {Promise<Set>} * Promise resolving with a Set containing all dependencies * that should be made available to the task. * UI5 Tooling will ensure that those dependencies have been * built before executing the task. */ module . exports . determineRequiredDependencies = async function ({ availableDependencies , getDependencies , getProject , options }) { // \"availableDependencies\" could look like this: Set(3) { \"sap.ui.core\", \"sap.m\", \"my.lib\" } // Reduce list of required dependencies: Do not require any UI5 framework projects availableDependencies . forEach (( depName ) => { if ( getProject ( depName ). isFrameworkProject ()) { availableDependencies . delete ( depName ) } }); // => Only resources of project \"my.lib\" will be available to the task return availableDependencies ; }","title":"Required Dependencies"},{"location":"pages/extensibility/CustomTasks/#examples","text":"The following code snippets show examples for custom task implementations.","title":"Examples"},{"location":"pages/extensibility/CustomTasks/#example-libtasksrendermarkdownfilesjs","text":"This example is making use of the resourceFactory TaskUtil API to create new resources based on the output of a third-party module for rendering Markdown files. The created resources are added to the build result by writing them into the provided workspace . ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import path from \"node:path\" ; import renderMarkdown from \"./renderMarkdown.js\" ; /* * Render all .md (Markdown) files in the project to HTML */ export default async function ({ dependencies , log , options , taskUtil , workspace }) { const { createResource } = taskUtil . resourceFactory ; const textResources = await workspace . byGlob ( \"**/*.md\" ); await Promise . all ( textResources . map ( async ( resource ) => { const markdownResourcePath = resource . getPath (); log . info ( `Rendering markdown file ${ markdownResourcePath } ...` ); const htmlString = await renderMarkdown ( await resource . getString (), options . configuration ); // Note: @ui5/fs virtual paths are always (on *all* platforms) POSIX. Therefore using path.posix here const newResourceName = path . posix . basename ( markdownResourcePath , \".md\" ) + \".html\" ; const newResourcePath = path . posix . join ( path . posix . dirname ( markdownResourcePath ), newResourceName ); const markdownResource = createResource ({ path : newResourcePath , string : htmlString }); await workspace . write ( markdownResource ); })); }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const path = require ( \"node:path\" ); const renderMarkdown = require ( \"./renderMarkdown.js\" ); /* * Render all .md (Markdown) files in the project to HTML */ module . exports = async function ({ dependencies , log , options , taskUtil , workspace }) { const { createResource } = taskUtil . resourceFactory ; const textResources = await workspace . byGlob ( \"**/*.md\" ); await Promise . all ( textResources . map ( async ( resource ) => { const markdownResourcePath = resource . getPath (); log . info ( `Rendering markdown file ${ markdownResourcePath } ...` ); const htmlString = await renderMarkdown ( await resource . getString (), options . configuration ); // Note: @ui5/fs virtual paths are always (on *all* platforms) POSIX. Therefore using path.posix here const newResourceName = path . posix . basename ( markdownResourcePath , \".md\" ) + \".html\" ; const newResourcePath = path . posix . join ( path . posix . dirname ( markdownResourcePath ), newResourceName ); const markdownResource = createResource ({ path : newResourcePath , string : htmlString }); await workspace . write ( markdownResource ); })); }; Warning Depending on your project setup, UI5 Tooling tends to open many files simultaneously during a build. To prevent errors like EMFILE: too many open files , we urge custom task implementations to use the graceful-fs module as a drop-in replacement for the native fs module in case it is used. Tasks should ideally use the reader/writer APIs provided by UI5 Tooling for working with project resources.","title":"Example: lib/tasks/renderMarkdownFiles.js"},{"location":"pages/extensibility/CustomTasks/#example-libtaskscompilelicensesummaryjs","text":"This example is making use of multiple TaskUtil APIs to retrieve additional information about the project currently being built ( taskUtil.getProject() ) and its direct dependencies ( taskUtil.getDependencies() ). Project configuration files like package.json can be accessed directly using project.getRootReader() . ESM CommonJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import path from \"node:path\" ; /* * Compile a list of all licenses of the project's dependencies * and write it to \"dependency-license-summary.json\" */ export default async function ({ dependencies , log , options , taskUtil , workspace }) { const { createResource } = taskUtil . resourceFactory ; const licenses = new Map (); const projectsVisited = new Set (); async function processProject ( project ) { return Promise . all ( taskUtil . getDependencies (). map ( async ( projectName ) => { if ( projectsVisited . has ( projectName )) { return ; } projectsVisited . add ( projectName ); const project = taskUtil . getProject ( projectName ); const pkgResource = await project . getRootReader (). byPath ( \"/package.json\" ); if ( pkgResource ) { const pkg = JSON . parse ( await pkgResource . getString ()) // Add project to list of licenses if ( licenses . has ( pkg . license )) { licenses . get ( pkg . license ). push ( project . getName ()); } else { // License not yet in map. Define it licenses . set ( pkg . license , [ project . getName ()]); } } else { log . info ( `Could not find package.json file in project ${ project . getName () } ` ); } return processProject ( project ); })); } // Start processing dependencies of the root project await processProject ( taskUtil . getProject ()); const summaryResource = createResource ({ path : \"/dependency-license-summary.json\" , string : JSON . stringify ( Object . fromEntries ( licenses ), null , \"\\t\" ) }); await workspace . write ( summaryResource ); }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 const path = require ( \"node:path\" ); /* * Compile a list of all licenses of the project's dependencies * and write it to \"dependency-license-summary.json\" */ module . exports = async function ({ dependencies , log , options , taskUtil , workspace }) { const { createResource } = taskUtil . resourceFactory ; const licenses = new Map (); const projectsVisited = new Set (); async function processProject ( project ) { return Promise . all ( taskUtil . getDependencies (). map ( async ( projectName ) => { if ( projectsVisited . has ( projectName )) { return ; } projectsVisited . add ( projectName ); const project = taskUtil . getProject ( projectName ); const pkgResource = await project . getRootReader (). byPath ( \"/package.json\" ); if ( pkgResource ) { const pkg = JSON . parse ( await pkgResource . getString ()) // Add project to list of licenses if ( licenses . has ( pkg . license )) { licenses . get ( pkg . license ). push ( project . getName ()); } else { // License not yet in map. Define it licenses . set ( pkg . license , [ project . getName ()]); } } else { log . info ( `Could not find package.json file in project ${ project . getName () } ` ); } return processProject ( project ); })); } // Start processing dependencies of the root project await processProject ( taskUtil . getProject ()); const summaryResource = createResource ({ path : \"/dependency-license-summary.json\" , string : JSON . stringify ( Object . fromEntries ( licenses ), null , \"\\t\" ) }); await workspace . write ( summaryResource ); };","title":"Example: lib/tasks/compileLicenseSummary.js"},{"location":"pages/extensibility/CustomTasks/#helper-class-taskutil","text":"Custom tasks defining Specification Version 2.2 or higher have access to an interface of a TaskUtil instance. In this case, a taskUtil object is provided as a part of the custom task's parameters . Depending on the specification version of the custom task, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the TaskUtil API reference .","title":"Helper Class TaskUtil"},{"location":"pages/extensibility/ProjectShims/","text":"Project Shims \u00b6 A project shim extension can be used to define or extend a project configuration of a module. The most popular use case is probably to add UI5 project configuration to a third party module that otherwise could not be used with the UI5 Tooling. Also see RFC 0002 Project Shims . Structure \u00b6 specVersion : \"3.0\" kind : extension type : project-shim metadata : name : <name of project shim extension> shims : configurations : <module name (id)> : specVersion : \"3.0\" type : <project type> metadata : name : <project name> <module name (id)> : specVersion : \"3.0\" type : <project type> metadata : name : <project name> dependencies : <module name (id)> : - <module name (id)> - <module name (id)> - <module name (id)> collections : <module name> : modules : <id> : <relative path> <id> : <relative path> <id> : <relative path> \"module name\" refers to the name of the module as identified by the used translator. E.g. when using the npm translator, the name declared in the modules package.json is used here. In most cases, the module name also becomes the internal ID of the project. Properties \u00b6 configurations (optional) \u00b6 Used to add configuration to any module. Map of module names. The values represent the configuration that should be applied to the module. Note: Configuration is applied to the module using Object.assign() . This means that existing configuration properties will be overwritten. dependencies (optional) \u00b6 Used to add dependencies to any module. Map of module names. The value is an array of module names that this module depends on. Note that the other modules need to be part of the dependency tree of the root project (not as direct children, just somewhere). collections (optional) \u00b6 Used when a dependency contains multiple modules. Also referred to as a Monorepo . Map of module names. The values are objects with collection-specific configuration: - modules : Map of project IDs and their relative file system paths inside the collection module. The project ID does not have to match the actual module name (as for instance defined in the modules package.json ). UI5 Project will use it in place of a module name. Example A: \u00b6 An application \"my-application\" defines a npm dependency to lodash in its package.json and configures it by using a project-shim extension added to its ui5.yaml . ui5.yaml specVersion : \"3.0\" type : application metadata : name : my.application --- # Everything below this line could also be put into the ui5.yaml of a standalone extension module specVersion : \"3.0\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : # name as defined in package.json specVersion : \"3.0\" type : module # Use module type metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" # map root directory of lodash module Example B: \u00b6 An application \"application.a\" depends on a library \"legacy.library.a\" which does not contain a ui5.yaml or package.json yet (nor do its dependencies). Structure of the legacy library directories (two repositories) \u00b6 legacy-libs/ \\_ src/ \\_ library.a/ \\_ src/ \\_ test/ \\_ library.b/ \\_ src/ \\_ test/ legacy-library-x/ \\_ src/ \\_ test/ Dependencies between the legacy libraries \u00b6 legacy.library.a depends on legacy.library.b legacy.library.a depends on legacy.library.x legacy.library.b depends on legacy.library.x application.a \u00b6 Directory structure application-a/ \\_ node_modules/ \\_ legacy-libs/ \\_ legacy-library-x/ \\_ webapp/ \\_ ui5.yaml \\_ package.json package.json (extract) napa can install git repositories that are lacking a package.json with npm. Within ui5-project , the npm translator already detects dependencies defined in the napa section of a package.json and tries to resolve them. { \"scripts\" : { \"install\" : \"napa\" }, \"napa\" : { \"legacy-libs\" : \"<git-repository-url>\" , \"legacy-library-x\" : \"<git-repository-url>\" } } ui5.yaml The shim defined in the application configures the legacy libraries and defines their dependencies. This shim might as well be a standalone module that is added to the applications dependencies. That would be the typical reuse scenario for shims. specVersion : \"3.0\" type : application metadata : name : application.a ---- specVersion : \"3.0\" kind : extension type : project-shim metadata : name : legacy-lib-shims shims : configurations : legacy-library-a : specVersion : \"3.0\" type : library metadata : name : legacy.library.a legacy-library-b : specVersion : \"3.0\" type : library metadata : name : legacy.library.b legacy-library-x : specVersion : \"3.0\" type : library metadata : name : legacy.library.x dependencies : legacy-library-a : - legacy-library-b - legacy-library-x legacy-library-b : - legacy-library-x collections : legacy-libs : modules : legacy-library-a : src/library.a legacy-library-b : src/library.b","title":"Project Shims"},{"location":"pages/extensibility/ProjectShims/#project-shims","text":"A project shim extension can be used to define or extend a project configuration of a module. The most popular use case is probably to add UI5 project configuration to a third party module that otherwise could not be used with the UI5 Tooling. Also see RFC 0002 Project Shims .","title":"Project Shims"},{"location":"pages/extensibility/ProjectShims/#structure","text":"specVersion : \"3.0\" kind : extension type : project-shim metadata : name : <name of project shim extension> shims : configurations : <module name (id)> : specVersion : \"3.0\" type : <project type> metadata : name : <project name> <module name (id)> : specVersion : \"3.0\" type : <project type> metadata : name : <project name> dependencies : <module name (id)> : - <module name (id)> - <module name (id)> - <module name (id)> collections : <module name> : modules : <id> : <relative path> <id> : <relative path> <id> : <relative path> \"module name\" refers to the name of the module as identified by the used translator. E.g. when using the npm translator, the name declared in the modules package.json is used here. In most cases, the module name also becomes the internal ID of the project.","title":"Structure"},{"location":"pages/extensibility/ProjectShims/#properties","text":"","title":"Properties"},{"location":"pages/extensibility/ProjectShims/#configurations-optional","text":"Used to add configuration to any module. Map of module names. The values represent the configuration that should be applied to the module. Note: Configuration is applied to the module using Object.assign() . This means that existing configuration properties will be overwritten.","title":"configurations (optional)"},{"location":"pages/extensibility/ProjectShims/#dependencies-optional","text":"Used to add dependencies to any module. Map of module names. The value is an array of module names that this module depends on. Note that the other modules need to be part of the dependency tree of the root project (not as direct children, just somewhere).","title":"dependencies (optional)"},{"location":"pages/extensibility/ProjectShims/#collections-optional","text":"Used when a dependency contains multiple modules. Also referred to as a Monorepo . Map of module names. The values are objects with collection-specific configuration: - modules : Map of project IDs and their relative file system paths inside the collection module. The project ID does not have to match the actual module name (as for instance defined in the modules package.json ). UI5 Project will use it in place of a module name.","title":"collections (optional)"},{"location":"pages/extensibility/ProjectShims/#example-a","text":"An application \"my-application\" defines a npm dependency to lodash in its package.json and configures it by using a project-shim extension added to its ui5.yaml . ui5.yaml specVersion : \"3.0\" type : application metadata : name : my.application --- # Everything below this line could also be put into the ui5.yaml of a standalone extension module specVersion : \"3.0\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : # name as defined in package.json specVersion : \"3.0\" type : module # Use module type metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" # map root directory of lodash module","title":"Example A:"},{"location":"pages/extensibility/ProjectShims/#example-b","text":"An application \"application.a\" depends on a library \"legacy.library.a\" which does not contain a ui5.yaml or package.json yet (nor do its dependencies).","title":"Example B:"},{"location":"pages/extensibility/ProjectShims/#structure-of-the-legacy-library-directories-two-repositories","text":"legacy-libs/ \\_ src/ \\_ library.a/ \\_ src/ \\_ test/ \\_ library.b/ \\_ src/ \\_ test/ legacy-library-x/ \\_ src/ \\_ test/","title":"Structure of the legacy library directories (two repositories)"},{"location":"pages/extensibility/ProjectShims/#dependencies-between-the-legacy-libraries","text":"legacy.library.a depends on legacy.library.b legacy.library.a depends on legacy.library.x legacy.library.b depends on legacy.library.x","title":"Dependencies between the legacy libraries"},{"location":"pages/extensibility/ProjectShims/#applicationa","text":"Directory structure application-a/ \\_ node_modules/ \\_ legacy-libs/ \\_ legacy-library-x/ \\_ webapp/ \\_ ui5.yaml \\_ package.json package.json (extract) napa can install git repositories that are lacking a package.json with npm. Within ui5-project , the npm translator already detects dependencies defined in the napa section of a package.json and tries to resolve them. { \"scripts\" : { \"install\" : \"napa\" }, \"napa\" : { \"legacy-libs\" : \"<git-repository-url>\" , \"legacy-library-x\" : \"<git-repository-url>\" } } ui5.yaml The shim defined in the application configures the legacy libraries and defines their dependencies. This shim might as well be a standalone module that is added to the applications dependencies. That would be the typical reuse scenario for shims. specVersion : \"3.0\" type : application metadata : name : application.a ---- specVersion : \"3.0\" kind : extension type : project-shim metadata : name : legacy-lib-shims shims : configurations : legacy-library-a : specVersion : \"3.0\" type : library metadata : name : legacy.library.a legacy-library-b : specVersion : \"3.0\" type : library metadata : name : legacy.library.b legacy-library-x : specVersion : \"3.0\" type : library metadata : name : legacy.library.x dependencies : legacy-library-a : - legacy-library-b - legacy-library-x legacy-library-b : - legacy-library-x collections : legacy-libs : modules : legacy-library-a : src/library.a legacy-library-b : src/library.b","title":"application.a"},{"location":"updates/migrate-v1/","text":"Migrate to v1 \u00b6 v1.0.0 is the first stable release of the UI5 Tooling. There are only a few notable changes to the 0.x alpha version. Breaking changes \u00b6 ui5-builder: Add transformation of apps index.html in self-contained build ( SAP/ui5-builder#137 ) When running a self-contained build on an application project, the index.html will be transformed by adopting the UI5 bootstrap script tag to load the custom bundle file instead. ui5-project: normalizer: Rename optional parameter \"translator\" ( SAP/ui5-project#96 ) Renamed parameter \"translator\" of functions generateDependencyTree and generateProjectTree to \"translatorName\" ui5-fs: Remove top-level access to adapters ( SAP/ui5-fs#69 ) Adapters \"AbstractAdapter\", \"FileSystem\" and \"Memory\" used to be accessible via the top-level export of index.js Example: require ( \"@ui5/project\" ). FileSystem This is no longer possible. Adapters are now grouped in the top-level object \"adapters\" and can be accessed from there Example: require ( \"@ui5/project\" ). adapters . FileSystem How to upgrade \u00b6 Global installation \u00b6 To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ). Local installation \u00b6 To upgrade the CLI installation within a project you need to run the following command. npm install @ui5/cli@^1 ui5.yaml \u00b6 specVersion: '1.0' \u00b6 We have introduced the specification version 1.0 . New features will only be available for projects with specVersion 1.0 or newer. The specVersion 0.1 will be compatible with the UI5 CLI v1.0.0, but we still recommend to adopt your projects. specVersion : '1.0' metadata : name : <project-name> type : <project-type>","title":"Migrate to v1"},{"location":"updates/migrate-v1/#migrate-to-v1","text":"v1.0.0 is the first stable release of the UI5 Tooling. There are only a few notable changes to the 0.x alpha version.","title":"Migrate to v1"},{"location":"updates/migrate-v1/#breaking-changes","text":"ui5-builder: Add transformation of apps index.html in self-contained build ( SAP/ui5-builder#137 ) When running a self-contained build on an application project, the index.html will be transformed by adopting the UI5 bootstrap script tag to load the custom bundle file instead. ui5-project: normalizer: Rename optional parameter \"translator\" ( SAP/ui5-project#96 ) Renamed parameter \"translator\" of functions generateDependencyTree and generateProjectTree to \"translatorName\" ui5-fs: Remove top-level access to adapters ( SAP/ui5-fs#69 ) Adapters \"AbstractAdapter\", \"FileSystem\" and \"Memory\" used to be accessible via the top-level export of index.js Example: require ( \"@ui5/project\" ). FileSystem This is no longer possible. Adapters are now grouped in the top-level object \"adapters\" and can be accessed from there Example: require ( \"@ui5/project\" ). adapters . FileSystem","title":"Breaking changes"},{"location":"updates/migrate-v1/#how-to-upgrade","text":"","title":"How to upgrade"},{"location":"updates/migrate-v1/#global-installation","text":"To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ).","title":"Global installation"},{"location":"updates/migrate-v1/#local-installation","text":"To upgrade the CLI installation within a project you need to run the following command. npm install @ui5/cli@^1","title":"Local installation"},{"location":"updates/migrate-v1/#ui5yaml","text":"","title":"ui5.yaml"},{"location":"updates/migrate-v1/#specversion-10","text":"We have introduced the specification version 1.0 . New features will only be available for projects with specVersion 1.0 or newer. The specVersion 0.1 will be compatible with the UI5 CLI v1.0.0, but we still recommend to adopt your projects. specVersion : '1.0' metadata : name : <project-name> type : <project-type>","title":"specVersion: '1.0'"},{"location":"updates/migrate-v2/","text":"Migrate to v2 \u00b6 v2.0.0 of the UI5 Tooling was released on April 1, 2020. As a major feature, it introduces the easy consumption of SAPUI5 libraries in UI5 projects. Breaking changes \u00b6 All UI5 Tooling Modules: Require Node.js >= 10 Support for older Node.js releases has been dropped. UI5 Builder: Make namespace mandatory for application and library projects ( SAP/ui5-builder#430 ) The UI5 Tooling must be able to determine an application- or library project's namespace. Otherwise an error is thrown. Ideally the namespace should be defined in the sap.app/id field of the manifest.json In case of libraries, additional fallbacks are in place: The name attribute defined in the .library file The path of the library.js file UI5 Builder: LibraryFormatter: Ignore manifest.json of nested apps ( SAP/ui5-builder#392 ) If a library contains both a manifest.json and a .library file, they must be located in the same directory. Otherwise the manifest.json is ignored. In cases where the manifest.json is located at a higher level or in a different directory at the same level as the .library file, an exception is thrown. UI5 Server: serveResources middleware: Expect *.properties files in UTF-8 by default ( SAP/ui5-server#303 ) For projects of types other than application or library , the UI5 Server now expects *.properties files to be UTF-8 encoded as opposed to ISO-8859-1 before. Note: This change does not affect most projects as *.properties files are typically only located in applications or libraries, for which their project specific configuration is used. UI5 FS: Remove deprecated parameter useNamespaces ( SAP/ui5-fs#223 ) Remove the deprecated parameter useNamespaces from method resourceFactory.createCollectionsForTree . Use the parameter getVirtualBasePathPrefix instead. How to upgrade \u00b6 Global installation \u00b6 To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ). Local installation \u00b6 To upgrade the CLI installation within a project, you need to run the following command: npm install --save-dev @ui5/cli@^2 ui5.yaml \u00b6 specVersion: '2.0' \u00b6 We have introduced the specification version 2.0 . New features will only be available for projects with specVersion 2.0 or newer. Most projects defining specVersion 0.1 or 1.0 can still be used. specVersion : '2.0' metadata : name : <project-name> type : <project-type>","title":"Migrate to v2"},{"location":"updates/migrate-v2/#migrate-to-v2","text":"v2.0.0 of the UI5 Tooling was released on April 1, 2020. As a major feature, it introduces the easy consumption of SAPUI5 libraries in UI5 projects.","title":"Migrate to v2"},{"location":"updates/migrate-v2/#breaking-changes","text":"All UI5 Tooling Modules: Require Node.js >= 10 Support for older Node.js releases has been dropped. UI5 Builder: Make namespace mandatory for application and library projects ( SAP/ui5-builder#430 ) The UI5 Tooling must be able to determine an application- or library project's namespace. Otherwise an error is thrown. Ideally the namespace should be defined in the sap.app/id field of the manifest.json In case of libraries, additional fallbacks are in place: The name attribute defined in the .library file The path of the library.js file UI5 Builder: LibraryFormatter: Ignore manifest.json of nested apps ( SAP/ui5-builder#392 ) If a library contains both a manifest.json and a .library file, they must be located in the same directory. Otherwise the manifest.json is ignored. In cases where the manifest.json is located at a higher level or in a different directory at the same level as the .library file, an exception is thrown. UI5 Server: serveResources middleware: Expect *.properties files in UTF-8 by default ( SAP/ui5-server#303 ) For projects of types other than application or library , the UI5 Server now expects *.properties files to be UTF-8 encoded as opposed to ISO-8859-1 before. Note: This change does not affect most projects as *.properties files are typically only located in applications or libraries, for which their project specific configuration is used. UI5 FS: Remove deprecated parameter useNamespaces ( SAP/ui5-fs#223 ) Remove the deprecated parameter useNamespaces from method resourceFactory.createCollectionsForTree . Use the parameter getVirtualBasePathPrefix instead.","title":"Breaking changes"},{"location":"updates/migrate-v2/#how-to-upgrade","text":"","title":"How to upgrade"},{"location":"updates/migrate-v2/#global-installation","text":"To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ).","title":"Global installation"},{"location":"updates/migrate-v2/#local-installation","text":"To upgrade the CLI installation within a project, you need to run the following command: npm install --save-dev @ui5/cli@^2","title":"Local installation"},{"location":"updates/migrate-v2/#ui5yaml","text":"","title":"ui5.yaml"},{"location":"updates/migrate-v2/#specversion-20","text":"We have introduced the specification version 2.0 . New features will only be available for projects with specVersion 2.0 or newer. Most projects defining specVersion 0.1 or 1.0 can still be used. specVersion : '2.0' metadata : name : <project-name> type : <project-type>","title":"specVersion: '2.0'"},{"location":"updates/migrate-v3/","text":"Migrate to v3 \u00b6 Now Released UI5 Tooling 3.0 has been released February 9, 2023 \ud83c\udf89 Install the latest version via: npm i --save-dev @ui5/cli@latest And find the announcement blog post here: SAP Community: UI5 Tooling 3.0 Node.js and npm Version Support \u00b6 This release requires Node.js versions v16.18.0, v18.12.0 or higher as well as npm v8 or higher. Support for older Node.js and npm releases has been dropped and will cause an error to be shown. Specification Versions Support \u00b6 Going forward, only projects with Specification Versions 2.0 and higher are supported. In case a legacy specification version is detected, an automatic migration is attempted. This means your old projects might still work. Unless they have non-standard configuration in their ui5.yaml. Changes for Projects \u00b6 Info \u2705 Projects defining Specification Version 2.x are expected to be fully compatible with UI5 Tooling v3 For projects defining the latest Specification Versions 3.0 and higher , some changes apply: Breaking Change: The metadata.name property is now restricted to contain only certain characters and no uppercase letters. See Configuration: name for details See also Configuration: Specification Version 3.0 . Changes for Extensions \u00b6 Info \u2705 Custom Tasks and Custom Middleware defining Specification Version 2.x are expected to be fully compatible with UI5 Tooling v3 For extensions defining the latest Specification Versions 3.0 and higher , some changes and improvements apply: Breaking Change: Custom Tasks need to request access to dependency resources By default, resources of dependencies can't be accessed. A custom task requiring such access needs to implement a callback function with the export name determineRequiredDependencies . In this function it can define the scope of dependency-access. Please refer to the Custom Task: Required Dependencies documentation for details Breaking Change: The metadata.name property is now restricted to contain only certain characters and no uppercase letters. See Configuration: name for details Features: Enhanced TaskUtil and MiddlewareUtil API For example providing access to a project's root directory , or dependencies See also Custom Tasks and Custom Server Middleware Changes to Dependency Configuration \u00b6 Info \u2705 The ui5.dependencies package.json configuration becomes obsolete and is ignored in UI5 Tooling v3. Configuration like the following is not needed anymore: package.json { [...] - \"ui5\": { - \"dependencies\": [ - \"my-package\" - ] - } [...] } dependencies , devDependencies and optionalDependencies are now automatically analyzed . If a dependency can be configured as a UI5 project or UI5 Tooling extension, it is added to the graph and its dependencies are analyzed. Note that devDependencies and optionalDependencies are ignored for all but the current root project. For projects that are intended to be consumed in other projects (for example libraries), this means that any required custom tasks must be added to dependencies . Changes to Module API \u00b6 The normalizer and projectTree modules have been removed. The builder API has been moved from @ui5/builder to @ui5/project. The JSON based, internal representation of a project dependency tree has been replaced with a graph. This is the result of a major refactoring of @ui5/project which lead to a series of API changes. Also the @ui5/server API has been changed. Instead of a tree , it now only accepts a graph instance as the first parameter. Migrate Your Code \u00b6 The tooling modules such as @ui5/builder, etc. have been transformed to ES Modules (\"ESM\"). Therefore, they no longer use a CommonJS export and cannot be included via require . If your code is in CommonJS format, it needs to use dynamic imports or be converted to ES Modules . Old: @ui5/project v2 const { normalizer } = require ( \"@ui5/project\" ); const { builder } = require ( \"@ui5/builder\" ); const tree = await normalizer . generateProjectTree ({ cwd : \".\" }); await builder . build ({ tree , destPath : \"./dist\" , buildDependencies : true , }); New: @ui5/project v3 ESM CommonJS import { graphFromPackageDependencies } from \"@ui5/project/graph\" ; let graph = await graphFromPackageDependencies ({ cwd : \".\" }); await graph . build ({ destPath : \"./dist\" , includedDependencies : [ \"*\" ], // Parameter \"buildDependencies\" has been removed }); // Since CommonJS does not suport top-level await, the code must be wrapped in an asynchronous function async function buildProject () { const { graphFromPackageDependencies } = await import ( \"@ui5/project/graph\" ); let graph = await graphFromPackageDependencies ({ cwd : \".\" }); await graph . build ({ destPath : \"./dist\" , includedDependencies : [ \"*\" ], // Parameter \"buildDependencies\" has been removed }); } Changes to @ui5/cli \u00b6 The CLI option --translator has been removed. For static dependency resolution, use the new option --dependency-definition to provide a file with static dependency information. The ui5 build dev command has been removed. Use ui5 build --exclude-task=* --include-task=replaceCopyright replaceVersion replaceBuildtime buildThemes instead. JSDoc Processor Fails When JSDoc Reports an Error \u00b6 The jsdocGenerator processor and the corresponding generateJsdoc task will now throw an error when JSDoc reports an error (exit code != 0). This will also fail the build when running ui5 build jsdoc . Always Building Required Dependencies \u00b6 If any of a project's build tasks requires access to resources of the project's dependencies, UI5 Tooling v3 will now always build that dependency upfront . This ensures that tasks always access processed resources and never the raw sources of a dependency. Resulting in better reproducibility of build results and resolving common issues. Especially for projects of type library , where standard tasks like buildThemes always require dependency access, UI5 Tooling will now always build all dependencies. In the future, a caching mechanism should help and improve build times with this new behavior. Info The CLI flags -a and --all are still present and now an alias for --include-all-dependencies . This flag (along with --include-dependency* and --exclude-dependency* ) mainly controls the build output . Use it to define whether dependency resources should be part of the build result. Please also refer to the ui5 build documentation . Removal of Standard Tasks and Processors \u00b6 The following tasks have been removed: createDebugFiles generateManifestBundle uglify The following processors have been removed: debugFileCreator manifestBundler resourceCopier uglifier Task Migration UI5 Tooling v2 UI5 Tooling v3 Note createDebugFiles uglify minify The minify task is executed earlier, before the bundling process takes place. Any existing 'beforeTask' or 'afterTask' configuration of custom tasks might need to be adapted to cater for this change. generateVersionInfo generateVersionInfo The task is no longer executed by default for application projects. It can be re-enabled by using the --include-task parameter. generateManifestBundle None This task was only needed for the HTML5 repository in Cloud Foundry. Meanwhile, the HTML5 repository implemented its own mechanism, so the task is no longer needed Updated list of standard tasks: Task Type application Type library Type theme-library escapeNonAsciiCharacters enabled enabled replaceCopyright enabled enabled enabled replaceVersion enabled enabled enabled replaceBuildtime enabled generateJsdoc disabled 1 executeJsdocSdkTransformation disabled 1 ADDED: minify enabled enabled generateFlexChangesBundle enabled REMOVED: generateManifestBundle disabled disabled generateLibraryManifest enabled generateComponentPreload enabled disabled 2 generateLibraryPreload enabled generateStandaloneAppBundle disabled 3 transformBootstrapHtml disabled 3 generateBundle disabled 4 disabled 4 buildThemes enabled enabled generateThemeDesignerResources disabled 5 disabled 5 REMOVED: createDebugFiles enabled enabled REMOVED: uglify enabled enabled generateVersionInfo disabled generateCachebusterInfo disabled generateApiIndex disabled 1 generateResourcesJson disabled disabled disabled Disabled tasks can be activated by certain build modes, the project configuration, or by using the --include-task CLI parameter . See footnotes where given 1 Enabled in jsdoc build, which disables most of the other tasks 2 Enabled for projects defining a component preload configuration 3 Enabled in self-contained build, which disables generateComponentPreload and generateLibraryPreload 4 Enabled for projects defining a bundle configuration 5 Can be enabled for framework projects via the includeTask option. For other projects, this task is skipped Removal of Standard Middleware \u00b6 The following middleware has been removed from the standard middlewares list : connectUi5Proxy Middleware Migration UI5 Tooling v2 UI5 Tooling v3 Note connectUi5Proxy None More sophisticated proxy solutions for ui5-server are now available in the form of custom middleware extensions from the UI5-community . Make sure to refactor any custom middleware that attaches to beforeMiddleware or afterMiddleware of connectUi5Proxy to reference some other middleware.","title":"Migrate to v3"},{"location":"updates/migrate-v3/#migrate-to-v3","text":"Now Released UI5 Tooling 3.0 has been released February 9, 2023 \ud83c\udf89 Install the latest version via: npm i --save-dev @ui5/cli@latest And find the announcement blog post here: SAP Community: UI5 Tooling 3.0","title":"Migrate to v3"},{"location":"updates/migrate-v3/#nodejs-and-npm-version-support","text":"This release requires Node.js versions v16.18.0, v18.12.0 or higher as well as npm v8 or higher. Support for older Node.js and npm releases has been dropped and will cause an error to be shown.","title":"Node.js and npm Version Support"},{"location":"updates/migrate-v3/#specification-versions-support","text":"Going forward, only projects with Specification Versions 2.0 and higher are supported. In case a legacy specification version is detected, an automatic migration is attempted. This means your old projects might still work. Unless they have non-standard configuration in their ui5.yaml.","title":"Specification Versions Support"},{"location":"updates/migrate-v3/#changes-for-projects","text":"Info \u2705 Projects defining Specification Version 2.x are expected to be fully compatible with UI5 Tooling v3 For projects defining the latest Specification Versions 3.0 and higher , some changes apply: Breaking Change: The metadata.name property is now restricted to contain only certain characters and no uppercase letters. See Configuration: name for details See also Configuration: Specification Version 3.0 .","title":"Changes for Projects"},{"location":"updates/migrate-v3/#changes-for-extensions","text":"Info \u2705 Custom Tasks and Custom Middleware defining Specification Version 2.x are expected to be fully compatible with UI5 Tooling v3 For extensions defining the latest Specification Versions 3.0 and higher , some changes and improvements apply: Breaking Change: Custom Tasks need to request access to dependency resources By default, resources of dependencies can't be accessed. A custom task requiring such access needs to implement a callback function with the export name determineRequiredDependencies . In this function it can define the scope of dependency-access. Please refer to the Custom Task: Required Dependencies documentation for details Breaking Change: The metadata.name property is now restricted to contain only certain characters and no uppercase letters. See Configuration: name for details Features: Enhanced TaskUtil and MiddlewareUtil API For example providing access to a project's root directory , or dependencies See also Custom Tasks and Custom Server Middleware","title":"Changes for Extensions"},{"location":"updates/migrate-v3/#changes-to-dependency-configuration","text":"Info \u2705 The ui5.dependencies package.json configuration becomes obsolete and is ignored in UI5 Tooling v3. Configuration like the following is not needed anymore: package.json { [...] - \"ui5\": { - \"dependencies\": [ - \"my-package\" - ] - } [...] } dependencies , devDependencies and optionalDependencies are now automatically analyzed . If a dependency can be configured as a UI5 project or UI5 Tooling extension, it is added to the graph and its dependencies are analyzed. Note that devDependencies and optionalDependencies are ignored for all but the current root project. For projects that are intended to be consumed in other projects (for example libraries), this means that any required custom tasks must be added to dependencies .","title":"Changes to Dependency Configuration"},{"location":"updates/migrate-v3/#changes-to-module-api","text":"The normalizer and projectTree modules have been removed. The builder API has been moved from @ui5/builder to @ui5/project. The JSON based, internal representation of a project dependency tree has been replaced with a graph. This is the result of a major refactoring of @ui5/project which lead to a series of API changes. Also the @ui5/server API has been changed. Instead of a tree , it now only accepts a graph instance as the first parameter.","title":"Changes to Module API"},{"location":"updates/migrate-v3/#migrate-your-code","text":"The tooling modules such as @ui5/builder, etc. have been transformed to ES Modules (\"ESM\"). Therefore, they no longer use a CommonJS export and cannot be included via require . If your code is in CommonJS format, it needs to use dynamic imports or be converted to ES Modules . Old: @ui5/project v2 const { normalizer } = require ( \"@ui5/project\" ); const { builder } = require ( \"@ui5/builder\" ); const tree = await normalizer . generateProjectTree ({ cwd : \".\" }); await builder . build ({ tree , destPath : \"./dist\" , buildDependencies : true , }); New: @ui5/project v3 ESM CommonJS import { graphFromPackageDependencies } from \"@ui5/project/graph\" ; let graph = await graphFromPackageDependencies ({ cwd : \".\" }); await graph . build ({ destPath : \"./dist\" , includedDependencies : [ \"*\" ], // Parameter \"buildDependencies\" has been removed }); // Since CommonJS does not suport top-level await, the code must be wrapped in an asynchronous function async function buildProject () { const { graphFromPackageDependencies } = await import ( \"@ui5/project/graph\" ); let graph = await graphFromPackageDependencies ({ cwd : \".\" }); await graph . build ({ destPath : \"./dist\" , includedDependencies : [ \"*\" ], // Parameter \"buildDependencies\" has been removed }); }","title":"Migrate Your Code"},{"location":"updates/migrate-v3/#changes-to-ui5cli","text":"The CLI option --translator has been removed. For static dependency resolution, use the new option --dependency-definition to provide a file with static dependency information. The ui5 build dev command has been removed. Use ui5 build --exclude-task=* --include-task=replaceCopyright replaceVersion replaceBuildtime buildThemes instead.","title":"Changes to @ui5/cli"},{"location":"updates/migrate-v3/#jsdoc-processor-fails-when-jsdoc-reports-an-error","text":"The jsdocGenerator processor and the corresponding generateJsdoc task will now throw an error when JSDoc reports an error (exit code != 0). This will also fail the build when running ui5 build jsdoc .","title":"JSDoc Processor Fails When JSDoc Reports an Error"},{"location":"updates/migrate-v3/#always-building-required-dependencies","text":"If any of a project's build tasks requires access to resources of the project's dependencies, UI5 Tooling v3 will now always build that dependency upfront . This ensures that tasks always access processed resources and never the raw sources of a dependency. Resulting in better reproducibility of build results and resolving common issues. Especially for projects of type library , where standard tasks like buildThemes always require dependency access, UI5 Tooling will now always build all dependencies. In the future, a caching mechanism should help and improve build times with this new behavior. Info The CLI flags -a and --all are still present and now an alias for --include-all-dependencies . This flag (along with --include-dependency* and --exclude-dependency* ) mainly controls the build output . Use it to define whether dependency resources should be part of the build result. Please also refer to the ui5 build documentation .","title":"Always Building Required Dependencies"},{"location":"updates/migrate-v3/#removal-of-standard-tasks-and-processors","text":"The following tasks have been removed: createDebugFiles generateManifestBundle uglify The following processors have been removed: debugFileCreator manifestBundler resourceCopier uglifier Task Migration UI5 Tooling v2 UI5 Tooling v3 Note createDebugFiles uglify minify The minify task is executed earlier, before the bundling process takes place. Any existing 'beforeTask' or 'afterTask' configuration of custom tasks might need to be adapted to cater for this change. generateVersionInfo generateVersionInfo The task is no longer executed by default for application projects. It can be re-enabled by using the --include-task parameter. generateManifestBundle None This task was only needed for the HTML5 repository in Cloud Foundry. Meanwhile, the HTML5 repository implemented its own mechanism, so the task is no longer needed Updated list of standard tasks: Task Type application Type library Type theme-library escapeNonAsciiCharacters enabled enabled replaceCopyright enabled enabled enabled replaceVersion enabled enabled enabled replaceBuildtime enabled generateJsdoc disabled 1 executeJsdocSdkTransformation disabled 1 ADDED: minify enabled enabled generateFlexChangesBundle enabled REMOVED: generateManifestBundle disabled disabled generateLibraryManifest enabled generateComponentPreload enabled disabled 2 generateLibraryPreload enabled generateStandaloneAppBundle disabled 3 transformBootstrapHtml disabled 3 generateBundle disabled 4 disabled 4 buildThemes enabled enabled generateThemeDesignerResources disabled 5 disabled 5 REMOVED: createDebugFiles enabled enabled REMOVED: uglify enabled enabled generateVersionInfo disabled generateCachebusterInfo disabled generateApiIndex disabled 1 generateResourcesJson disabled disabled disabled Disabled tasks can be activated by certain build modes, the project configuration, or by using the --include-task CLI parameter . See footnotes where given 1 Enabled in jsdoc build, which disables most of the other tasks 2 Enabled for projects defining a component preload configuration 3 Enabled in self-contained build, which disables generateComponentPreload and generateLibraryPreload 4 Enabled for projects defining a bundle configuration 5 Can be enabled for framework projects via the includeTask option. For other projects, this task is skipped","title":"Removal of Standard Tasks and Processors"},{"location":"updates/migrate-v3/#removal-of-standard-middleware","text":"The following middleware has been removed from the standard middlewares list : connectUi5Proxy Middleware Migration UI5 Tooling v2 UI5 Tooling v3 Note connectUi5Proxy None More sophisticated proxy solutions for ui5-server are now available in the form of custom middleware extensions from the UI5-community . Make sure to refactor any custom middleware that attaches to beforeMiddleware or afterMiddleware of connectUi5Proxy to reference some other middleware.","title":"Removal of Standard Middleware"}]}